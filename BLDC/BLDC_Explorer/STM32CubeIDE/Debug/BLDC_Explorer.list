
BLDC_Explorer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b9c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08008d74  08008d74  00009d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fdc  08008fdc  0000a488  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008fdc  08008fdc  00009fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fe4  08008fe4  0000a488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fe4  08008fe4  00009fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008fe8  08008fe8  00009fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000488  20000000  08008fec  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015f4  20000488  08009474  0000a488  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a7c  08009474  0000aa7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a488  2**0
                  CONTENTS, READONLY
 12 .debug_line   0003e75e  00000000  00000000  0000a4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000084  00000000  00000000  00048c16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0003f1b9  00000000  00000000  00048c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007bad  00000000  00000000  00087e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ad8  00000000  00000000  0008fa00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00138acb  00000000  00000000  000914d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002fc9  00000000  00000000  001c9fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0001ac50  00000000  00000000  001ccf6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003310d  00000000  00000000  001e7bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0021acc9  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004748  00000000  00000000  0021ad0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000488 	.word	0x20000488
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008d5c 	.word	0x08008d5c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000048c 	.word	0x2000048c
 8000214:	08008d5c 	.word	0x08008d5c

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	@ 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2uiz>:
 80007e4:	004a      	lsls	r2, r1, #1
 80007e6:	d211      	bcs.n	800080c <__aeabi_d2uiz+0x28>
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007ec:	d211      	bcs.n	8000812 <__aeabi_d2uiz+0x2e>
 80007ee:	d50d      	bpl.n	800080c <__aeabi_d2uiz+0x28>
 80007f0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d40e      	bmi.n	8000818 <__aeabi_d2uiz+0x34>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	fa23 f002 	lsr.w	r0, r3, r2
 800080a:	4770      	bx	lr
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	4770      	bx	lr
 8000812:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000816:	d102      	bne.n	800081e <__aeabi_d2uiz+0x3a>
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	4770      	bx	lr
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	4770      	bx	lr

08000824 <__aeabi_uldivmod>:
 8000824:	b953      	cbnz	r3, 800083c <__aeabi_uldivmod+0x18>
 8000826:	b94a      	cbnz	r2, 800083c <__aeabi_uldivmod+0x18>
 8000828:	2900      	cmp	r1, #0
 800082a:	bf08      	it	eq
 800082c:	2800      	cmpeq	r0, #0
 800082e:	bf1c      	itt	ne
 8000830:	f04f 31ff 	movne.w	r1, #4294967295
 8000834:	f04f 30ff 	movne.w	r0, #4294967295
 8000838:	f000 b988 	b.w	8000b4c <__aeabi_idiv0>
 800083c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000840:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000844:	f000 f806 	bl	8000854 <__udivmoddi4>
 8000848:	f8dd e004 	ldr.w	lr, [sp, #4]
 800084c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000850:	b004      	add	sp, #16
 8000852:	4770      	bx	lr

08000854 <__udivmoddi4>:
 8000854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000858:	9d08      	ldr	r5, [sp, #32]
 800085a:	468e      	mov	lr, r1
 800085c:	4604      	mov	r4, r0
 800085e:	4688      	mov	r8, r1
 8000860:	2b00      	cmp	r3, #0
 8000862:	d14a      	bne.n	80008fa <__udivmoddi4+0xa6>
 8000864:	428a      	cmp	r2, r1
 8000866:	4617      	mov	r7, r2
 8000868:	d962      	bls.n	8000930 <__udivmoddi4+0xdc>
 800086a:	fab2 f682 	clz	r6, r2
 800086e:	b14e      	cbz	r6, 8000884 <__udivmoddi4+0x30>
 8000870:	f1c6 0320 	rsb	r3, r6, #32
 8000874:	fa01 f806 	lsl.w	r8, r1, r6
 8000878:	fa20 f303 	lsr.w	r3, r0, r3
 800087c:	40b7      	lsls	r7, r6
 800087e:	ea43 0808 	orr.w	r8, r3, r8
 8000882:	40b4      	lsls	r4, r6
 8000884:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000888:	fa1f fc87 	uxth.w	ip, r7
 800088c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000890:	0c23      	lsrs	r3, r4, #16
 8000892:	fb0e 8811 	mls	r8, lr, r1, r8
 8000896:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800089a:	fb01 f20c 	mul.w	r2, r1, ip
 800089e:	429a      	cmp	r2, r3
 80008a0:	d909      	bls.n	80008b6 <__udivmoddi4+0x62>
 80008a2:	18fb      	adds	r3, r7, r3
 80008a4:	f101 30ff 	add.w	r0, r1, #4294967295
 80008a8:	f080 80ea 	bcs.w	8000a80 <__udivmoddi4+0x22c>
 80008ac:	429a      	cmp	r2, r3
 80008ae:	f240 80e7 	bls.w	8000a80 <__udivmoddi4+0x22c>
 80008b2:	3902      	subs	r1, #2
 80008b4:	443b      	add	r3, r7
 80008b6:	1a9a      	subs	r2, r3, r2
 80008b8:	b2a3      	uxth	r3, r4
 80008ba:	fbb2 f0fe 	udiv	r0, r2, lr
 80008be:	fb0e 2210 	mls	r2, lr, r0, r2
 80008c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008c6:	fb00 fc0c 	mul.w	ip, r0, ip
 80008ca:	459c      	cmp	ip, r3
 80008cc:	d909      	bls.n	80008e2 <__udivmoddi4+0x8e>
 80008ce:	18fb      	adds	r3, r7, r3
 80008d0:	f100 32ff 	add.w	r2, r0, #4294967295
 80008d4:	f080 80d6 	bcs.w	8000a84 <__udivmoddi4+0x230>
 80008d8:	459c      	cmp	ip, r3
 80008da:	f240 80d3 	bls.w	8000a84 <__udivmoddi4+0x230>
 80008de:	443b      	add	r3, r7
 80008e0:	3802      	subs	r0, #2
 80008e2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008e6:	eba3 030c 	sub.w	r3, r3, ip
 80008ea:	2100      	movs	r1, #0
 80008ec:	b11d      	cbz	r5, 80008f6 <__udivmoddi4+0xa2>
 80008ee:	40f3      	lsrs	r3, r6
 80008f0:	2200      	movs	r2, #0
 80008f2:	e9c5 3200 	strd	r3, r2, [r5]
 80008f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d905      	bls.n	800090a <__udivmoddi4+0xb6>
 80008fe:	b10d      	cbz	r5, 8000904 <__udivmoddi4+0xb0>
 8000900:	e9c5 0100 	strd	r0, r1, [r5]
 8000904:	2100      	movs	r1, #0
 8000906:	4608      	mov	r0, r1
 8000908:	e7f5      	b.n	80008f6 <__udivmoddi4+0xa2>
 800090a:	fab3 f183 	clz	r1, r3
 800090e:	2900      	cmp	r1, #0
 8000910:	d146      	bne.n	80009a0 <__udivmoddi4+0x14c>
 8000912:	4573      	cmp	r3, lr
 8000914:	d302      	bcc.n	800091c <__udivmoddi4+0xc8>
 8000916:	4282      	cmp	r2, r0
 8000918:	f200 8105 	bhi.w	8000b26 <__udivmoddi4+0x2d2>
 800091c:	1a84      	subs	r4, r0, r2
 800091e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000922:	2001      	movs	r0, #1
 8000924:	4690      	mov	r8, r2
 8000926:	2d00      	cmp	r5, #0
 8000928:	d0e5      	beq.n	80008f6 <__udivmoddi4+0xa2>
 800092a:	e9c5 4800 	strd	r4, r8, [r5]
 800092e:	e7e2      	b.n	80008f6 <__udivmoddi4+0xa2>
 8000930:	2a00      	cmp	r2, #0
 8000932:	f000 8090 	beq.w	8000a56 <__udivmoddi4+0x202>
 8000936:	fab2 f682 	clz	r6, r2
 800093a:	2e00      	cmp	r6, #0
 800093c:	f040 80a4 	bne.w	8000a88 <__udivmoddi4+0x234>
 8000940:	1a8a      	subs	r2, r1, r2
 8000942:	0c03      	lsrs	r3, r0, #16
 8000944:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000948:	b280      	uxth	r0, r0
 800094a:	b2bc      	uxth	r4, r7
 800094c:	2101      	movs	r1, #1
 800094e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000952:	fb0e 221c 	mls	r2, lr, ip, r2
 8000956:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800095a:	fb04 f20c 	mul.w	r2, r4, ip
 800095e:	429a      	cmp	r2, r3
 8000960:	d907      	bls.n	8000972 <__udivmoddi4+0x11e>
 8000962:	18fb      	adds	r3, r7, r3
 8000964:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000968:	d202      	bcs.n	8000970 <__udivmoddi4+0x11c>
 800096a:	429a      	cmp	r2, r3
 800096c:	f200 80e0 	bhi.w	8000b30 <__udivmoddi4+0x2dc>
 8000970:	46c4      	mov	ip, r8
 8000972:	1a9b      	subs	r3, r3, r2
 8000974:	fbb3 f2fe 	udiv	r2, r3, lr
 8000978:	fb0e 3312 	mls	r3, lr, r2, r3
 800097c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000980:	fb02 f404 	mul.w	r4, r2, r4
 8000984:	429c      	cmp	r4, r3
 8000986:	d907      	bls.n	8000998 <__udivmoddi4+0x144>
 8000988:	18fb      	adds	r3, r7, r3
 800098a:	f102 30ff 	add.w	r0, r2, #4294967295
 800098e:	d202      	bcs.n	8000996 <__udivmoddi4+0x142>
 8000990:	429c      	cmp	r4, r3
 8000992:	f200 80ca 	bhi.w	8000b2a <__udivmoddi4+0x2d6>
 8000996:	4602      	mov	r2, r0
 8000998:	1b1b      	subs	r3, r3, r4
 800099a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800099e:	e7a5      	b.n	80008ec <__udivmoddi4+0x98>
 80009a0:	f1c1 0620 	rsb	r6, r1, #32
 80009a4:	408b      	lsls	r3, r1
 80009a6:	fa22 f706 	lsr.w	r7, r2, r6
 80009aa:	431f      	orrs	r7, r3
 80009ac:	fa0e f401 	lsl.w	r4, lr, r1
 80009b0:	fa20 f306 	lsr.w	r3, r0, r6
 80009b4:	fa2e fe06 	lsr.w	lr, lr, r6
 80009b8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80009bc:	4323      	orrs	r3, r4
 80009be:	fa00 f801 	lsl.w	r8, r0, r1
 80009c2:	fa1f fc87 	uxth.w	ip, r7
 80009c6:	fbbe f0f9 	udiv	r0, lr, r9
 80009ca:	0c1c      	lsrs	r4, r3, #16
 80009cc:	fb09 ee10 	mls	lr, r9, r0, lr
 80009d0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80009d4:	fb00 fe0c 	mul.w	lr, r0, ip
 80009d8:	45a6      	cmp	lr, r4
 80009da:	fa02 f201 	lsl.w	r2, r2, r1
 80009de:	d909      	bls.n	80009f4 <__udivmoddi4+0x1a0>
 80009e0:	193c      	adds	r4, r7, r4
 80009e2:	f100 3aff 	add.w	sl, r0, #4294967295
 80009e6:	f080 809c 	bcs.w	8000b22 <__udivmoddi4+0x2ce>
 80009ea:	45a6      	cmp	lr, r4
 80009ec:	f240 8099 	bls.w	8000b22 <__udivmoddi4+0x2ce>
 80009f0:	3802      	subs	r0, #2
 80009f2:	443c      	add	r4, r7
 80009f4:	eba4 040e 	sub.w	r4, r4, lr
 80009f8:	fa1f fe83 	uxth.w	lr, r3
 80009fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a00:	fb09 4413 	mls	r4, r9, r3, r4
 8000a04:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a08:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a0c:	45a4      	cmp	ip, r4
 8000a0e:	d908      	bls.n	8000a22 <__udivmoddi4+0x1ce>
 8000a10:	193c      	adds	r4, r7, r4
 8000a12:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a16:	f080 8082 	bcs.w	8000b1e <__udivmoddi4+0x2ca>
 8000a1a:	45a4      	cmp	ip, r4
 8000a1c:	d97f      	bls.n	8000b1e <__udivmoddi4+0x2ca>
 8000a1e:	3b02      	subs	r3, #2
 8000a20:	443c      	add	r4, r7
 8000a22:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a26:	eba4 040c 	sub.w	r4, r4, ip
 8000a2a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a2e:	4564      	cmp	r4, ip
 8000a30:	4673      	mov	r3, lr
 8000a32:	46e1      	mov	r9, ip
 8000a34:	d362      	bcc.n	8000afc <__udivmoddi4+0x2a8>
 8000a36:	d05f      	beq.n	8000af8 <__udivmoddi4+0x2a4>
 8000a38:	b15d      	cbz	r5, 8000a52 <__udivmoddi4+0x1fe>
 8000a3a:	ebb8 0203 	subs.w	r2, r8, r3
 8000a3e:	eb64 0409 	sbc.w	r4, r4, r9
 8000a42:	fa04 f606 	lsl.w	r6, r4, r6
 8000a46:	fa22 f301 	lsr.w	r3, r2, r1
 8000a4a:	431e      	orrs	r6, r3
 8000a4c:	40cc      	lsrs	r4, r1
 8000a4e:	e9c5 6400 	strd	r6, r4, [r5]
 8000a52:	2100      	movs	r1, #0
 8000a54:	e74f      	b.n	80008f6 <__udivmoddi4+0xa2>
 8000a56:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a5a:	0c01      	lsrs	r1, r0, #16
 8000a5c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a60:	b280      	uxth	r0, r0
 8000a62:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a66:	463b      	mov	r3, r7
 8000a68:	4638      	mov	r0, r7
 8000a6a:	463c      	mov	r4, r7
 8000a6c:	46b8      	mov	r8, r7
 8000a6e:	46be      	mov	lr, r7
 8000a70:	2620      	movs	r6, #32
 8000a72:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a76:	eba2 0208 	sub.w	r2, r2, r8
 8000a7a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a7e:	e766      	b.n	800094e <__udivmoddi4+0xfa>
 8000a80:	4601      	mov	r1, r0
 8000a82:	e718      	b.n	80008b6 <__udivmoddi4+0x62>
 8000a84:	4610      	mov	r0, r2
 8000a86:	e72c      	b.n	80008e2 <__udivmoddi4+0x8e>
 8000a88:	f1c6 0220 	rsb	r2, r6, #32
 8000a8c:	fa2e f302 	lsr.w	r3, lr, r2
 8000a90:	40b7      	lsls	r7, r6
 8000a92:	40b1      	lsls	r1, r6
 8000a94:	fa20 f202 	lsr.w	r2, r0, r2
 8000a98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000aa2:	b2bc      	uxth	r4, r7
 8000aa4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000aa8:	0c11      	lsrs	r1, r2, #16
 8000aaa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aae:	fb08 f904 	mul.w	r9, r8, r4
 8000ab2:	40b0      	lsls	r0, r6
 8000ab4:	4589      	cmp	r9, r1
 8000ab6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000aba:	b280      	uxth	r0, r0
 8000abc:	d93e      	bls.n	8000b3c <__udivmoddi4+0x2e8>
 8000abe:	1879      	adds	r1, r7, r1
 8000ac0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ac4:	d201      	bcs.n	8000aca <__udivmoddi4+0x276>
 8000ac6:	4589      	cmp	r9, r1
 8000ac8:	d81f      	bhi.n	8000b0a <__udivmoddi4+0x2b6>
 8000aca:	eba1 0109 	sub.w	r1, r1, r9
 8000ace:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ad2:	fb09 f804 	mul.w	r8, r9, r4
 8000ad6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ada:	b292      	uxth	r2, r2
 8000adc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ae0:	4542      	cmp	r2, r8
 8000ae2:	d229      	bcs.n	8000b38 <__udivmoddi4+0x2e4>
 8000ae4:	18ba      	adds	r2, r7, r2
 8000ae6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000aea:	d2c4      	bcs.n	8000a76 <__udivmoddi4+0x222>
 8000aec:	4542      	cmp	r2, r8
 8000aee:	d2c2      	bcs.n	8000a76 <__udivmoddi4+0x222>
 8000af0:	f1a9 0102 	sub.w	r1, r9, #2
 8000af4:	443a      	add	r2, r7
 8000af6:	e7be      	b.n	8000a76 <__udivmoddi4+0x222>
 8000af8:	45f0      	cmp	r8, lr
 8000afa:	d29d      	bcs.n	8000a38 <__udivmoddi4+0x1e4>
 8000afc:	ebbe 0302 	subs.w	r3, lr, r2
 8000b00:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b04:	3801      	subs	r0, #1
 8000b06:	46e1      	mov	r9, ip
 8000b08:	e796      	b.n	8000a38 <__udivmoddi4+0x1e4>
 8000b0a:	eba7 0909 	sub.w	r9, r7, r9
 8000b0e:	4449      	add	r1, r9
 8000b10:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b14:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b18:	fb09 f804 	mul.w	r8, r9, r4
 8000b1c:	e7db      	b.n	8000ad6 <__udivmoddi4+0x282>
 8000b1e:	4673      	mov	r3, lr
 8000b20:	e77f      	b.n	8000a22 <__udivmoddi4+0x1ce>
 8000b22:	4650      	mov	r0, sl
 8000b24:	e766      	b.n	80009f4 <__udivmoddi4+0x1a0>
 8000b26:	4608      	mov	r0, r1
 8000b28:	e6fd      	b.n	8000926 <__udivmoddi4+0xd2>
 8000b2a:	443b      	add	r3, r7
 8000b2c:	3a02      	subs	r2, #2
 8000b2e:	e733      	b.n	8000998 <__udivmoddi4+0x144>
 8000b30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b34:	443b      	add	r3, r7
 8000b36:	e71c      	b.n	8000972 <__udivmoddi4+0x11e>
 8000b38:	4649      	mov	r1, r9
 8000b3a:	e79c      	b.n	8000a76 <__udivmoddi4+0x222>
 8000b3c:	eba1 0109 	sub.w	r1, r1, r9
 8000b40:	46c4      	mov	ip, r8
 8000b42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b46:	fb09 f804 	mul.w	r8, r9, r4
 8000b4a:	e7c4      	b.n	8000ad6 <__udivmoddi4+0x282>

08000b4c <__aeabi_idiv0>:
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b50:	480d      	ldr	r0, [pc, #52]	@ (8000b88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b52:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b54:	f003 f928 	bl	8003da8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b58:	480c      	ldr	r0, [pc, #48]	@ (8000b8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b5a:	490d      	ldr	r1, [pc, #52]	@ (8000b90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b94 <LoopForever+0xe>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b70:	4c0a      	ldr	r4, [pc, #40]	@ (8000b9c <LoopForever+0x16>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f008 f8bb 	bl	8008cf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b82:	f000 fba9 	bl	80012d8 <main>

08000b86 <LoopForever>:

LoopForever:
    b LoopForever
 8000b86:	e7fe      	b.n	8000b86 <LoopForever>
  ldr   r0, =_estack
 8000b88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b90:	20000488 	.word	0x20000488
  ldr r2, =_sidata
 8000b94:	08008fec 	.word	0x08008fec
  ldr r2, =_sbss
 8000b98:	20000488 	.word	0x20000488
  ldr r4, =_ebss
 8000b9c:	20001a7c 	.word	0x20001a7c

08000ba0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ba0:	e7fe      	b.n	8000ba0 <ADC3_IRQHandler>
	...

08000ba4 <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->ASPEPIp);
 8000ba8:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8000baa:	6940      	ldr	r0, [r0, #20]
 8000bac:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000bae:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
    /* Configure UART to receive first packet*/
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000bb0:	6d65      	ldr	r5, [r4, #84]	@ 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000bb2:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8000bb6:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000bba:	6960      	ldr	r0, [r4, #20]
 8000bbc:	f104 011c 	add.w	r1, r4, #28
 8000bc0:	462b      	mov	r3, r5
 8000bc2:	2204      	movs	r2, #4
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000bc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000bc8:	4718      	bx	r3
 8000bca:	bf00      	nop

08000bcc <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000bcc:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000bce:	780b      	ldrb	r3, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 8000bd0:	790a      	ldrb	r2, [r1, #4]
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000bd2:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000bd6:	4c1e      	ldr	r4, [pc, #120]	@ (8000c50 <ASPEP_sendBeacon+0x84>)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000bd8:	01db      	lsls	r3, r3, #7
 8000bda:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 8000bde:	784a      	ldrb	r2, [r1, #1]
 8000be0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000be4:	78ca      	ldrb	r2, [r1, #3]
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000be6:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000bea:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 8000bf4:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000bf8:	5ca2      	ldrb	r2, [r4, r2]
 8000bfa:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8000bfe:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000c00:	5ca2      	ldrb	r2, [r4, r2]
 8000c02:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 8000c06:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000c08:	5ca2      	ldrb	r2, [r4, r2]
 8000c0a:	4c12      	ldr	r4, [pc, #72]	@ (8000c54 <ASPEP_sendBeacon+0x88>)
 8000c0c:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000c10:	5ca2      	ldrb	r2, [r4, r2]
 8000c12:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000c16:	f043 0305 	orr.w	r3, r3, #5
 8000c1a:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000c1e:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8000c20:	b14b      	cbz	r3, 8000c36 <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c22:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 8000c24:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000c28:	b913      	cbnz	r3, 8000c30 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8000c30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c34:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000c36:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000c40:	6481      	str	r1, [r0, #72]	@ 0x48
 8000c42:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000c44:	2204      	movs	r2, #4
 8000c46:	6d83      	ldr	r3, [r0, #88]	@ 0x58
}
 8000c48:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000c4c:	6940      	ldr	r0, [r0, #20]
 8000c4e:	4718      	bx	r3
 8000c50:	08008d84 	.word	0x08008d84
 8000c54:	08008d74 	.word	0x08008d74

08000c58 <ASPEP_sendPing>:
{
 8000c58:	b430      	push	{r4, r5}
                   | (uint32_t)((uint32_t)cBit << 5U)
 8000c5a:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000c5c:	f890 c060 	ldrb.w	ip, [r0, #96]	@ 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 8000c60:	f890 4063 	ldrb.w	r4, [r0, #99]	@ 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000c64:	4d1d      	ldr	r5, [pc, #116]	@ (8000cdc <ASPEP_sendPing+0x84>)
                   | (uint32_t)((uint32_t)cBit << 5U)
 8000c66:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000c6a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                   | (uint32_t)((uint32_t)Nbit << 6U)
 8000c6e:	f00c 0101 	and.w	r1, ip, #1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000c72:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8000c76:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 8000c7a:	f004 040f 	and.w	r4, r4, #15
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000c7e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	4c16      	ldr	r4, [pc, #88]	@ (8000ce0 <ASPEP_sendPing+0x88>)
 8000c86:	f042 0206 	orr.w	r2, r2, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000c8a:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000c8e:	5ca2      	ldrb	r2, [r4, r2]
 8000c90:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8000c94:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000c96:	5ca2      	ldrb	r2, [r4, r2]
 8000c98:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 8000c9c:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000c9e:	5ca2      	ldrb	r2, [r4, r2]
 8000ca0:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000ca4:	5ceb      	ldrb	r3, [r5, r3]
 8000ca6:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000caa:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000cae:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8000cb0:	b143      	cbz	r3, 8000cc4 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000cb2:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000cb4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000cb8:	b913      	cbnz	r3, 8000cc0 <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8000cc0:	bc30      	pop	{r4, r5}
 8000cc2:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000cc4:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000cce:	6481      	str	r1, [r0, #72]	@ 0x48
 8000cd0:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8000cd6:	6940      	ldr	r0, [r0, #20]
}
 8000cd8:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000cda:	4718      	bx	r3
 8000cdc:	08008d74 	.word	0x08008d74
 8000ce0:	08008d84 	.word	0x08008d84

08000ce4 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 8000ce4:	2a0a      	cmp	r2, #10
 8000ce6:	d009      	beq.n	8000cfc <ASPEP_getBuffer+0x18>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 8000ce8:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d91d      	bls.n	8000d2c <ASPEP_getBuffer+0x48>
 8000cf0:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d90d      	bls.n	8000d14 <ASPEP_getBuffer+0x30>
        result = false;
 8000cf8:	2000      	movs	r0, #0
}
 8000cfa:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 8000cfc:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d8f9      	bhi.n	8000cf8 <ASPEP_getBuffer+0x14>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000d04:	6a83      	ldr	r3, [r0, #40]	@ 0x28
        pHandle->syncBuffer.state = writeLock;
 8000d06:	2201      	movs	r2, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000d08:	3304      	adds	r3, #4
 8000d0a:	600b      	str	r3, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 8000d0c:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
  bool result = true;
 8000d10:	2001      	movs	r0, #1
 8000d12:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000d14:	6b83      	ldr	r3, [r0, #56]	@ 0x38
          pHandle->asyncBufferB.state = writeLock;
 8000d16:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000d1a:	f100 0238 	add.w	r2, r0, #56	@ 0x38
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000d1e:	3304      	adds	r3, #4
          pHandle->asyncBufferB.state = writeLock;
 8000d20:	f880 c03e 	strb.w	ip, [r0, #62]	@ 0x3e
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000d24:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000d26:	600b      	str	r3, [r1, #0]
  bool result = true;
 8000d28:	2001      	movs	r0, #1
 8000d2a:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000d2c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
          pHandle->asyncBufferA.state = writeLock;
 8000d2e:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000d32:	f100 0230 	add.w	r2, r0, #48	@ 0x30
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000d36:	3304      	adds	r3, #4
          pHandle->asyncBufferA.state = writeLock;
 8000d38:	f880 c036 	strb.w	ip, [r0, #54]	@ 0x36
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000d3c:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000d3e:	600b      	str	r3, [r1, #0]
 8000d40:	e7f2      	b.n	8000d28 <ASPEP_getBuffer+0x44>
 8000d42:	bf00      	nop

08000d44 <ASPEP_sendPacket>:
{
 8000d44:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8000d46:	f890 0064 	ldrb.w	r0, [r0, #100]	@ 0x64
 8000d4a:	2802      	cmp	r0, #2
 8000d4c:	d001      	beq.n	8000d52 <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 8000d4e:	2002      	movs	r0, #2
 8000d50:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8000d52:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 8000d56:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 8000d5a:	f89c 006c 	ldrb.w	r0, [ip, #108]	@ 0x6c
 8000d5e:	2801      	cmp	r0, #1
 8000d60:	d104      	bne.n	8000d6c <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8000d62:	f64f 60ca 	movw	r0, #65226	@ 0xfeca
 8000d66:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000d68:	3202      	adds	r2, #2
 8000d6a:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 8000d6c:	2b0a      	cmp	r3, #10
 8000d6e:	d105      	bne.n	8000d7c <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 8000d70:	f89c 0010 	ldrb.w	r0, [ip, #16]
 8000d74:	b348      	cbz	r0, 8000dca <ASPEP_sendPacket+0x86>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 8000d76:	2000      	movs	r0, #0
 8000d78:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 8000d7c:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 8000d80:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000d82:	4d34      	ldr	r5, [pc, #208]	@ (8000e54 <ASPEP_sendPacket+0x110>)
 8000d84:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000d86:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000d88:	5d2e      	ldrb	r6, [r5, r4]
 8000d8a:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8000d8e:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8000d90:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000d94:	5d2e      	ldrb	r6, [r5, r4]
 8000d96:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8000d9a:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000d9c:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000d9e:	5d2c      	ldrb	r4, [r5, r4]
 8000da0:	f3c0 6503 	ubfx	r5, r0, #24, #4
 8000da4:	406c      	eors	r4, r5
 8000da6:	4d2c      	ldr	r5, [pc, #176]	@ (8000e58 <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 8000da8:	5d2c      	ldrb	r4, [r5, r4]
 8000daa:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 8000dae:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000db2:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000db4:	f8dc 1048 	ldr.w	r1, [ip, #72]	@ 0x48
 8000db8:	b1b9      	cbz	r1, 8000dea <ASPEP_sendPacket+0xa6>
  __ASM volatile ("cpsie i" : : : "memory");
 8000dba:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 8000dbc:	2b09      	cmp	r3, #9
 8000dbe:	d006      	beq.n	8000dce <ASPEP_sendPacket+0x8a>
      else if (MCTL_SYNC == dataType)
 8000dc0:	2b0a      	cmp	r3, #10
 8000dc2:	d02a      	beq.n	8000e1a <ASPEP_sendPacket+0xd6>
      else if(ASPEP_CTRL == dataType)
 8000dc4:	b37b      	cbz	r3, 8000e26 <ASPEP_sendPacket+0xe2>
  uint8_t result = ASPEP_OK;
 8000dc6:	2000      	movs	r0, #0
}
 8000dc8:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 8000dca:	2001      	movs	r0, #1
}
 8000dcc:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 8000dce:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 8000dd2:	6819      	ldr	r1, [r3, #0]
  uint8_t result = ASPEP_OK;
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	bf14      	ite	ne
 8000dd8:	2003      	movne	r0, #3
 8000dda:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 8000ddc:	f8dc 1044 	ldr.w	r1, [ip, #68]	@ 0x44
 8000de0:	b3a1      	cbz	r1, 8000e4c <ASPEP_sendPacket+0x108>
        pHandle->lastRequestedAsyncBuff->state = pending;
 8000de2:	2102      	movs	r1, #2
 8000de4:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 8000de6:	809a      	strh	r2, [r3, #4]
}
 8000de8:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 8000dea:	2b09      	cmp	r3, #9
 8000dec:	d029      	beq.n	8000e42 <ASPEP_sendPacket+0xfe>
      else if (MCTL_SYNC == dataType)
 8000dee:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 8000df0:	f04f 0303 	mov.w	r3, #3
 8000df4:	bf0b      	itete	eq
 8000df6:	f88c 302e 	strbeq.w	r3, [ip, #46]	@ 0x2e
        pHandle->ctrlBuffer.state = readLock;
 8000dfa:	f88c 3024 	strbne.w	r3, [ip, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000dfe:	f10c 0328 	addeq.w	r3, ip, #40	@ 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000e02:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000e06:	f8cc 3048 	str.w	r3, [ip, #72]	@ 0x48
 8000e0a:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000e0c:	f8dc 3058 	ldr.w	r3, [ip, #88]	@ 0x58
 8000e10:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8000e14:	4671      	mov	r1, lr
 8000e16:	4798      	blx	r3
 8000e18:	e7d5      	b.n	8000dc6 <ASPEP_sendPacket+0x82>
        if (pHandle -> syncBuffer.state != writeLock)
 8000e1a:	f89c 302e 	ldrb.w	r3, [ip, #46]	@ 0x2e
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d009      	beq.n	8000e36 <ASPEP_sendPacket+0xf2>
          result = ASPEP_BUFFER_ERROR;
 8000e22:	2003      	movs	r0, #3
}
 8000e24:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle->ctrlBuffer.state != available)
 8000e26:	f89c 3024 	ldrb.w	r3, [ip, #36]	@ 0x24
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1f9      	bne.n	8000e22 <ASPEP_sendPacket+0xde>
          pHandle->ctrlBuffer.state = pending;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	f88c 3024 	strb.w	r3, [ip, #36]	@ 0x24
 8000e34:	e7c7      	b.n	8000dc6 <ASPEP_sendPacket+0x82>
          pHandle->syncBuffer.state = pending;
 8000e36:	2302      	movs	r3, #2
 8000e38:	f88c 302e 	strb.w	r3, [ip, #46]	@ 0x2e
          pHandle->syncBuffer.length = bufferLength;
 8000e3c:	f8ac 202c 	strh.w	r2, [ip, #44]	@ 0x2c
 8000e40:	e7c1      	b.n	8000dc6 <ASPEP_sendPacket+0x82>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 8000e42:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 8000e46:	2103      	movs	r1, #3
 8000e48:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000e4a:	e7dc      	b.n	8000e06 <ASPEP_sendPacket+0xc2>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8000e4c:	f8cc 3044 	str.w	r3, [ip, #68]	@ 0x44
 8000e50:	e7c7      	b.n	8000de2 <ASPEP_sendPacket+0x9e>
 8000e52:	bf00      	nop
 8000e54:	08008d84 	.word	0x08008d84
 8000e58:	08008d74 	.word	0x08008d74

08000e5c <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000e5c:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000e5e:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000e62:	2b03      	cmp	r3, #3
{
 8000e64:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 8000e66:	d013      	beq.n	8000e90 <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8000e68:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000e6e:	f890 202e 	ldrb.w	r2, [r0, #46]	@ 0x2e
 8000e72:	2a02      	cmp	r2, #2
 8000e74:	d013      	beq.n	8000e9e <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d11d      	bne.n	8000eb6 <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000e7a:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000e7e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000e80:	6481      	str	r1, [r0, #72]	@ 0x48
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000e82:	2204      	movs	r2, #4
 8000e84:	6940      	ldr	r0, [r0, #20]
 8000e86:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000e8e:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 8000e90:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
      pHandle->ctrlBuffer.state = available;
 8000e94:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 8000e96:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 8000e98:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (pHandle->syncBuffer.state == pending)
 8000e9c:	d10b      	bne.n	8000eb6 <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000e9e:	f104 0028 	add.w	r0, r4, #40	@ 0x28
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000ea2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000ea4:	64a0      	str	r0, [r4, #72]	@ 0x48
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000ea6:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8000ea8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000eaa:	6960      	ldr	r0, [r4, #20]
 8000eac:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
}
 8000eb4:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb6:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 8000eb8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000eba:	b1cb      	cbz	r3, 8000ef0 <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8000ebc:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 8000ebe:	64a3      	str	r3, [r4, #72]	@ 0x48
        pHandle->asyncNextBuffer->state = readLock;
 8000ec0:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 8000ec2:	6819      	ldr	r1, [r3, #0]
 8000ec4:	889a      	ldrh	r2, [r3, #4]
 8000ec6:	6960      	ldr	r0, [r4, #20]
 8000ec8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000eca:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8000ecc:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d007      	beq.n	8000ee4 <ASPEP_HWDataTransmittedIT+0x88>
 8000ed4:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d003      	beq.n	8000ee4 <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	6463      	str	r3, [r4, #68]	@ 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 8000ee0:	b662      	cpsie	i
}
 8000ee2:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 8000ee4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8000ee6:	0063      	lsls	r3, r4, #1
 8000ee8:	3368      	adds	r3, #104	@ 0x68
 8000eea:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 8000eec:	6463      	str	r3, [r4, #68]	@ 0x44
        {
 8000eee:	e7f7      	b.n	8000ee0 <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 8000ef0:	64a3      	str	r3, [r4, #72]	@ 0x48
 8000ef2:	e7f5      	b.n	8000ee0 <ASPEP_HWDataTransmittedIT+0x84>

08000ef4 <ASPEP_RXframeProcess>:
  * @param  *packetLength Length of the packet to be processed
  *
  * @return Returns the buffer of data transmitted by the MCP controller device
  */
uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 8000ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 8000ef8:	f890 5061 	ldrb.w	r5, [r0, #97]	@ 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000efc:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 8000efe:	2300      	movs	r3, #0
{
 8000f00:	4604      	mov	r4, r0
    *packetLength = 0;
 8000f02:	800b      	strh	r3, [r1, #0]
    if (pHandle->NewPacketAvailable)
 8000f04:	b19d      	cbz	r5, 8000f2e <ASPEP_RXframeProcess+0x3a>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 8000f06:	f890 5064 	ldrb.w	r5, [r0, #100]	@ 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000f0a:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      switch (pHandle->ASPEP_State)
 8000f0e:	2d01      	cmp	r5, #1
 8000f10:	d04e      	beq.n	8000fb0 <ASPEP_RXframeProcess+0xbc>
 8000f12:	2d02      	cmp	r5, #2
 8000f14:	d012      	beq.n	8000f3c <ASPEP_RXframeProcess+0x48>
 8000f16:	b9d5      	cbnz	r5, 8000f4e <ASPEP_RXframeProcess+0x5a>
      {
        case ASPEP_IDLE:
        {
          if (BEACON == pHandle->rxPacketType)
 8000f18:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8000f1a:	2b05      	cmp	r3, #5
 8000f1c:	d062      	beq.n	8000fe4 <ASPEP_RXframeProcess+0xf0>
              /* Nothing to do, controller has to send back new beacon with matching capabilities */
            }
            /* Beacon Packet must be answered*/
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
          }
          else if (PING == pHandle->rxPacketType)
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d115      	bne.n	8000f4e <ASPEP_RXframeProcess+0x5a>
          {
            /* In Listening for controller performer, */
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000f22:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000f26:	4629      	mov	r1, r5
 8000f28:	f7ff fe96 	bl	8000c58 <ASPEP_sendPing>
 8000f2c:	e00f      	b.n	8000f4e <ASPEP_RXframeProcess+0x5a>
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
    }
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000f2e:	f890 3062 	ldrb.w	r3, [r0, #98]	@ 0x62
 8000f32:	b9b3      	cbnz	r3, 8000f62 <ASPEP_RXframeProcess+0x6e>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000f34:	2500      	movs	r5, #0
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 8000f36:	4628      	mov	r0, r5
 8000f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 8000f3c:	6e85      	ldr	r5, [r0, #104]	@ 0x68
 8000f3e:	2d05      	cmp	r5, #5
 8000f40:	f000 80d9 	beq.w	80010f6 <ASPEP_RXframeProcess+0x202>
          else if (PING == pHandle->rxPacketType)
 8000f44:	2d06      	cmp	r5, #6
 8000f46:	f000 8125 	beq.w	8001194 <ASPEP_RXframeProcess+0x2a0>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000f4a:	2d09      	cmp	r5, #9
 8000f4c:	d03e      	beq.n	8000fcc <ASPEP_RXframeProcess+0xd8>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8000f4e:	2500      	movs	r5, #0
      pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000f50:	6960      	ldr	r0, [r4, #20]
 8000f52:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8000f54:	2204      	movs	r2, #4
 8000f56:	f104 011c 	add.w	r1, r4, #28
 8000f5a:	4798      	blx	r3
}
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000f62:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8000f66:	021b      	lsls	r3, r3, #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000f68:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000f6c:	488c      	ldr	r0, [pc, #560]	@ (80011a0 <ASPEP_RXframeProcess+0x2ac>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000f6e:	4d8d      	ldr	r5, [pc, #564]	@ (80011a4 <ASPEP_RXframeProcess+0x2b0>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000f70:	f082 0209 	eor.w	r2, r2, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000f74:	f043 010f 	orr.w	r1, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000f78:	5c82      	ldrb	r2, [r0, r2]
 8000f7a:	ea82 4313 	eor.w	r3, r2, r3, lsr #16
 8000f7e:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000f80:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 8000f82:	5ceb      	ldrb	r3, [r5, r3]
 8000f84:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000f88:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8a:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000f8c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 80f4 	beq.w	800117c <ASPEP_RXframeProcess+0x288>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f94:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000f96:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8000f9a:	b913      	cbnz	r3, 8000fa2 <ASPEP_RXframeProcess+0xae>
          pHandle->ctrlBuffer.state = pending;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 8000fa2:	2200      	movs	r2, #0
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 8000fa4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8000fa6:	6960      	ldr	r0, [r4, #20]
      pHandle->badPacketFlag = ASPEP_OK;
 8000fa8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 8000fac:	4798      	blx	r3
 8000fae:	e7c1      	b.n	8000f34 <ASPEP_RXframeProcess+0x40>
          if (BEACON == pHandle->rxPacketType)
 8000fb0:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8000fb2:	2905      	cmp	r1, #5
 8000fb4:	d064      	beq.n	8001080 <ASPEP_RXframeProcess+0x18c>
          else if (PING == pHandle->rxPacketType)
 8000fb6:	2906      	cmp	r1, #6
 8000fb8:	d1c9      	bne.n	8000f4e <ASPEP_RXframeProcess+0x5a>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000fba:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000fbe:	4629      	mov	r1, r5
 8000fc0:	f7ff fe4a 	bl	8000c58 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8000fca:	e7c0      	b.n	8000f4e <ASPEP_RXframeProcess+0x5a>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000fcc:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
              *packetLength = pHandle->rxLengthASPEP;
 8000fd0:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
              result = pHandle->rxBuffer;
 8000fd4:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000fd6:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000fd8:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8000fda:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000fde:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLengthASPEP;
 8000fe0:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 8000fe2:	e7b5      	b.n	8000f50 <ASPEP_RXframeProcess+0x5c>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000fe4:	f894 c01d 	ldrb.w	ip, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000fe8:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000fec:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000fee:	f894 606c 	ldrb.w	r6, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000ff2:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ff6:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8000ffa:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8000ffe:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001000:	4563      	cmp	r3, ip
 8001002:	bf28      	it	cs
 8001004:	4663      	movcs	r3, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001006:	42b0      	cmp	r0, r6
 8001008:	4601      	mov	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 800100a:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800100e:	bf28      	it	cs
 8001010:	4631      	movcs	r1, r6
 8001012:	f361 0507 	bfi	r5, r1, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8001016:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800101a:	45b8      	cmp	r8, r7
 800101c:	4641      	mov	r1, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800101e:	f363 250f 	bfi	r5, r3, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001022:	bf28      	it	cs
 8001024:	4639      	movcs	r1, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001026:	45ca      	cmp	sl, r9
 8001028:	46d6      	mov	lr, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800102a:	f361 4517 	bfi	r5, r1, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800102e:	bf28      	it	cs
 8001030:	46ce      	movcs	lr, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001032:	f36e 651f 	bfi	r5, lr, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001036:	42b0      	cmp	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001038:	66e5      	str	r5, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 800103a:	d81b      	bhi.n	8001074 <ASPEP_RXframeProcess+0x180>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 800103c:	459c      	cmp	ip, r3
 800103e:	d819      	bhi.n	8001074 <ASPEP_RXframeProcess+0x180>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8001040:	45b8      	cmp	r8, r7
 8001042:	d817      	bhi.n	8001074 <ASPEP_RXframeProcess+0x180>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8001044:	45ca      	cmp	sl, r9
 8001046:	d815      	bhi.n	8001074 <ASPEP_RXframeProcess+0x180>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8001048:	f894 0070 	ldrb.w	r0, [r4, #112]	@ 0x70
 800104c:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001050:	4290      	cmp	r0, r2
 8001052:	d10f      	bne.n	8001074 <ASPEP_RXframeProcess+0x180>
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001054:	1c4a      	adds	r2, r1, #1
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001056:	3301      	adds	r3, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001058:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 800105a:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 800105c:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 800105e:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001062:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8001064:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001066:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8001068:	f8a4 e00e 	strh.w	lr, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 800106c:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8001070:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8001074:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8001078:	4620      	mov	r0, r4
 800107a:	f7ff fda7 	bl	8000bcc <ASPEP_sendBeacon>
 800107e:	e766      	b.n	8000f4e <ASPEP_RXframeProcess+0x5a>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8001080:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001082:	f890 c06c 	ldrb.w	ip, [r0, #108]	@ 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001086:	7f01      	ldrb	r1, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001088:	f890 006d 	ldrb.w	r0, [r0, #109]	@ 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800108c:	f894 606e 	ldrb.w	r6, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001090:	f894 e06f 	ldrb.w	lr, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8001094:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001098:	09c9      	lsrs	r1, r1, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800109a:	42a8      	cmp	r0, r5
 800109c:	bf28      	it	cs
 800109e:	4628      	movcs	r0, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010a0:	4561      	cmp	r1, ip
 80010a2:	460f      	mov	r7, r1
 80010a4:	bf28      	it	cs
 80010a6:	4667      	movcs	r7, ip
 80010a8:	f367 0307 	bfi	r3, r7, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80010ac:	f3c2 3786 	ubfx	r7, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 80010b0:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80010b4:	42b7      	cmp	r7, r6
 80010b6:	46b9      	mov	r9, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010b8:	f360 230f 	bfi	r3, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80010bc:	bf28      	it	cs
 80010be:	46b1      	movcs	r9, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80010c0:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010c2:	f369 4317 	bfi	r3, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80010c6:	46c1      	mov	r9, r8
 80010c8:	bf28      	it	cs
 80010ca:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010cc:	f369 631f 	bfi	r3, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80010d0:	4561      	cmp	r1, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80010d2:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80010d4:	d80b      	bhi.n	80010ee <ASPEP_RXframeProcess+0x1fa>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 80010d6:	4285      	cmp	r5, r0
 80010d8:	d809      	bhi.n	80010ee <ASPEP_RXframeProcess+0x1fa>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 80010da:	42b7      	cmp	r7, r6
 80010dc:	d807      	bhi.n	80010ee <ASPEP_RXframeProcess+0x1fa>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 80010de:	45f0      	cmp	r8, lr
 80010e0:	d805      	bhi.n	80010ee <ASPEP_RXframeProcess+0x1fa>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 80010e2:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 80010e6:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d0c2      	beq.n	8001074 <ASPEP_RXframeProcess+0x180>
              pHandle->ASPEP_State = ASPEP_IDLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 80010f4:	e7be      	b.n	8001074 <ASPEP_RXframeProcess+0x180>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80010f6:	f894 c01d 	ldrb.w	ip, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80010fa:	f894 506d 	ldrb.w	r5, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80010fe:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001100:	f894 e06c 	ldrb.w	lr, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001104:	f894 606e 	ldrb.w	r6, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001108:	f894 806f 	ldrb.w	r8, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 800110c:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001110:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001112:	4565      	cmp	r5, ip
 8001114:	bf28      	it	cs
 8001116:	4665      	movcs	r5, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001118:	4570      	cmp	r0, lr
 800111a:	4607      	mov	r7, r0
 800111c:	4619      	mov	r1, r3
 800111e:	bf28      	it	cs
 8001120:	4677      	movcs	r7, lr
 8001122:	f367 0107 	bfi	r1, r7, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8001126:	f3c2 3786 	ubfx	r7, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 800112a:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800112e:	42b7      	cmp	r7, r6
 8001130:	46ba      	mov	sl, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001132:	f365 210f 	bfi	r1, r5, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001136:	bf28      	it	cs
 8001138:	46b2      	movcs	sl, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800113a:	45c1      	cmp	r9, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800113c:	f36a 4117 	bfi	r1, sl, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001140:	46ca      	mov	sl, r9
 8001142:	bf28      	it	cs
 8001144:	46c2      	movcs	sl, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001146:	f36a 611f 	bfi	r1, sl, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 800114a:	4570      	cmp	r0, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800114c:	66e1      	str	r1, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 800114e:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8001152:	d80d      	bhi.n	8001170 <ASPEP_RXframeProcess+0x27c>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8001154:	45ac      	cmp	ip, r5
 8001156:	d80b      	bhi.n	8001170 <ASPEP_RXframeProcess+0x27c>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8001158:	42b7      	cmp	r7, r6
 800115a:	d809      	bhi.n	8001170 <ASPEP_RXframeProcess+0x27c>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 800115c:	45c1      	cmp	r9, r8
 800115e:	d807      	bhi.n	8001170 <ASPEP_RXframeProcess+0x27c>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8001160:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8001164:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001168:	1a9b      	subs	r3, r3, r2
 800116a:	fab3 f383 	clz	r3, r3
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8001174:	4620      	mov	r0, r4
 8001176:	f7ff fd29 	bl	8000bcc <ASPEP_sendBeacon>
 800117a:	e6e8      	b.n	8000f4e <ASPEP_RXframeProcess+0x5a>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 800117c:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 8001180:	2303      	movs	r3, #3
 8001182:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8001186:	64a1      	str	r1, [r4, #72]	@ 0x48
 8001188:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 800118a:	2204      	movs	r2, #4
 800118c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800118e:	6960      	ldr	r0, [r4, #20]
 8001190:	4798      	blx	r3
 8001192:	e706      	b.n	8000fa2 <ASPEP_RXframeProcess+0xae>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8001194:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8001198:	2101      	movs	r1, #1
 800119a:	f7ff fd5d 	bl	8000c58 <ASPEP_sendPing>
 800119e:	e6d6      	b.n	8000f4e <ASPEP_RXframeProcess+0x5a>
 80011a0:	08008d84 	.word	0x08008d84
 80011a4:	08008d74 	.word	0x08008d74

080011a8 <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 80011a8:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 80011aa:	f890 3065 	ldrb.w	r3, [r0, #101]	@ 0x65
{
 80011ae:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 80011b0:	b143      	cbz	r3, 80011c4 <ASPEP_HWDataReceivedIT+0x1c>
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d000      	beq.n	80011b8 <ASPEP_HWDataReceivedIT+0x10>
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 80011b6:	bd10      	pop	{r4, pc}
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 80011b8:	2200      	movs	r2, #0
 80011ba:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
        pHandle->NewPacketAvailable = true;
 80011be:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
}
 80011c2:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 80011c4:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80011c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001244 <ASPEP_HWDataReceivedIT+0x9c>)
 80011c8:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80011ca:	5cd3      	ldrb	r3, [r2, r3]
 80011cc:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 80011d0:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80011d2:	5cd3      	ldrb	r3, [r2, r3]
 80011d4:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 80011d8:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 80011da:	5cd3      	ldrb	r3, [r2, r3]
 80011dc:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 80011e0:	5cd3      	ldrb	r3, [r2, r3]
 80011e2:	b95b      	cbnz	r3, 80011fc <ASPEP_HWDataReceivedIT+0x54>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 80011e4:	7f03      	ldrb	r3, [r0, #28]
 80011e6:	f003 030f 	and.w	r3, r3, #15
          switch (pHandle->rxPacketType)
 80011ea:	2b06      	cmp	r3, #6
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 80011ec:	6683      	str	r3, [r0, #104]	@ 0x68
          switch (pHandle->rxPacketType)
 80011ee:	d809      	bhi.n	8001204 <ASPEP_HWDataReceivedIT+0x5c>
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	d91f      	bls.n	8001234 <ASPEP_HWDataReceivedIT+0x8c>
              pHandle->NewPacketAvailable = true;
 80011f4:	2301      	movs	r3, #1
 80011f6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
 80011fa:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 80011fc:	2304      	movs	r3, #4
 80011fe:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8001202:	bd10      	pop	{r4, pc}
          switch (pHandle->rxPacketType)
 8001204:	2b09      	cmp	r3, #9
 8001206:	d115      	bne.n	8001234 <ASPEP_HWDataReceivedIT+0x8c>
              pHandle->rxLengthASPEP = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8001208:	8b83      	ldrh	r3, [r0, #28]
 800120a:	091b      	lsrs	r3, r3, #4
 800120c:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
              if (0U == pHandle->rxLengthASPEP) /* data packet with length 0 is a valid packet */
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0ef      	beq.n	80011f4 <ASPEP_HWDataReceivedIT+0x4c>
              else if (pHandle->rxLengthASPEP <= pHandle->maxRXPayload)
 8001214:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 8001218:	429a      	cmp	r2, r3
 800121a:	d30f      	bcc.n	800123c <ASPEP_HWDataReceivedIT+0x94>
                pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 800121c:	f890 206c 	ldrb.w	r2, [r0, #108]	@ 0x6c
 8001220:	6981      	ldr	r1, [r0, #24]
 8001222:	6940      	ldr	r0, [r0, #20]
 8001224:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8001228:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800122a:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 800122c:	2301      	movs	r3, #1
 800122e:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
}
 8001232:	bd10      	pop	{r4, pc}
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8001234:	2301      	movs	r3, #1
 8001236:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
}
 800123a:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 800123c:	2302      	movs	r3, #2
 800123e:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8001242:	bd10      	pop	{r4, pc}
 8001244:	08008d84 	.word	0x08008d84

08001248 <ASPEP_HWReset>:
  * @brief  Resets DMA after debugger has stopped the MCU.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWReset(ASPEP_Handle_t *pHandle)
{
 8001248:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 800124a:	2200      	movs	r2, #0
 800124c:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8001250:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001252:	6940      	ldr	r0, [r0, #20]
 8001254:	2204      	movs	r2, #4
 8001256:	311c      	adds	r1, #28
 8001258:	4718      	bx	r3
 800125a:	bf00      	nop
 800125c:	0000      	movs	r0, r0
	...

08001260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001260:	b510      	push	{r4, lr}
 8001262:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001264:	2238      	movs	r2, #56	@ 0x38
 8001266:	2100      	movs	r1, #0
 8001268:	a806      	add	r0, sp, #24
 800126a:	f007 fd3d 	bl	8008ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126e:	2000      	movs	r0, #0
 8001270:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8001274:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8001278:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800127a:	f004 f9f1 	bl	8005660 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800127e:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 80012d0 <SystemClock_Config+0x70>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001282:	2206      	movs	r2, #6
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001284:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001286:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001288:	920f      	str	r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800128a:	2155      	movs	r1, #85	@ 0x55
 800128c:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001290:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001294:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001298:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800129c:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a0:	f004 fa58 	bl	8005754 <HAL_RCC_OscConfig>
 80012a4:	b108      	cbz	r0, 80012aa <SystemClock_Config+0x4a>
  __ASM volatile ("cpsid i" : : : "memory");
 80012a6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <SystemClock_Config+0x48>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012aa:	2104      	movs	r1, #4
 80012ac:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ae:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012b0:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b4:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012b8:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012bc:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012be:	f004 fcc7 	bl	8005c50 <HAL_RCC_ClockConfig>
 80012c2:	b108      	cbz	r0, 80012c8 <SystemClock_Config+0x68>
 80012c4:	b672      	cpsid	i
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <SystemClock_Config+0x66>
  HAL_RCC_EnableCSS();
 80012c8:	f004 fdf0 	bl	8005eac <HAL_RCC_EnableCSS>
}
 80012cc:	b014      	add	sp, #80	@ 0x50
 80012ce:	bd10      	pop	{r4, pc}
 80012d0:	00000001 	.word	0x00000001
 80012d4:	00010000 	.word	0x00010000

080012d8 <main>:
{
 80012d8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	2500      	movs	r5, #0
{
 80012de:	b0ad      	sub	sp, #180	@ 0xb4
  HAL_Init();
 80012e0:	f002 fd92 	bl	8003e08 <HAL_Init>
  SystemClock_Config();
 80012e4:	f7ff ffbc 	bl	8001260 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	e9cd 551d 	strd	r5, r5, [sp, #116]	@ 0x74
 80012ec:	e9cd 551f 	strd	r5, r5, [sp, #124]	@ 0x7c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f0:	4eb4      	ldr	r6, [pc, #720]	@ (80015c4 <main+0x2ec>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	9521      	str	r5, [sp, #132]	@ 0x84
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f4:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
  HAL_GPIO_WritePin(M1_BEMF_DIVIDER_GPIO_Port, M1_BEMF_DIVIDER_Pin, GPIO_PIN_RESET);
 80012f6:	48b4      	ldr	r0, [pc, #720]	@ (80015c8 <main+0x2f0>)
  hadc1.Instance = ADC1;
 80012f8:	f8df b2e8 	ldr.w	fp, [pc, #744]	@ 80015e4 <main+0x30c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	64f3      	str	r3, [r6, #76]	@ 0x4c
 8001302:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	9304      	str	r3, [sp, #16]
 800130a:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800130c:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 800130e:	f043 0320 	orr.w	r3, r3, #32
 8001312:	64f3      	str	r3, [r6, #76]	@ 0x4c
 8001314:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8001316:	f003 0320 	and.w	r3, r3, #32
 800131a:	9305      	str	r3, [sp, #20]
 800131c:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	64f3      	str	r3, [r6, #76]	@ 0x4c
 8001326:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	9306      	str	r3, [sp, #24]
 800132e:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001330:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8001332:	f043 0302 	orr.w	r3, r3, #2
 8001336:	64f3      	str	r3, [r6, #76]	@ 0x4c
 8001338:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 800133a:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(M1_BEMF_DIVIDER_GPIO_Port, M1_BEMF_DIVIDER_Pin, GPIO_PIN_RESET);
 800133e:	462a      	mov	r2, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(M1_BEMF_DIVIDER_GPIO_Port, M1_BEMF_DIVIDER_Pin, GPIO_PIN_RESET);
 8001342:	f44f 7100 	mov.w	r1, #512	@ 0x200
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(M1_BEMF_DIVIDER_GPIO_Port, M1_BEMF_DIVIDER_Pin, GPIO_PIN_RESET);
 8001348:	f004 f984 	bl	8005654 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800134c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001350:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001354:	489c      	ldr	r0, [pc, #624]	@ (80015c8 <main+0x2f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	951f      	str	r5, [sp, #124]	@ 0x7c
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001358:	a91d      	add	r1, sp, #116	@ 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800135a:	e9cd 231d 	strd	r2, r3, [sp, #116]	@ 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135e:	2401      	movs	r4, #1
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001360:	f003 ffba 	bl	80052d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001364:	2702      	movs	r7, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001366:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(M1_BEMF_DIVIDER_GPIO_Port, &GPIO_InitStruct);
 800136a:	4897      	ldr	r0, [pc, #604]	@ (80015c8 <main+0x2f0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	9520      	str	r5, [sp, #128]	@ 0x80
  HAL_GPIO_Init(M1_BEMF_DIVIDER_GPIO_Port, &GPIO_InitStruct);
 800136e:	a91d      	add	r1, sp, #116	@ 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	e9cd 341d 	strd	r3, r4, [sp, #116]	@ 0x74
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001374:	971f      	str	r7, [sp, #124]	@ 0x7c
  HAL_GPIO_Init(M1_BEMF_DIVIDER_GPIO_Port, &GPIO_InitStruct);
 8001376:	f003 ffaf 	bl	80052d8 <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800137a:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 800137c:	f043 0304 	orr.w	r3, r3, #4
 8001380:	64b3      	str	r3, [r6, #72]	@ 0x48
 8001382:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	9302      	str	r3, [sp, #8]
 800138a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800138c:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 800138e:	4323      	orrs	r3, r4
 8001390:	64b3      	str	r3, [r6, #72]	@ 0x48
 8001392:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
  ADC_MultiModeTypeDef multimode = {0};
 8001394:	950b      	str	r5, [sp, #44]	@ 0x2c
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001396:	4023      	ands	r3, r4
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001398:	4629      	mov	r1, r5
 800139a:	223c      	movs	r2, #60	@ 0x3c
  __HAL_RCC_DMA1_CLK_ENABLE();
 800139c:	9303      	str	r3, [sp, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800139e:	a81d      	add	r0, sp, #116	@ 0x74
  ADC_MultiModeTypeDef multimode = {0};
 80013a0:	e9cd 550c 	strd	r5, r5, [sp, #48]	@ 0x30
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80013a4:	e9cd 550f 	strd	r5, r5, [sp, #60]	@ 0x3c
 80013a8:	e9cd 5511 	strd	r5, r5, [sp, #68]	@ 0x44
 80013ac:	e9cd 5513 	strd	r5, r5, [sp, #76]	@ 0x4c
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013b0:	9b03      	ldr	r3, [sp, #12]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80013b2:	950e      	str	r5, [sp, #56]	@ 0x38
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80013b4:	f007 fc98 	bl	8008ce8 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 80013b8:	2220      	movs	r2, #32
 80013ba:	4629      	mov	r1, r5
 80013bc:	a815      	add	r0, sp, #84	@ 0x54
 80013be:	f007 fc93 	bl	8008ce8 <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80013c2:	f44f 4600 	mov.w	r6, #32768	@ 0x8000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013c6:	e9cb 5501 	strd	r5, r5, [fp, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013ca:	e9cb 5404 	strd	r5, r4, [fp, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ce:	e9cb 550b 	strd	r5, r5, [fp, #44]	@ 0x2c
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013d2:	f8ab 501c 	strh.w	r5, [fp, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013d6:	f88b 5024 	strb.w	r5, [fp, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013da:	f88b 5038 	strb.w	r5, [fp, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013de:	f8cb 503c 	str.w	r5, [fp, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80013e2:	f88b 5040 	strb.w	r5, [fp, #64]	@ 0x40
  hadc1.Instance = ADC1;
 80013e6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ea:	2504      	movs	r5, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013ec:	4658      	mov	r0, fp
  hadc1.Init.NbrOfConversion = 2;
 80013ee:	f8cb 7020 	str.w	r7, [fp, #32]
  hadc1.Instance = ADC1;
 80013f2:	f8cb 2000 	str.w	r2, [fp]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80013f6:	f8cb 600c 	str.w	r6, [fp, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013fa:	f8cb 5018 	str.w	r5, [fp, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013fe:	f002 fd2d 	bl	8003e5c <HAL_ADC_Init>
 8001402:	b108      	cbz	r0, 8001408 <main+0x130>
 8001404:	b672      	cpsid	i
  while (1)
 8001406:	e7fe      	b.n	8001406 <main+0x12e>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001408:	900b      	str	r0, [sp, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800140a:	a90b      	add	r1, sp, #44	@ 0x2c
 800140c:	4658      	mov	r0, fp
 800140e:	f003 fd99 	bl	8004f44 <HAL_ADCEx_MultiModeConfigChannel>
 8001412:	b108      	cbz	r0, 8001418 <main+0x140>
 8001414:	b672      	cpsid	i
  while (1)
 8001416:	e7fe      	b.n	8001416 <main+0x13e>
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_INJEC;
 8001418:	4f6c      	ldr	r7, [pc, #432]	@ (80015cc <main+0x2f4>)
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 800141a:	4b6d      	ldr	r3, [pc, #436]	@ (80015d0 <main+0x2f8>)
  AnalogWDGConfig.ITMode = DISABLE;
 800141c:	f88d 0044 	strb.w	r0, [sp, #68]	@ 0x44
  AnalogWDGConfig.LowThreshold = 0;
 8001420:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 8001424:	9014      	str	r0, [sp, #80]	@ 0x50
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_INJEC;
 8001426:	f04f 7aa0 	mov.w	sl, #20971520	@ 0x1400000
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 800142a:	a90e      	add	r1, sp, #56	@ 0x38
 800142c:	4658      	mov	r0, fp
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_INJEC;
 800142e:	e9cd a70f 	strd	sl, r7, [sp, #60]	@ 0x3c
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8001432:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8001434:	f003 f8ca 	bl	80045cc <HAL_ADC_AnalogWDGConfig>
 8001438:	b108      	cbz	r0, 800143e <main+0x166>
 800143a:	b672      	cpsid	i
  while (1)
 800143c:	e7fe      	b.n	800143c <main+0x164>
  sConfigInjected.InjectedOffset = 0;
 800143e:	e9cd 5021 	strd	r5, r0, [sp, #132]	@ 0x84
  sConfigInjected.InjectedChannel = ADC_CHANNEL_9;
 8001442:	971d      	str	r7, [sp, #116]	@ 0x74
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001444:	f8ad 0098 	strh.w	r0, [sp, #152]	@ 0x98
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001448:	f88d 009a 	strb.w	r0, [sp, #154]	@ 0x9a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800144c:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001450:	f04f 0909 	mov.w	r9, #9
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001454:	277f      	movs	r7, #127	@ 0x7f
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_FALLING;
 8001456:	f04f 0880 	mov.w	r8, #128	@ 0x80
 800145a:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800145e:	a91d      	add	r1, sp, #116	@ 0x74
 8001460:	4658      	mov	r0, fp
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_FALLING;
 8001462:	e9cd 8327 	strd	r8, r3, [sp, #156]	@ 0x9c
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001466:	951f      	str	r5, [sp, #124]	@ 0x7c
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001468:	9425      	str	r4, [sp, #148]	@ 0x94
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800146a:	f8cd 9078 	str.w	r9, [sp, #120]	@ 0x78
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800146e:	9720      	str	r7, [sp, #128]	@ 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001470:	f003 fa2a 	bl	80048c8 <HAL_ADCEx_InjectedConfigChannel>
 8001474:	b108      	cbz	r0, 800147a <main+0x1a2>
 8001476:	b672      	cpsid	i
  while (1)
 8001478:	e7fe      	b.n	8001478 <main+0x1a0>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800147a:	f8df e16c 	ldr.w	lr, [pc, #364]	@ 80015e8 <main+0x310>
  sConfig.Offset = 0;
 800147e:	901a      	str	r0, [sp, #104]	@ 0x68
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001480:	2206      	movs	r2, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001482:	a915      	add	r1, sp, #84	@ 0x54
 8001484:	4658      	mov	r0, fp
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001486:	e9cd 5717 	strd	r5, r7, [sp, #92]	@ 0x5c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800148a:	e9cd e215 	strd	lr, r2, [sp, #84]	@ 0x54
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800148e:	9519      	str	r5, [sp, #100]	@ 0x64
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001490:	f002 fdee 	bl	8004070 <HAL_ADC_ConfigChannel>
 8001494:	b108      	cbz	r0, 800149a <main+0x1c2>
 8001496:	b672      	cpsid	i
  while (1)
 8001498:	e7fe      	b.n	8001498 <main+0x1c0>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800149a:	f8df c150 	ldr.w	ip, [pc, #336]	@ 80015ec <main+0x314>
 800149e:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a0:	a915      	add	r1, sp, #84	@ 0x54
 80014a2:	4658      	mov	r0, fp
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014a4:	e9cd c315 	strd	ip, r3, [sp, #84]	@ 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a8:	f002 fde2 	bl	8004070 <HAL_ADC_ConfigChannel>
 80014ac:	4601      	mov	r1, r0
 80014ae:	b108      	cbz	r0, 80014b4 <main+0x1dc>
 80014b0:	b672      	cpsid	i
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <main+0x1da>
  hadc2.Instance = ADC2;
 80014b4:	f8df b138 	ldr.w	fp, [pc, #312]	@ 80015f0 <main+0x318>
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80014b8:	901b      	str	r0, [sp, #108]	@ 0x6c
 80014ba:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
 80014be:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
 80014c2:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80014c6:	223c      	movs	r2, #60	@ 0x3c
 80014c8:	9001      	str	r0, [sp, #4]
 80014ca:	a81d      	add	r0, sp, #116	@ 0x74
 80014cc:	f007 fc0c 	bl	8008ce8 <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014d0:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 80014d2:	4a40      	ldr	r2, [pc, #256]	@ (80015d4 <main+0x2fc>)
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80014d4:	f8cb 600c 	str.w	r6, [fp, #12]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014d8:	4658      	mov	r0, fp
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80014da:	e9cb 1101 	strd	r1, r1, [fp, #4]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014de:	e9cb 1104 	strd	r1, r1, [fp, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014e2:	f8cb 5018 	str.w	r5, [fp, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80014e6:	f8ab 101c 	strh.w	r1, [fp, #28]
  hadc2.Init.NbrOfConversion = 1;
 80014ea:	f8cb 4020 	str.w	r4, [fp, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80014ee:	f88b 1024 	strb.w	r1, [fp, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80014f2:	f88b 1038 	strb.w	r1, [fp, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014f6:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80014fa:	f88b 1040 	strb.w	r1, [fp, #64]	@ 0x40
  hadc2.Instance = ADC2;
 80014fe:	f8cb 2000 	str.w	r2, [fp]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001502:	f002 fcab 	bl	8003e5c <HAL_ADC_Init>
 8001506:	b108      	cbz	r0, 800150c <main+0x234>
 8001508:	b672      	cpsid	i
  while (1)
 800150a:	e7fe      	b.n	800150a <main+0x232>
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 800150c:	4b30      	ldr	r3, [pc, #192]	@ (80015d0 <main+0x2f8>)
  AnalogWDGConfig.ITMode = DISABLE;
 800150e:	f88d 0060 	strb.w	r0, [sp, #96]	@ 0x60
  AnalogWDGConfig.LowThreshold = 0;
 8001512:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 8001516:	901b      	str	r0, [sp, #108]	@ 0x6c
  AnalogWDGConfig.Channel = ADC_CHANNEL_5;
 8001518:	4e2f      	ldr	r6, [pc, #188]	@ (80015d8 <main+0x300>)
 800151a:	9617      	str	r6, [sp, #92]	@ 0x5c
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 800151c:	a915      	add	r1, sp, #84	@ 0x54
 800151e:	4658      	mov	r0, fp
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_INJEC;
 8001520:	e9cd 3a15 	strd	r3, sl, [sp, #84]	@ 0x54
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8001524:	f003 f852 	bl	80045cc <HAL_ADC_AnalogWDGConfig>
 8001528:	4602      	mov	r2, r0
 800152a:	b108      	cbz	r0, 8001530 <main+0x258>
 800152c:	b672      	cpsid	i
  while (1)
 800152e:	e7fe      	b.n	800152e <main+0x256>
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_FALLING;
 8001530:	f44f 7380 	mov.w	r3, #256	@ 0x100
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001534:	4658      	mov	r0, fp
 8001536:	a91d      	add	r1, sp, #116	@ 0x74
  sConfigInjected.InjectedOffset = 0;
 8001538:	e9cd 5221 	strd	r5, r2, [sp, #132]	@ 0x84
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800153c:	951f      	str	r5, [sp, #124]	@ 0x7c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800153e:	e9cd 691d 	strd	r6, r9, [sp, #116]	@ 0x74
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001542:	9720      	str	r7, [sp, #128]	@ 0x80
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001544:	f8cd 809c 	str.w	r8, [sp, #156]	@ 0x9c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_FALLING;
 8001548:	9328      	str	r3, [sp, #160]	@ 0xa0
  sConfigInjected.InjectedNbrOfConversion = 1;
 800154a:	9425      	str	r4, [sp, #148]	@ 0x94
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800154c:	f8ad 2098 	strh.w	r2, [sp, #152]	@ 0x98
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001550:	f88d 209a 	strb.w	r2, [sp, #154]	@ 0x9a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001554:	f88d 20a4 	strb.w	r2, [sp, #164]	@ 0xa4
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001558:	f003 f9b6 	bl	80048c8 <HAL_ADCEx_InjectedConfigChannel>
 800155c:	4605      	mov	r5, r0
 800155e:	b108      	cbz	r0, 8001564 <main+0x28c>
 8001560:	b672      	cpsid	i
  while (1)
 8001562:	e7fe      	b.n	8001562 <main+0x28a>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001564:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
 8001568:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800156c:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001570:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
 8001574:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
 8001578:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157c:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8001580:	9008      	str	r0, [sp, #32]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001582:	900d      	str	r0, [sp, #52]	@ 0x34
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001584:	901b      	str	r0, [sp, #108]	@ 0x6c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001586:	4601      	mov	r1, r0
 8001588:	2234      	movs	r2, #52	@ 0x34
 800158a:	a81d      	add	r0, sp, #116	@ 0x74
 800158c:	f007 fbac 	bl	8008ce8 <memset>
  htim1.Instance = TIM1;
 8001590:	4812      	ldr	r0, [pc, #72]	@ (80015dc <main+0x304>)
 8001592:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <main+0x308>)
 8001594:	6003      	str	r3, [r0, #0]
  htim1.Init.Period = (PWM_PERIOD_CYCLES);
 8001596:	f640 137c 	movw	r3, #2428	@ 0x97c
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159a:	e9c0 5501 	strd	r5, r5, [r0, #4]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 800159e:	6144      	str	r4, [r0, #20]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a0:	6105      	str	r5, [r0, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a2:	6185      	str	r5, [r0, #24]
  htim1.Init.Period = (PWM_PERIOD_CYCLES);
 80015a4:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015a6:	f004 fedd 	bl	8006364 <HAL_TIM_Base_Init>
 80015aa:	b108      	cbz	r0, 80015b0 <main+0x2d8>
 80015ac:	b672      	cpsid	i
  while (1)
 80015ae:	e7fe      	b.n	80015ae <main+0x2d6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b0:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015b4:	4809      	ldr	r0, [pc, #36]	@ (80015dc <main+0x304>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b6:	940e      	str	r4, [sp, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015b8:	a90e      	add	r1, sp, #56	@ 0x38
 80015ba:	f005 f829 	bl	8006610 <HAL_TIM_ConfigClockSource>
 80015be:	b1c8      	cbz	r0, 80015f4 <main+0x31c>
 80015c0:	b672      	cpsid	i
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <main+0x2ea>
 80015c4:	40021000 	.word	0x40021000
 80015c8:	48000800 	.word	0x48000800
 80015cc:	25b00200 	.word	0x25b00200
 80015d0:	7dc00000 	.word	0x7dc00000
 80015d4:	50000100 	.word	0x50000100
 80015d8:	14f00020 	.word	0x14f00020
 80015dc:	20000644 	.word	0x20000644
 80015e0:	40012c00 	.word	0x40012c00
 80015e4:	200006fc 	.word	0x200006fc
 80015e8:	08600004 	.word	0x08600004
 80015ec:	21800100 	.word	0x21800100
 80015f0:	20000690 	.word	0x20000690
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015f4:	487d      	ldr	r0, [pc, #500]	@ (80017ec <main+0x514>)
 80015f6:	f004 ff61 	bl	80064bc <HAL_TIM_PWM_Init>
 80015fa:	b108      	cbz	r0, 8001600 <main+0x328>
 80015fc:	b672      	cpsid	i
  while (1)
 80015fe:	e7fe      	b.n	80015fe <main+0x326>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001600:	2370      	movs	r3, #112	@ 0x70
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001602:	9009      	str	r0, [sp, #36]	@ 0x24
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001604:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001606:	4879      	ldr	r0, [pc, #484]	@ (80017ec <main+0x514>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001608:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800160a:	a908      	add	r1, sp, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800160c:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800160e:	f005 fa0b 	bl	8006a28 <HAL_TIMEx_MasterConfigSynchronization>
 8001612:	b108      	cbz	r0, 8001618 <main+0x340>
 8001614:	b672      	cpsid	i
  while (1)
 8001616:	e7fe      	b.n	8001616 <main+0x33e>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001618:	2101      	movs	r1, #1
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 800161a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800161c:	4873      	ldr	r0, [pc, #460]	@ (80017ec <main+0x514>)
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 800161e:	910d      	str	r1, [sp, #52]	@ 0x34
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001620:	e9cd 110b 	strd	r1, r1, [sp, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001624:	f005 faac 	bl	8006b80 <HAL_TIMEx_ConfigBreakInput>
 8001628:	4602      	mov	r2, r0
 800162a:	b108      	cbz	r0, 8001630 <main+0x358>
 800162c:	b672      	cpsid	i
  while (1)
 800162e:	e7fe      	b.n	800162e <main+0x356>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001630:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001632:	2508      	movs	r5, #8
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001634:	e9cd 0016 	strd	r0, r0, [sp, #88]	@ 0x58
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001638:	e9cd 5018 	strd	r5, r0, [sp, #96]	@ 0x60
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800163c:	9315      	str	r3, [sp, #84]	@ 0x54
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800163e:	901a      	str	r0, [sp, #104]	@ 0x68
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8001640:	f44f 7300 	mov.w	r3, #512	@ 0x200
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001644:	4869      	ldr	r0, [pc, #420]	@ (80017ec <main+0x514>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8001646:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001648:	a915      	add	r1, sp, #84	@ 0x54
 800164a:	f005 f8ff 	bl	800684c <HAL_TIM_PWM_ConfigChannel>
 800164e:	b108      	cbz	r0, 8001654 <main+0x37c>
 8001650:	b672      	cpsid	i
  while (1)
 8001652:	e7fe      	b.n	8001652 <main+0x37a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001654:	4865      	ldr	r0, [pc, #404]	@ (80017ec <main+0x514>)
 8001656:	2204      	movs	r2, #4
 8001658:	a915      	add	r1, sp, #84	@ 0x54
 800165a:	f005 f8f7 	bl	800684c <HAL_TIM_PWM_ConfigChannel>
 800165e:	b108      	cbz	r0, 8001664 <main+0x38c>
 8001660:	b672      	cpsid	i
  while (1)
 8001662:	e7fe      	b.n	8001662 <main+0x38a>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001664:	4861      	ldr	r0, [pc, #388]	@ (80017ec <main+0x514>)
 8001666:	462a      	mov	r2, r5
 8001668:	a915      	add	r1, sp, #84	@ 0x54
 800166a:	f005 f8ef 	bl	800684c <HAL_TIM_PWM_ConfigChannel>
 800166e:	b108      	cbz	r0, 8001674 <main+0x39c>
 8001670:	b672      	cpsid	i
  while (1)
 8001672:	e7fe      	b.n	8001672 <main+0x39a>
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001674:	9018      	str	r0, [sp, #96]	@ 0x60
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001676:	901b      	str	r0, [sp, #108]	@ 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001678:	220c      	movs	r2, #12
 800167a:	485c      	ldr	r0, [pc, #368]	@ (80017ec <main+0x514>)
 800167c:	a915      	add	r1, sp, #84	@ 0x54
 800167e:	f005 f8e5 	bl	800684c <HAL_TIM_PWM_ConfigChannel>
 8001682:	b108      	cbz	r0, 8001688 <main+0x3b0>
 8001684:	b672      	cpsid	i
  while (1)
 8001686:	e7fe      	b.n	8001686 <main+0x3ae>
  sBreakDeadTimeConfig.BreakFilter = 3;
 8001688:	2203      	movs	r2, #3
 800168a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 800168e:	2564      	movs	r5, #100	@ 0x64
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001690:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8001694:	e9cd 051f 	strd	r0, r5, [sp, #124]	@ 0x7c
  sBreakDeadTimeConfig.BreakFilter = 3;
 8001698:	e9cd 3222 	strd	r3, r2, [sp, #136]	@ 0x88
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800169c:	e9cd 0024 	strd	r0, r0, [sp, #144]	@ 0x90
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016a0:	e9cd 0028 	strd	r0, r0, [sp, #160]	@ 0xa0
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016a8:	4850      	ldr	r0, [pc, #320]	@ (80017ec <main+0x514>)
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80016aa:	9421      	str	r4, [sp, #132]	@ 0x84
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016ac:	a91d      	add	r1, sp, #116	@ 0x74
  sBreakDeadTimeConfig.Break2Filter = 3;
 80016ae:	9227      	str	r2, [sp, #156]	@ 0x9c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016b0:	9326      	str	r3, [sp, #152]	@ 0x98
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016b2:	f005 fa13 	bl	8006adc <HAL_TIMEx_ConfigBreakDeadTime>
 80016b6:	4604      	mov	r4, r0
 80016b8:	b108      	cbz	r0, 80016be <main+0x3e6>
 80016ba:	b672      	cpsid	i
  while (1)
 80016bc:	e7fe      	b.n	80016bc <main+0x3e4>
  HAL_TIM_MspPostInit(&htim1);
 80016be:	484b      	ldr	r0, [pc, #300]	@ (80017ec <main+0x514>)
 80016c0:	f002 f98e 	bl	80039e0 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 80016c4:	484a      	ldr	r0, [pc, #296]	@ (80017f0 <main+0x518>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c6:	9417      	str	r4, [sp, #92]	@ 0x5c
  htim2.Init.Period = LF_TIMER_ARR;
 80016c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016cc:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim2.Instance = TIM2;
 80016d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d4:	e9cd 441d 	strd	r4, r4, [sp, #116]	@ 0x74
 80016d8:	e9cd 441f 	strd	r4, r4, [sp, #124]	@ 0x7c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016dc:	e9cd 4415 	strd	r4, r4, [sp, #84]	@ 0x54
  htim2.Init.Prescaler = LF_TIMER_PSC;
 80016e0:	6045      	str	r5, [r0, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e2:	6104      	str	r4, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e4:	6184      	str	r4, [r0, #24]
  htim2.Instance = TIM2;
 80016e6:	6003      	str	r3, [r0, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016e8:	f004 fe3c 	bl	8006364 <HAL_TIM_Base_Init>
 80016ec:	b108      	cbz	r0, 80016f2 <main+0x41a>
 80016ee:	b672      	cpsid	i
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <main+0x418>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016f6:	483e      	ldr	r0, [pc, #248]	@ (80017f0 <main+0x518>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f8:	931d      	str	r3, [sp, #116]	@ 0x74
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016fa:	a91d      	add	r1, sp, #116	@ 0x74
 80016fc:	f004 ff88 	bl	8006610 <HAL_TIM_ConfigClockSource>
 8001700:	b108      	cbz	r0, 8001706 <main+0x42e>
 8001702:	b672      	cpsid	i
  while (1)
 8001704:	e7fe      	b.n	8001704 <main+0x42c>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001706:	2380      	movs	r3, #128	@ 0x80
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001708:	2210      	movs	r2, #16
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800170a:	4839      	ldr	r0, [pc, #228]	@ (80017f0 <main+0x518>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800170c:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800170e:	a915      	add	r1, sp, #84	@ 0x54
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001710:	9215      	str	r2, [sp, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001712:	f005 f989 	bl	8006a28 <HAL_TIMEx_MasterConfigSynchronization>
 8001716:	4603      	mov	r3, r0
 8001718:	b108      	cbz	r0, 800171e <main+0x446>
 800171a:	b672      	cpsid	i
  while (1)
 800171c:	e7fe      	b.n	800171c <main+0x444>
  huart2.Instance = USART2;
 800171e:	4c35      	ldr	r4, [pc, #212]	@ (80017f4 <main+0x51c>)
 8001720:	4835      	ldr	r0, [pc, #212]	@ (80017f8 <main+0x520>)
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001722:	62a3      	str	r3, [r4, #40]	@ 0x28
  huart2.Init.BaudRate = 1843200;
 8001724:	f44f 11e1 	mov.w	r1, #1843200	@ 0x1c2000
 8001728:	e9c4 0100 	strd	r0, r1, [r4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800172c:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800172e:	4620      	mov	r0, r4
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001730:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001734:	e9c4 3204 	strd	r3, r2, [r4, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001738:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800173c:	e9c4 3308 	strd	r3, r3, [r4, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001740:	f005 fd82 	bl	8007248 <HAL_UART_Init>
 8001744:	4601      	mov	r1, r0
 8001746:	b108      	cbz	r0, 800174c <main+0x474>
 8001748:	b672      	cpsid	i
  while (1)
 800174a:	e7fe      	b.n	800174a <main+0x472>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800174c:	4620      	mov	r0, r4
 800174e:	f005 fdcd 	bl	80072ec <HAL_UARTEx_SetTxFifoThreshold>
 8001752:	4601      	mov	r1, r0
 8001754:	b108      	cbz	r0, 800175a <main+0x482>
 8001756:	b672      	cpsid	i
  while (1)
 8001758:	e7fe      	b.n	8001758 <main+0x480>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800175a:	4620      	mov	r0, r4
 800175c:	f005 fe08 	bl	8007370 <HAL_UARTEx_SetRxFifoThreshold>
 8001760:	b108      	cbz	r0, 8001766 <main+0x48e>
 8001762:	b672      	cpsid	i
  while (1)
 8001764:	e7fe      	b.n	8001764 <main+0x48c>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001766:	4620      	mov	r0, r4
 8001768:	f005 fda2 	bl	80072b0 <HAL_UARTEx_DisableFifoMode>
 800176c:	4604      	mov	r4, r0
 800176e:	b108      	cbz	r0, 8001774 <main+0x49c>
 8001770:	b672      	cpsid	i
  while (1)
 8001772:	e7fe      	b.n	8001772 <main+0x49a>
  MX_MotorControl_Init();
 8001774:	f000 fedc 	bl	8002530 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8001778:	2201      	movs	r2, #1
 800177a:	2103      	movs	r1, #3
 800177c:	2026      	movs	r0, #38	@ 0x26
 800177e:	f003 fc9d 	bl	80050bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001782:	2026      	movs	r0, #38	@ 0x26
 8001784:	f003 fcd6 	bl	8005134 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8001788:	4622      	mov	r2, r4
 800178a:	2103      	movs	r1, #3
 800178c:	200b      	movs	r0, #11
 800178e:	f003 fc95 	bl	80050bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001792:	200b      	movs	r0, #11
 8001794:	f003 fcce 	bl	8005134 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001798:	4622      	mov	r2, r4
 800179a:	4621      	mov	r1, r4
 800179c:	201c      	movs	r0, #28
 800179e:	f003 fc8d 	bl	80050bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017a2:	201c      	movs	r0, #28
 80017a4:	f003 fcc6 	bl	8005134 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 80017a8:	4622      	mov	r2, r4
 80017aa:	2101      	movs	r1, #1
 80017ac:	2018      	movs	r0, #24
 80017ae:	f003 fc85 	bl	80050bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80017b2:	2018      	movs	r0, #24
 80017b4:	f003 fcbe 	bl	8005134 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80017b8:	4622      	mov	r2, r4
 80017ba:	2101      	movs	r1, #1
 80017bc:	2019      	movs	r0, #25
 80017be:	f003 fc7d 	bl	80050bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80017c2:	2019      	movs	r0, #25
 80017c4:	f003 fcb6 	bl	8005134 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 1);
 80017c8:	2201      	movs	r2, #1
 80017ca:	4621      	mov	r1, r4
 80017cc:	2012      	movs	r0, #18
 80017ce:	f003 fc75 	bl	80050bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80017d2:	2012      	movs	r0, #18
 80017d4:	f003 fcae 	bl	8005134 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80017d8:	2028      	movs	r0, #40	@ 0x28
 80017da:	4622      	mov	r2, r4
 80017dc:	2103      	movs	r1, #3
 80017de:	f003 fc6d 	bl	80050bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017e2:	2028      	movs	r0, #40	@ 0x28
 80017e4:	f003 fca6 	bl	8005134 <HAL_NVIC_EnableIRQ>
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <main+0x510>
 80017ea:	bf00      	nop
 80017ec:	20000644 	.word	0x20000644
 80017f0:	200005f8 	.word	0x200005f8
 80017f4:	20000564 	.word	0x20000564
 80017f8:	40004400 	.word	0x40004400

080017fc <Error_Handler>:
 80017fc:	b672      	cpsid	i
  while (1)
 80017fe:	e7fe      	b.n	80017fe <Error_Handler+0x2>

08001800 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
  return (MCI_StartMotor(pMCI[M1]));
 8001800:	4b01      	ldr	r3, [pc, #4]	@ (8001808 <MC_StartMotor1+0x8>)
 8001802:	6818      	ldr	r0, [r3, #0]
 8001804:	f000 b856 	b.w	80018b4 <MCI_StartMotor>
 8001808:	20001a14 	.word	0x20001a14

0800180c <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
  return (MCI_StopMotor(pMCI[M1]));
 800180c:	4b01      	ldr	r3, [pc, #4]	@ (8001814 <MC_StopMotor1+0x8>)
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	f000 b866 	b.w	80018e0 <MCI_StopMotor>
 8001814:	20001a14 	.word	0x20001a14

08001818 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
  return (MCI_GetSTMState(pMCI[M1]));
 8001818:	4b01      	ldr	r3, [pc, #4]	@ (8001820 <MC_GetSTMStateMotor1+0x8>)
 800181a:	6818      	ldr	r0, [r3, #0]
 800181c:	f000 b844 	b.w	80018a8 <MCI_GetSTMState>
 8001820:	20001a14 	.word	0x20001a14

08001824 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop

08001828 <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task for Motor 1.
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop

0800182c <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ((hFinalSpeed * pHandle->hFinalSpeed) >= 0)
 800182c:	89c3      	ldrh	r3, [r0, #14]
    {
      pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
      pHandle->hFinalSpeed = hFinalSpeed;
      pHandle->hDurationms = hDurationms;
 800182e:	8302      	strh	r2, [r0, #24]
    if ((hFinalSpeed * pHandle->hFinalSpeed) >= 0)
 8001830:	fb13 f301 	smulbb	r3, r3, r1
 8001834:	2b00      	cmp	r3, #0
      pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001836:	bfab      	itete	ge
 8001838:	2301      	movge	r3, #1
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
      pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
    }
    else
    {
      pHandle->DirectCommand = MCI_STOP;
 800183a:	2305      	movlt	r3, #5
      pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 800183c:	7303      	strbge	r3, [r0, #12]
      pHandle->DirectCommand = MCI_STOP;
 800183e:	7683      	strblt	r3, [r0, #26]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001840:	f240 3301 	movw	r3, #769	@ 0x301
      pHandle->hFinalSpeed = hFinalSpeed;
 8001844:	81c1      	strh	r1, [r0, #14]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001846:	8403      	strh	r3, [r0, #32]
      pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop

0800184c <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 800184c:	8b83      	ldrh	r3, [r0, #28]
    pHandle->PastFaults |= hSetErrors;
 800184e:	f8b0 c01e 	ldrh.w	ip, [r0, #30]
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001852:	430b      	orrs	r3, r1
 8001854:	ea23 0302 	bic.w	r3, r3, r2
    pHandle->PastFaults |= hSetErrors;
 8001858:	ea41 010c 	orr.w	r1, r1, ip
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 800185c:	8383      	strh	r3, [r0, #28]
    pHandle->PastFaults |= hSetErrors;
 800185e:	83c1      	strh	r1, [r0, #30]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop

08001864 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001864:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d000      	beq.n	800186e <MCI_ExecBufferedCommands+0xa>
 800186c:	4770      	bx	lr
{
 800186e:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8001870:	7b03      	ldrb	r3, [r0, #12]
 8001872:	2b01      	cmp	r3, #1
 8001874:	4604      	mov	r4, r0
 8001876:	d003      	beq.n	8001880 <MCI_ExecBufferedCommands+0x1c>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 8001878:	2303      	movs	r3, #3
 800187a:	f884 3020 	strb.w	r3, [r4, #32]
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800187e:	bd10      	pop	{r4, pc}
          pHandle->pSixStepVars->bDriveInput = INTERNAL;
 8001880:	6843      	ldr	r3, [r0, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	711a      	strb	r2, [r3, #4]
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8001886:	6800      	ldr	r0, [r0, #0]
 8001888:	2103      	movs	r1, #3
 800188a:	f007 f83d 	bl	8008908 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 800188e:	8b22      	ldrh	r2, [r4, #24]
 8001890:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001894:	6820      	ldr	r0, [r4, #0]
 8001896:	f007 f83d 	bl	8008914 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 800189a:	2800      	cmp	r0, #0
 800189c:	d0ec      	beq.n	8001878 <MCI_ExecBufferedCommands+0x14>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 800189e:	2302      	movs	r3, #2
 80018a0:	f884 3020 	strb.w	r3, [r4, #32]
}
 80018a4:	bd10      	pop	{r4, pc}
 80018a6:	bf00      	nop

080018a8 <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 80018a8:	7ec0      	ldrb	r0, [r0, #27]
 80018aa:	4770      	bx	lr

080018ac <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 80018ac:	8bc0      	ldrh	r0, [r0, #30]
 80018ae:	4770      	bx	lr

080018b0 <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 80018b0:	8b80      	ldrh	r0, [r0, #28]
 80018b2:	4770      	bx	lr

080018b4 <MCI_StartMotor>:
{
 80018b4:	b510      	push	{r4, lr}
 80018b6:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80018b8:	f7ff fff6 	bl	80018a8 <MCI_GetSTMState>
 80018bc:	b108      	cbz	r0, 80018c2 <MCI_StartMotor+0xe>
  bool retVal = false;
 80018be:	2000      	movs	r0, #0
}
 80018c0:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80018c2:	4620      	mov	r0, r4
 80018c4:	f7ff fff2 	bl	80018ac <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80018c8:	2800      	cmp	r0, #0
 80018ca:	d1f8      	bne.n	80018be <MCI_StartMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80018cc:	4620      	mov	r0, r4
 80018ce:	f7ff ffef 	bl	80018b0 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80018d2:	2800      	cmp	r0, #0
 80018d4:	d1f3      	bne.n	80018be <MCI_StartMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 80018d6:	2001      	movs	r0, #1
 80018d8:	76a0      	strb	r0, [r4, #26]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80018da:	f884 0020 	strb.w	r0, [r4, #32]
}
 80018de:	bd10      	pop	{r4, pc}

080018e0 <MCI_StopMotor>:
{
 80018e0:	b538      	push	{r3, r4, r5, lr}
 80018e2:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 80018e4:	f7ff ffe0 	bl	80018a8 <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 80018e8:	4604      	mov	r4, r0
 80018ea:	b118      	cbz	r0, 80018f4 <MCI_StopMotor+0x14>
 80018ec:	f1b0 040c 	subs.w	r4, r0, #12
 80018f0:	bf18      	it	ne
 80018f2:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80018f4:	4628      	mov	r0, r5
 80018f6:	f7ff ffd9 	bl	80018ac <MCI_GetOccurredFaults>
 80018fa:	b110      	cbz	r0, 8001902 <MCI_StopMotor+0x22>
  bool retVal = false;
 80018fc:	2400      	movs	r4, #0
}
 80018fe:	4620      	mov	r0, r4
 8001900:	bd38      	pop	{r3, r4, r5, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001902:	4628      	mov	r0, r5
 8001904:	f7ff ffd4 	bl	80018b0 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001908:	2800      	cmp	r0, #0
 800190a:	d1f7      	bne.n	80018fc <MCI_StopMotor+0x1c>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 800190c:	2c00      	cmp	r4, #0
 800190e:	d0f5      	beq.n	80018fc <MCI_StopMotor+0x1c>
      pHandle->DirectCommand = MCI_STOP;
 8001910:	2305      	movs	r3, #5
 8001912:	76ab      	strb	r3, [r5, #26]
      retVal = true;
 8001914:	e7f3      	b.n	80018fe <MCI_StopMotor+0x1e>
 8001916:	bf00      	nop

08001918 <MCI_FaultAcknowledged>:
{
 8001918:	b510      	push	{r4, lr}
 800191a:	4604      	mov	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 800191c:	f7ff ffc4 	bl	80018a8 <MCI_GetSTMState>
 8001920:	280b      	cmp	r0, #11
 8001922:	d001      	beq.n	8001928 <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 8001924:	2000      	movs	r0, #0
}
 8001926:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001928:	4620      	mov	r0, r4
 800192a:	f7ff ffc1 	bl	80018b0 <MCI_GetCurrentFaults>
 800192e:	2800      	cmp	r0, #0
 8001930:	d1f8      	bne.n	8001924 <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 8001932:	2302      	movs	r3, #2
 8001934:	76a3      	strb	r3, [r4, #26]
      pHandle->PastFaults = MC_NO_FAULTS;
 8001936:	83e0      	strh	r0, [r4, #30]
      reVal = true;
 8001938:	2001      	movs	r0, #1
}
 800193a:	bd10      	pop	{r4, pc}

0800193c <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 800193c:	8bc3      	ldrh	r3, [r0, #30]
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 800193e:	8b80      	ldrh	r0, [r0, #28]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 8001940:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop

08001948 <MCI_GetControlMode>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 8001948:	f890 0021 	ldrb.w	r0, [r0, #33]	@ 0x21
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop

08001950 <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 8001950:	7b03      	ldrb	r3, [r0, #12]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d001      	beq.n	800195a <MCI_GetImposedMotorDirection+0xa>
  int16_t retVal = 1;
 8001956:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (retVal);
}
 8001958:	4770      	bx	lr
        if (pHandle->hFinalSpeed < 0)
 800195a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
  int16_t retVal = 1;
 800195e:	2b00      	cmp	r3, #0
 8001960:	bfb4      	ite	lt
 8001962:	f04f 30ff 	movlt.w	r0, #4294967295
 8001966:	2001      	movge	r0, #1
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop

0800196c <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 800196c:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop

08001974 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 8001974:	8b00      	ldrh	r0, [r0, #24]
 8001976:	4770      	bx	lr

08001978 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8001978:	6803      	ldr	r3, [r0, #0]
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
static inline void STC_StopRamp(SpeednTorqCtrl_Handle_t *pHandle)
{
  if (MC_NULL == pHandle)
 800197a:	b113      	cbz	r3, 8001982 <MCI_StopRamp+0xa>
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->RampRemainingStep = 0U;
 800197c:	2200      	movs	r2, #0
 800197e:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 8001980:	619a      	str	r2, [r3, #24]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001982:	4770      	bx	lr

08001984 <MCI_GetAvrgMecSpeedUnit>:
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 8001984:	6800      	ldr	r0, [r0, #0]
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
static inline SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
 8001986:	b100      	cbz	r0, 800198a <MCI_GetAvrgMecSpeedUnit+0x6>
 8001988:	6940      	ldr	r0, [r0, #20]
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 800198a:	f007 b86b 	b.w	8008a64 <SPD_GetAvrgMecSpeedUnit>
 800198e:	bf00      	nop

08001990 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8001990:	6800      	ldr	r0, [r0, #0]
 8001992:	f006 bfab 	b.w	80088ec <STC_GetMecSpeedRefUnit>
 8001996:	bf00      	nop

08001998 <MCI_GetDutyCycleRef>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval uint16_t Teref
  */
__weak uint16_t MCI_GetDutyCycleRef( MCI_Handle_t * pHandle )
{
  return ( pHandle->pSixStepVars->DutyCycleRef );
 8001998:	6843      	ldr	r3, [r0, #4]
}
 800199a:	8818      	ldrh	r0, [r3, #0]
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop

080019a0 <MCboot>:
{
  /* USER CODE BEGIN MCboot 0 */

  /* USER CODE END MCboot 0 */

  if (MC_NULL == pMCIList)
 80019a0:	b308      	cbz	r0, 80019e6 <MCboot+0x46>
{
 80019a2:	b510      	push	{r4, lr}
    bMCBootCompleted = (uint8_t )0;

    /*************************************************/
    /*    SIX_STEP initialization         */
    /*************************************************/
    pMCIList[M1] = &Mci[M1];
 80019a4:	4a10      	ldr	r2, [pc, #64]	@ (80019e8 <MCboot+0x48>)
    bMCBootCompleted = (uint8_t )0;
 80019a6:	4c11      	ldr	r4, [pc, #68]	@ (80019ec <MCboot+0x4c>)
    pMCIList[M1] = &Mci[M1];
 80019a8:	6002      	str	r2, [r0, #0]
    bMCBootCompleted = (uint8_t )0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	7023      	strb	r3, [r4, #0]
    SIX_STEP_Init();
 80019ae:	f000 f9db 	bl	8001d68 <SIX_STEP_Init>

    ASPEP_start(&aspepOverUartA);
 80019b2:	480f      	ldr	r0, [pc, #60]	@ (80019f0 <MCboot+0x50>)
 80019b4:	f7ff f8f6 	bl	8000ba4 <ASPEP_start>
    /* USER CODE END MCboot 1 */

    /******************************************************/
    /*   PID component initialization: speed regulation   */
    /******************************************************/
    PID_HandleInit(&PIDSpeedHandle_M1);
 80019b8:	480e      	ldr	r0, [pc, #56]	@ (80019f4 <MCboot+0x54>)
 80019ba:	f006 fb85 	bl	80080c8 <PID_HandleInit>

    /****************************************************/
    /*   Virtual speed sensor component initialization  */
    /****************************************************/
    VSS_Init(&VirtualSpeedSensorM1);
 80019be:	480e      	ldr	r0, [pc, #56]	@ (80019f8 <MCboot+0x58>)
 80019c0:	f007 f89c 	bl	8008afc <VSS_Init>

    /********************************************************/
    /*   Bus voltage sensor component initialization        */
    /********************************************************/
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 80019c4:	480d      	ldr	r0, [pc, #52]	@ (80019fc <MCboot+0x5c>)
 80019c6:	f001 fbb3 	bl	8003130 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 80019ca:	480d      	ldr	r0, [pc, #52]	@ (8001a00 <MCboot+0x60>)
 80019cc:	f006 fe2e 	bl	800862c <RVBS_Init>

    /*******************************************************/
    /*   Temperature measurement component initialization  */
    /*******************************************************/
    (void)RCM_RegisterRegConv(&TempRegConv_M1);
 80019d0:	480c      	ldr	r0, [pc, #48]	@ (8001a04 <MCboot+0x64>)
 80019d2:	f001 fbad 	bl	8003130 <RCM_RegisterRegConv>
    NTC_Init(&TempSensor_M1);
 80019d6:	480c      	ldr	r0, [pc, #48]	@ (8001a08 <MCboot+0x68>)
 80019d8:	f006 fb3a 	bl	8008050 <NTC_Init>

    /* Applicative hook in MCBoot() */
    MC_APP_BootHook();
 80019dc:	f7ff ff22 	bl	8001824 <MC_APP_BootHook>

    /* USER CODE BEGIN MCboot 2 */

    /* USER CODE END MCboot 2 */

    bMCBootCompleted = 1U;
 80019e0:	2301      	movs	r3, #1
 80019e2:	7023      	strb	r3, [r4, #0]
  }
}
 80019e4:	bd10      	pop	{r4, pc}
 80019e6:	4770      	bx	lr
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20000780 	.word	0x20000780
 80019f0:	200003f0 	.word	0x200003f0
 80019f4:	200001e4 	.word	0x200001e4
 80019f8:	20000268 	.word	0x20000268
 80019fc:	2000022c 	.word	0x2000022c
 8001a00:	20000210 	.word	0x20000210
 8001a04:	20000258 	.word	0x20000258
 8001a08:	2000023c 	.word	0x2000023c

08001a0c <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001a0c:	4b01      	ldr	r3, [pc, #4]	@ (8001a14 <TSK_SetChargeBootCapDelayM1+0x8>)
 8001a0e:	8018      	strh	r0, [r3, #0]
}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000784 	.word	0x20000784

08001a18 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8001a18:	4b03      	ldr	r3, [pc, #12]	@ (8001a28 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8001a1a:	8818      	ldrh	r0, [r3, #0]
 8001a1c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001a1e:	fab0 f080 	clz	r0, r0
 8001a22:	0940      	lsrs	r0, r0, #5
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000784 	.word	0x20000784

08001a2c <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001a2c:	4b01      	ldr	r3, [pc, #4]	@ (8001a34 <TSK_SetStopPermanencyTimeM1+0x8>)
 8001a2e:	8018      	strh	r0, [r3, #0]
}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000782 	.word	0x20000782

08001a38 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8001a38:	4b03      	ldr	r3, [pc, #12]	@ (8001a48 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8001a3a:	8818      	ldrh	r0, [r3, #0]
 8001a3c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001a3e:	fab0 f080 	clz	r0, r0
 8001a42:	0940      	lsrs	r0, r0, #5
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000782 	.word	0x20000782

08001a4c <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001a4c:	b508      	push	{r3, lr}
  bMotorNbr = 0;

  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */
  SIX_STEP_HighFrequencyTask(bMotorNbr);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f000 fb32 	bl	80020b8 <SIX_STEP_HighFrequencyTask>

  /* USER CODE BEGIN HighFrequencyTask 1 */

  /* USER CODE END HighFrequencyTask 1 */

  GLOBAL_TIMESTAMP++;
 8001a54:	4a06      	ldr	r2, [pc, #24]	@ (8001a70 <TSK_HighFrequencyTask+0x24>)
  if (0U == MCPA_UART_A.Mark)
 8001a56:	4807      	ldr	r0, [pc, #28]	@ (8001a74 <TSK_HighFrequencyTask+0x28>)
  GLOBAL_TIMESTAMP++;
 8001a58:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001a5a:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
  GLOBAL_TIMESTAMP++;
 8001a5e:	3301      	adds	r3, #1
 8001a60:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001a62:	b909      	cbnz	r1, 8001a68 <TSK_HighFrequencyTask+0x1c>
    MCPA_dataLog (&MCPA_UART_A);
  }

  return (bMotorNbr);

}
 8001a64:	2000      	movs	r0, #0
 8001a66:	bd08      	pop	{r3, pc}
    MCPA_dataLog (&MCPA_UART_A);
 8001a68:	f006 f976 	bl	8007d58 <MCPA_dataLog>
}
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	bd08      	pop	{r3, pc}
 8001a70:	20001a78 	.word	0x20001a78
 8001a74:	200003b4 	.word	0x200003b4

08001a78 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint8_t lbmotor = M1;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  if (M1 == bMotor)
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	b198      	cbz	r0, 8001aa6 <TSK_SafetyTask_PWMOFF+0x2e>
  {
    /* Nothing to do */
  }

/* Due to warning array subscript 1 is above array bounds of PWMC_Handle_t *[1] [-Warray-bounds] */
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001a7e:	4e21      	ldr	r6, [pc, #132]	@ (8001b04 <TSK_SafetyTask_PWMOFF+0x8c>)
 8001a80:	6830      	ldr	r0, [r6, #0]
 8001a82:	f006 fd6b 	bl	800855c <PWMC_IsFaultOccurred>
 8001a86:	4601      	mov	r1, r0
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8001a88:	4d1f      	ldr	r5, [pc, #124]	@ (8001b08 <TSK_SafetyTask_PWMOFF+0x90>)
 8001a8a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001a8e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8001a92:	43ca      	mvns	r2, r1
 8001a94:	4628      	mov	r0, r5
 8001a96:	b292      	uxth	r2, r2
 8001a98:	f7ff fed8 	bl	800184c <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8001a9c:	4628      	mov	r0, r5
 8001a9e:	f7ff ff4d 	bl	800193c <MCI_GetFaultState>
 8001aa2:	b9d8      	cbnz	r0, 8001adc <TSK_SafetyTask_PWMOFF+0x64>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 8001aa6:	4819      	ldr	r0, [pc, #100]	@ (8001b0c <TSK_SafetyTask_PWMOFF+0x94>)
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001aa8:	4e16      	ldr	r6, [pc, #88]	@ (8001b04 <TSK_SafetyTask_PWMOFF+0x8c>)
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 8001aaa:	f001 fc63 	bl	8003374 <RCM_ExecRegularConv>
 8001aae:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 8001ab0:	4817      	ldr	r0, [pc, #92]	@ (8001b10 <TSK_SafetyTask_PWMOFF+0x98>)
 8001ab2:	f006 fadf 	bl	8008074 <NTC_CalcAvTemp>
 8001ab6:	4607      	mov	r7, r0
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8001ab8:	6830      	ldr	r0, [r6, #0]
 8001aba:	f006 fd4f 	bl	800855c <PWMC_IsFaultOccurred>
 8001abe:	4605      	mov	r5, r0
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 8001ac0:	4814      	ldr	r0, [pc, #80]	@ (8001b14 <TSK_SafetyTask_PWMOFF+0x9c>)
 8001ac2:	f001 fc57 	bl	8003374 <RCM_ExecRegularConv>
 8001ac6:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 8001ac8:	4813      	ldr	r0, [pc, #76]	@ (8001b18 <TSK_SafetyTask_PWMOFF+0xa0>)
 8001aca:	f006 fddb 	bl	8008684 <RVBS_CalcAvVbus>
 8001ace:	4307      	orrs	r7, r0
 8001ad0:	f007 070e 	and.w	r7, r7, #14
 8001ad4:	ea45 0107 	orr.w	r1, r5, r7
 8001ad8:	b289      	uxth	r1, r1
 8001ada:	e7d5      	b.n	8001a88 <TSK_SafetyTask_PWMOFF+0x10>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001adc:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001ae0:	f006 fcb2 	bl	8008448 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0U)
 8001ae4:	480d      	ldr	r0, [pc, #52]	@ (8001b1c <TSK_SafetyTask_PWMOFF+0xa4>)
 8001ae6:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8001aea:	b923      	cbnz	r3, 8001af6 <TSK_SafetyTask_PWMOFF+0x7e>
    SIX_STEP_Clear(bMotor);
 8001aec:	4620      	mov	r0, r4
}
 8001aee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    SIX_STEP_Clear(bMotor);
 8001af2:	f000 b90f 	b.w	8001d14 <SIX_STEP_Clear>
      MCPA_flushDataLog (&MCPA_UART_A);
 8001af6:	f006 f9ed 	bl	8007ed4 <MCPA_flushDataLog>
    SIX_STEP_Clear(bMotor);
 8001afa:	4620      	mov	r0, r4
}
 8001afc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    SIX_STEP_Clear(bMotor);
 8001b00:	f000 b908 	b.w	8001d14 <SIX_STEP_Clear>
 8001b04:	20000770 	.word	0x20000770
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	20000258 	.word	0x20000258
 8001b10:	2000023c 	.word	0x2000023c
 8001b14:	2000022c 	.word	0x2000022c
 8001b18:	20000210 	.word	0x20000210
 8001b1c:	200003b4 	.word	0x200003b4

08001b20 <TSK_SafetyTask>:
{
 8001b20:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8001b22:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <TSK_SafetyTask+0x1c>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d000      	beq.n	8001b2c <TSK_SafetyTask+0xc>
}
 8001b2a:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7ff ffa3 	bl	8001a78 <TSK_SafetyTask_PWMOFF>
}
 8001b32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 8001b36:	f001 bce5 	b.w	8003504 <RCM_ExecUserConv>
 8001b3a:	bf00      	nop
 8001b3c:	20000780 	.word	0x20000780

08001b40 <MC_RunMotorControlTasks>:
  if (0U == bMCBootCompleted)
 8001b40:	4b1e      	ldr	r3, [pc, #120]	@ (8001bbc <MC_RunMotorControlTasks+0x7c>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	b1cb      	cbz	r3, 8001b7a <MC_RunMotorControlTasks+0x3a>
{
 8001b46:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8001b48:	4c1d      	ldr	r4, [pc, #116]	@ (8001bc0 <MC_RunMotorControlTasks+0x80>)
 8001b4a:	8823      	ldrh	r3, [r4, #0]
 8001b4c:	b1b3      	cbz	r3, 8001b7c <MC_RunMotorControlTasks+0x3c>
      hMFTaskCounterM1--;
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 8001b52:	4a1c      	ldr	r2, [pc, #112]	@ (8001bc4 <MC_RunMotorControlTasks+0x84>)
      hMFTaskCounterM1--;
 8001b54:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8001b56:	8813      	ldrh	r3, [r2, #0]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	b11b      	cbz	r3, 8001b64 <MC_RunMotorControlTasks+0x24>
      hBootCapDelayCounterM1--;
 8001b5c:	8813      	ldrh	r3, [r2, #0]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8001b64:	4a18      	ldr	r2, [pc, #96]	@ (8001bc8 <MC_RunMotorControlTasks+0x88>)
 8001b66:	8813      	ldrh	r3, [r2, #0]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	b11b      	cbz	r3, 8001b74 <MC_RunMotorControlTasks+0x34>
      hStopPermanencyCounterM1--;
 8001b6c:	8813      	ldrh	r3, [r2, #0]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	8013      	strh	r3, [r2, #0]
    TSK_SafetyTask();
 8001b74:	f7ff ffd4 	bl	8001b20 <TSK_SafetyTask>
}
 8001b78:	bd70      	pop	{r4, r5, r6, pc}
 8001b7a:	4770      	bx	lr
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001b7c:	4d13      	ldr	r5, [pc, #76]	@ (8001bcc <MC_RunMotorControlTasks+0x8c>)
      TSK_MediumFrequencyTaskM1();
 8001b7e:	f000 f93f 	bl	8001e00 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8001b82:	f7ff fe51 	bl	8001828 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001b86:	4629      	mov	r1, r5
 8001b88:	f851 0b0c 	ldr.w	r0, [r1], #12
 8001b8c:	6883      	ldr	r3, [r0, #8]
 8001b8e:	4798      	blx	r3
 8001b90:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8001b92:	b130      	cbz	r0, 8001ba2 <MC_RunMotorControlTasks+0x62>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8001b94:	4629      	mov	r1, r5
 8001b96:	220a      	movs	r2, #10
 8001b98:	f851 0b08 	ldr.w	r0, [r1], #8
 8001b9c:	6803      	ldr	r3, [r0, #0]
 8001b9e:	4798      	blx	r3
 8001ba0:	b908      	cbnz	r0, 8001ba6 <MC_RunMotorControlTasks+0x66>
{
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e7d5      	b.n	8001b52 <MC_RunMotorControlTasks+0x12>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8001ba6:	4628      	mov	r0, r5
 8001ba8:	f000 fc14 	bl	80023d4 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8001bac:	6828      	ldr	r0, [r5, #0]
 8001bae:	89ea      	ldrh	r2, [r5, #14]
 8001bb0:	6846      	ldr	r6, [r0, #4]
 8001bb2:	68a9      	ldr	r1, [r5, #8]
 8001bb4:	230a      	movs	r3, #10
 8001bb6:	47b0      	blx	r6
 8001bb8:	e7f3      	b.n	8001ba2 <MC_RunMotorControlTasks+0x62>
 8001bba:	bf00      	nop
 8001bbc:	20000780 	.word	0x20000780
 8001bc0:	20000786 	.word	0x20000786
 8001bc4:	20000784 	.word	0x20000784
 8001bc8:	20000782 	.word	0x20000782
 8001bcc:	200003e0 	.word	0x200003e0

08001bd0 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001bd0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
   SIX_STEP_Clear(M1);
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f000 f89e 	bl	8001d14 <SIX_STEP_Clear>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001bd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8001bdc:	4802      	ldr	r0, [pc, #8]	@ (8001be8 <TSK_HardwareFaultTask+0x18>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	2180      	movs	r1, #128	@ 0x80
 8001be2:	f7ff be33 	b.w	800184c <MCI_FaultProcessing>
 8001be6:	bf00      	nop
 8001be8:	20000000 	.word	0x20000000

08001bec <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8001bec:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 8001bee:	f7ff fe13 	bl	8001818 <MC_GetSTMStateMotor1>
 8001bf2:	b918      	cbnz	r0, 8001bfc <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8001bf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 8001bf8:	f7ff be02 	b.w	8001800 <MC_StartMotor1>
}
 8001bfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 8001c00:	f7ff be04 	b.w	800180c <MC_StopMotor1>

08001c04 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 8001c04:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c06:	4a39      	ldr	r2, [pc, #228]	@ (8001cec <mc_lock_pins+0xe8>)
 8001c08:	4b39      	ldr	r3, [pc, #228]	@ (8001cf0 <mc_lock_pins+0xec>)
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c0a:	2120      	movs	r1, #32
 8001c0c:	b08e      	sub	sp, #56	@ 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c0e:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c10:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c12:	61d3      	str	r3, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8001c14:	69d3      	ldr	r3, [r2, #28]
 8001c16:	930d      	str	r3, [sp, #52]	@ 0x34
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c18:	2110      	movs	r1, #16
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c1a:	4b36      	ldr	r3, [pc, #216]	@ (8001cf4 <mc_lock_pins+0xf0>)
  (void) temp;
 8001c1c:	980d      	ldr	r0, [sp, #52]	@ 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c1e:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c20:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c22:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c24:	69d1      	ldr	r1, [r2, #28]
 8001c26:	910c      	str	r1, [sp, #48]	@ 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c28:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001c2c:	4932      	ldr	r1, [pc, #200]	@ (8001cf8 <mc_lock_pins+0xf4>)
  (void) temp;
 8001c2e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c30:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c32:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001c36:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c38:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c3a:	69d9      	ldr	r1, [r3, #28]
 8001c3c:	910b      	str	r1, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c3e:	f44f 3481 	mov.w	r4, #66048	@ 0x10200
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c42:	f44f 7600 	mov.w	r6, #512	@ 0x200
  (void) temp;
 8001c46:	990b      	ldr	r1, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c48:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c4a:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c4c:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c4e:	69d9      	ldr	r1, [r3, #28]
 8001c50:	910a      	str	r1, [sp, #40]	@ 0x28
  (void) temp;
 8001c52:	980a      	ldr	r0, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c54:	4929      	ldr	r1, [pc, #164]	@ (8001cfc <mc_lock_pins+0xf8>)
 8001c56:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c58:	2040      	movs	r0, #64	@ 0x40
 8001c5a:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c5c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c5e:	69d9      	ldr	r1, [r3, #28]
 8001c60:	9109      	str	r1, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c62:	4927      	ldr	r1, [pc, #156]	@ (8001d00 <mc_lock_pins+0xfc>)
  (void) temp;
 8001c64:	9809      	ldr	r0, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c66:	2501      	movs	r5, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c68:	f04f 1001 	mov.w	r0, #65537	@ 0x10001
 8001c6c:	61c8      	str	r0, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c6e:	61cd      	str	r5, [r1, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c70:	61c8      	str	r0, [r1, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c72:	69c8      	ldr	r0, [r1, #28]
 8001c74:	9008      	str	r0, [sp, #32]
  (void) temp;
 8001c76:	9808      	ldr	r0, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c78:	f44f 6580 	mov.w	r5, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c7c:	f44f 3082 	mov.w	r0, #66560	@ 0x10400
 8001c80:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c82:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c84:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c86:	69d8      	ldr	r0, [r3, #28]
 8001c88:	9007      	str	r0, [sp, #28]
  (void) temp;
 8001c8a:	9807      	ldr	r0, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c8c:	481d      	ldr	r0, [pc, #116]	@ (8001d04 <mc_lock_pins+0x100>)
 8001c8e:	61c8      	str	r0, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001c90:	2502      	movs	r5, #2
 8001c92:	61cd      	str	r5, [r1, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c94:	61c8      	str	r0, [r1, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001c96:	69c9      	ldr	r1, [r1, #28]
 8001c98:	9106      	str	r1, [sp, #24]
  (void) temp;
 8001c9a:	9906      	ldr	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001c9c:	491a      	ldr	r1, [pc, #104]	@ (8001d08 <mc_lock_pins+0x104>)
 8001c9e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ca0:	2780      	movs	r7, #128	@ 0x80
 8001ca2:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ca4:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ca6:	69d9      	ldr	r1, [r3, #28]
 8001ca8:	9105      	str	r1, [sp, #20]
  (void) temp;
 8001caa:	9905      	ldr	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cac:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001cae:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cb0:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001cb2:	69d1      	ldr	r1, [r2, #28]
 8001cb4:	9104      	str	r1, [sp, #16]
  (void) temp;
 8001cb6:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cb8:	4914      	ldr	r1, [pc, #80]	@ (8001d0c <mc_lock_pins+0x108>)
 8001cba:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001cbc:	2408      	movs	r4, #8
 8001cbe:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cc0:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001cc2:	69d1      	ldr	r1, [r2, #28]
 8001cc4:	9103      	str	r1, [sp, #12]
  (void) temp;
 8001cc6:	9c03      	ldr	r4, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cc8:	4911      	ldr	r1, [pc, #68]	@ (8001d10 <mc_lock_pins+0x10c>)
 8001cca:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ccc:	2404      	movs	r4, #4
 8001cce:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cd0:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001cd2:	69d2      	ldr	r2, [r2, #28]
 8001cd4:	9202      	str	r2, [sp, #8]
  (void) temp;
 8001cd6:	9a02      	ldr	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cd8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001cda:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001cdc:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	9301      	str	r3, [sp, #4]
  (void) temp;
 8001ce2:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_BEMF_DIVIDER_GPIO_Port, M1_BEMF_DIVIDER_Pin);
LL_GPIO_LockPin(M1_BEMF_U_GPIO_Port, M1_BEMF_U_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
}
 8001ce4:	b00e      	add	sp, #56	@ 0x38
 8001ce6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	48000800 	.word	0x48000800
 8001cf0:	00010020 	.word	0x00010020
 8001cf4:	00010010 	.word	0x00010010
 8001cf8:	00010100 	.word	0x00010100
 8001cfc:	00010040 	.word	0x00010040
 8001d00:	48000400 	.word	0x48000400
 8001d04:	00010002 	.word	0x00010002
 8001d08:	00010080 	.word	0x00010080
 8001d0c:	00010008 	.word	0x00010008
 8001d10:	00010004 	.word	0x00010004

08001d14 <SIX_STEP_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void SIX_STEP_Clear(uint8_t bMotor)
{
 8001d14:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN SixStep_Clear 0 */

  /* USER CODE END SixStep_Clear 0 */
  SixStepVars[M1].bDriveInput = EXTERNAL;
  STC_Clear(pSTC[bMotor]);
 8001d16:	4d10      	ldr	r5, [pc, #64]	@ (8001d58 <SIX_STEP_Clear+0x44>)
  SixStepVars[M1].bDriveInput = EXTERNAL;
 8001d18:	4e10      	ldr	r6, [pc, #64]	@ (8001d5c <SIX_STEP_Clear+0x48>)
{
 8001d1a:	4604      	mov	r4, r0
  SixStepVars[M1].bDriveInput = EXTERNAL;
 8001d1c:	2301      	movs	r3, #1
  STC_Clear(pSTC[bMotor]);
 8001d1e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
  SixStepVars[M1].bDriveInput = EXTERNAL;
 8001d22:	7133      	strb	r3, [r6, #4]
  STC_Clear(pSTC[bMotor]);
 8001d24:	f006 fdce 	bl	80088c4 <STC_Clear>
  SixStepVars[bMotor].DutyCycleRef = STC_GetDutyCycleRef(pSTC[bMotor]);
 8001d28:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  BADC_Stop( &Bemf_ADC_M1 );
 8001d2c:	4d0c      	ldr	r5, [pc, #48]	@ (8001d60 <SIX_STEP_Clear+0x4c>)
  SixStepVars[bMotor].DutyCycleRef = STC_GetDutyCycleRef(pSTC[bMotor]);
 8001d2e:	f006 fde7 	bl	8008900 <STC_GetDutyCycleRef>
 8001d32:	f826 0034 	strh.w	r0, [r6, r4, lsl #3]
  BADC_Stop( &Bemf_ADC_M1 );
 8001d36:	4628      	mov	r0, r5
 8001d38:	f005 fd3e 	bl	80077b8 <BADC_Stop>
  BADC_SpeedMeasureOff(&Bemf_ADC_M1); /* Stop timer before BADC_Clear to avoid ADC regular conversion issues.*/
 8001d3c:	4628      	mov	r0, r5
 8001d3e:	f005 fd6b 	bl	8007818 <BADC_SpeedMeasureOff>
  BADC_Clear( &Bemf_ADC_M1 );
 8001d42:	4628      	mov	r0, r5
 8001d44:	f005 fc96 	bl	8007674 <BADC_Clear>
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001d48:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <SIX_STEP_Clear+0x50>)
 8001d4a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]

  /* USER CODE BEGIN SixStep_Clear 1 */

  /* USER CODE END SixStep_Clear 1 */
}
 8001d4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001d52:	f006 bb79 	b.w	8008448 <PWMC_SwitchOffPWM>
 8001d56:	bf00      	nop
 8001d58:	20000024 	.word	0x20000024
 8001d5c:	20000768 	.word	0x20000768
 8001d60:	2000005c 	.word	0x2000005c
 8001d64:	20000770 	.word	0x20000770

08001d68 <SIX_STEP_Init>:
{
 8001d68:	b570      	push	{r4, r5, r6, lr}
    pwmcHandle[M1] = &PWM_Handle_M1;
 8001d6a:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <SIX_STEP_Init+0x4c>)
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001d6c:	4d12      	ldr	r5, [pc, #72]	@ (8001db8 <SIX_STEP_Init+0x50>)
    pwmcHandle[M1] = &PWM_Handle_M1;
 8001d6e:	4813      	ldr	r0, [pc, #76]	@ (8001dbc <SIX_STEP_Init+0x54>)
    BADC_Init (&Bemf_ADC_M1);
 8001d70:	4e13      	ldr	r6, [pc, #76]	@ (8001dc0 <SIX_STEP_Init+0x58>)
    pwmcHandle[M1] = &PWM_Handle_M1;
 8001d72:	6018      	str	r0, [r3, #0]
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &Bemf_ADC_M1._Super);
 8001d74:	4c13      	ldr	r4, [pc, #76]	@ (8001dc4 <SIX_STEP_Init+0x5c>)
    PWMC_Init(&PWM_Handle_M1);
 8001d76:	f006 fa2f 	bl	80081d8 <PWMC_Init>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001d7a:	4628      	mov	r0, r5
 8001d7c:	f006 f9a4 	bl	80080c8 <PID_HandleInit>
    BADC_Init (&Bemf_ADC_M1);
 8001d80:	4630      	mov	r0, r6
 8001d82:	f005 fb3d 	bl	8007400 <BADC_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &Bemf_ADC_M1._Super);
 8001d86:	6820      	ldr	r0, [r4, #0]
 8001d88:	4632      	mov	r2, r6
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	f006 fd80 	bl	8008890 <STC_Init>
    RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1);
 8001d90:	6821      	ldr	r1, [r4, #0]
 8001d92:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc8 <SIX_STEP_Init+0x60>)
 8001d94:	480d      	ldr	r0, [pc, #52]	@ (8001dcc <SIX_STEP_Init+0x64>)
 8001d96:	f006 fca3 	bl	80086e0 <RUC_Init>
    SIX_STEP_Clear(M1);
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f7ff ffba 	bl	8001d14 <SIX_STEP_Clear>
    MCI_ExecSpeedRamp(&Mci[M1],
 8001da0:	6820      	ldr	r0, [r4, #0]
 8001da2:	f006 fe51 	bl	8008a48 <STC_GetMecSpeedRefUnitDefault>
}
 8001da6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MCI_ExecSpeedRamp(&Mci[M1],
 8001daa:	4601      	mov	r1, r0
 8001dac:	2200      	movs	r2, #0
 8001dae:	4808      	ldr	r0, [pc, #32]	@ (8001dd0 <SIX_STEP_Init+0x68>)
 8001db0:	f7ff bd3c 	b.w	800182c <MCI_ExecSpeedRamp>
 8001db4:	20000770 	.word	0x20000770
 8001db8:	200001e4 	.word	0x200001e4
 8001dbc:	20000028 	.word	0x20000028
 8001dc0:	2000005c 	.word	0x2000005c
 8001dc4:	20000024 	.word	0x20000024
 8001dc8:	20000268 	.word	0x20000268
 8001dcc:	2000015c 	.word	0x2000015c
 8001dd0:	20000000 	.word	0x20000000

08001dd4 <SixStep_InitAdditionalMethods>:
__weak void SixStep_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop

08001dd8 <SixStep_CalcSpeedRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void SixStep_CalcSpeedRef(uint8_t bMotor)
{
 8001dd8:	b538      	push	{r3, r4, r5, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(SixStepVars[bMotor].bDriveInput == INTERNAL)
 8001dda:	4d07      	ldr	r5, [pc, #28]	@ (8001df8 <SixStep_CalcSpeedRef+0x20>)
 8001ddc:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
 8001de0:	791b      	ldrb	r3, [r3, #4]
 8001de2:	b103      	cbz	r3, 8001de6 <SixStep_CalcSpeedRef+0xe>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001de4:	bd38      	pop	{r3, r4, r5, pc}
    SixStepVars[bMotor].DutyCycleRef = STC_CalcSpeedReference(pSTC[bMotor]);
 8001de6:	4b05      	ldr	r3, [pc, #20]	@ (8001dfc <SixStep_CalcSpeedRef+0x24>)
 8001de8:	4604      	mov	r4, r0
 8001dea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001dee:	f006 fdd9 	bl	80089a4 <STC_CalcSpeedReference>
 8001df2:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
}
 8001df6:	bd38      	pop	{r3, r4, r5, pc}
 8001df8:	20000768 	.word	0x20000768
 8001dfc:	20000024 	.word	0x20000024

08001e00 <TSK_MediumFrequencyTaskM1>:
{
 8001e00:	b570      	push	{r4, r5, r6, lr}
 8001e02:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8001e04:	2300      	movs	r3, #0
  bool IsSpeedReliable = BADC_CalcAvrgMecSpeedUnit(&Bemf_ADC_M1, &wAux);
 8001e06:	48a2      	ldr	r0, [pc, #648]	@ (8002090 <TSK_MediumFrequencyTaskM1+0x290>)
  int16_t wAux = 0;
 8001e08:	f8ad 3004 	strh.w	r3, [sp, #4]
  bool IsSpeedReliable = BADC_CalcAvrgMecSpeedUnit(&Bemf_ADC_M1, &wAux);
 8001e0c:	a901      	add	r1, sp, #4
 8001e0e:	f005 fdcf 	bl	80079b0 <BADC_CalcAvrgMecSpeedUnit>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001e12:	4ca0      	ldr	r4, [pc, #640]	@ (8002094 <TSK_MediumFrequencyTaskM1+0x294>)
  bool IsSpeedReliable = BADC_CalcAvrgMecSpeedUnit(&Bemf_ADC_M1, &wAux);
 8001e14:	4605      	mov	r5, r0
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001e16:	4620      	mov	r0, r4
 8001e18:	f7ff fd4a 	bl	80018b0 <MCI_GetCurrentFaults>
 8001e1c:	b118      	cbz	r0, 8001e26 <TSK_MediumFrequencyTaskM1+0x26>
    Mci[M1].State = FAULT_NOW;
 8001e1e:	230a      	movs	r3, #10
 8001e20:	76e3      	strb	r3, [r4, #27]
}
 8001e22:	b002      	add	sp, #8
 8001e24:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001e26:	4620      	mov	r0, r4
 8001e28:	f7ff fd40 	bl	80018ac <MCI_GetOccurredFaults>
 8001e2c:	bb70      	cbnz	r0, 8001e8c <TSK_MediumFrequencyTaskM1+0x8c>
      switch (Mci[M1].State)
 8001e2e:	7ee3      	ldrb	r3, [r4, #27]
 8001e30:	2b13      	cmp	r3, #19
 8001e32:	d8f6      	bhi.n	8001e22 <TSK_MediumFrequencyTaskM1+0x22>
 8001e34:	a201      	add	r2, pc, #4	@ (adr r2, 8001e3c <TSK_MediumFrequencyTaskM1+0x3c>)
 8001e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3a:	bf00      	nop
 8001e3c:	08001fcd 	.word	0x08001fcd
 8001e40:	08001e23 	.word	0x08001e23
 8001e44:	08001e23 	.word	0x08001e23
 8001e48:	08001e23 	.word	0x08001e23
 8001e4c:	08001f81 	.word	0x08001f81
 8001e50:	08001e23 	.word	0x08001e23
 8001e54:	08001f4d 	.word	0x08001f4d
 8001e58:	08001e23 	.word	0x08001e23
 8001e5c:	08001f27 	.word	0x08001f27
 8001e60:	08001e23 	.word	0x08001e23
 8001e64:	08001e8d 	.word	0x08001e8d
 8001e68:	08001f1b 	.word	0x08001f1b
 8001e6c:	08001e23 	.word	0x08001e23
 8001e70:	08001e23 	.word	0x08001e23
 8001e74:	08001e23 	.word	0x08001e23
 8001e78:	08001e23 	.word	0x08001e23
 8001e7c:	08001eb5 	.word	0x08001eb5
 8001e80:	08001e23 	.word	0x08001e23
 8001e84:	08001e23 	.word	0x08001e23
 8001e88:	08001e95 	.word	0x08001e95
      Mci[M1].State = FAULT_OVER;
 8001e8c:	230b      	movs	r3, #11
 8001e8e:	76e3      	strb	r3, [r4, #27]
}
 8001e90:	b002      	add	sp, #8
 8001e92:	bd70      	pop	{r4, r5, r6, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001e94:	7ea3      	ldrb	r3, [r4, #26]
 8001e96:	2b05      	cmp	r3, #5
 8001e98:	f000 80b4 	beq.w	8002004 <TSK_MediumFrequencyTaskM1+0x204>
              if (! RUC_Exec(&RevUpControlM1))
 8001e9c:	487e      	ldr	r0, [pc, #504]	@ (8002098 <TSK_MediumFrequencyTaskM1+0x298>)
 8001e9e:	f006 fc99 	bl	80087d4 <RUC_Exec>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	2800      	cmp	r0, #0
 8001ea6:	f040 80c1 	bne.w	800202c <TSK_MediumFrequencyTaskM1+0x22c>
                MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001eaa:	487a      	ldr	r0, [pc, #488]	@ (8002094 <TSK_MediumFrequencyTaskM1+0x294>)
 8001eac:	2110      	movs	r1, #16
 8001eae:	f7ff fccd 	bl	800184c <MCI_FaultProcessing>
 8001eb2:	e7b6      	b.n	8001e22 <TSK_MediumFrequencyTaskM1+0x22>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001eb4:	7ea3      	ldrb	r3, [r4, #26]
 8001eb6:	2b05      	cmp	r3, #5
 8001eb8:	f000 80a4 	beq.w	8002004 <TSK_MediumFrequencyTaskM1+0x204>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8001ebc:	f7ff fdac 	bl	8001a18 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001ec0:	2800      	cmp	r0, #0
 8001ec2:	d0ae      	beq.n	8001e22 <TSK_MediumFrequencyTaskM1+0x22>
              PWMC_SwitchOffPWM(pwmcHandle[M1]);
 8001ec4:	4e75      	ldr	r6, [pc, #468]	@ (800209c <TSK_MediumFrequencyTaskM1+0x29c>)
              BADC_SetSamplingPoint(&Bemf_ADC_M1, &PWM_Handle_M1, &BusVoltageSensor_M1._Super);
 8001ec6:	4d76      	ldr	r5, [pc, #472]	@ (80020a0 <TSK_MediumFrequencyTaskM1+0x2a0>)
              PWMC_SwitchOffPWM(pwmcHandle[M1]);
 8001ec8:	6830      	ldr	r0, [r6, #0]
 8001eca:	f006 fabd 	bl	8008448 <PWMC_SwitchOffPWM>
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001ece:	4975      	ldr	r1, [pc, #468]	@ (80020a4 <TSK_MediumFrequencyTaskM1+0x2a4>)
              SixStepVars[M1].bDriveInput = EXTERNAL;
 8001ed0:	4b75      	ldr	r3, [pc, #468]	@ (80020a8 <TSK_MediumFrequencyTaskM1+0x2a8>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001ed2:	6808      	ldr	r0, [r1, #0]
 8001ed4:	4975      	ldr	r1, [pc, #468]	@ (80020ac <TSK_MediumFrequencyTaskM1+0x2ac>)
              SixStepVars[M1].bDriveInput = EXTERNAL;
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	711a      	strb	r2, [r3, #4]
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001eda:	f006 fcef 	bl	80088bc <STC_SetSpeedSensor>
              BADC_Clear(&Bemf_ADC_M1);
 8001ede:	486c      	ldr	r0, [pc, #432]	@ (8002090 <TSK_MediumFrequencyTaskM1+0x290>)
 8001ee0:	f005 fbc8 	bl	8007674 <BADC_Clear>
              SIX_STEP_Clear( M1 );
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f7ff ff15 	bl	8001d14 <SIX_STEP_Clear>
              BADC_SetDirection(&Bemf_ADC_M1, MCI_GetImposedMotorDirection( &Mci[M1]));
 8001eea:	486a      	ldr	r0, [pc, #424]	@ (8002094 <TSK_MediumFrequencyTaskM1+0x294>)
 8001eec:	f7ff fd30 	bl	8001950 <MCI_GetImposedMotorDirection>
 8001ef0:	b2c1      	uxtb	r1, r0
 8001ef2:	4867      	ldr	r0, [pc, #412]	@ (8002090 <TSK_MediumFrequencyTaskM1+0x290>)
 8001ef4:	f005 fe26 	bl	8007b44 <BADC_SetDirection>
              BADC_SetSamplingPoint(&Bemf_ADC_M1, &PWM_Handle_M1, &BusVoltageSensor_M1._Super);
 8001ef8:	4629      	mov	r1, r5
 8001efa:	4a6d      	ldr	r2, [pc, #436]	@ (80020b0 <TSK_MediumFrequencyTaskM1+0x2b0>)
 8001efc:	4864      	ldr	r0, [pc, #400]	@ (8002090 <TSK_MediumFrequencyTaskM1+0x290>)
 8001efe:	f005 fc93 	bl	8007828 <BADC_SetSamplingPoint>
              Mci[M1].State = START;
 8001f02:	2304      	movs	r3, #4
              BADC_Start(&Bemf_ADC_M1, PWM_Handle_M1.Step, PWM_Handle_M1.LSModArray);
 8001f04:	4862      	ldr	r0, [pc, #392]	@ (8002090 <TSK_MediumFrequencyTaskM1+0x290>)
 8001f06:	7ae9      	ldrb	r1, [r5, #11]
              Mci[M1].State = START;
 8001f08:	76e3      	strb	r3, [r4, #27]
              BADC_Start(&Bemf_ADC_M1, PWM_Handle_M1.Step, PWM_Handle_M1.LSModArray);
 8001f0a:	f105 020c 	add.w	r2, r5, #12
 8001f0e:	f005 fbc1 	bl	8007694 <BADC_Start>
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001f12:	6830      	ldr	r0, [r6, #0]
 8001f14:	f006 fa68 	bl	80083e8 <PWMC_SwitchOnPWM>
 8001f18:	e783      	b.n	8001e22 <TSK_MediumFrequencyTaskM1+0x22>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8001f1a:	7ea3      	ldrb	r3, [r4, #26]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d180      	bne.n	8001e22 <TSK_MediumFrequencyTaskM1+0x22>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001f20:	2300      	movs	r3, #0
 8001f22:	8363      	strh	r3, [r4, #26]
 8001f24:	e77d      	b.n	8001e22 <TSK_MediumFrequencyTaskM1+0x22>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8001f26:	f7ff fd87 	bl	8001a38 <TSK_StopPermanencyTimeHasElapsedM1>
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	f43f af79 	beq.w	8001e22 <TSK_MediumFrequencyTaskM1+0x22>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);    /* Sensor-less */
 8001f30:	4b5c      	ldr	r3, [pc, #368]	@ (80020a4 <TSK_MediumFrequencyTaskM1+0x2a4>)
 8001f32:	495e      	ldr	r1, [pc, #376]	@ (80020ac <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001f34:	6818      	ldr	r0, [r3, #0]
 8001f36:	f006 fcc1 	bl	80088bc <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 8001f3a:	485c      	ldr	r0, [pc, #368]	@ (80020ac <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001f3c:	f006 fdd0 	bl	8008ae0 <VSS_Clear>
            BADC_Clear(&Bemf_ADC_M1);
 8001f40:	4853      	ldr	r0, [pc, #332]	@ (8002090 <TSK_MediumFrequencyTaskM1+0x290>)
 8001f42:	f005 fb97 	bl	8007674 <BADC_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001f46:	2300      	movs	r3, #0
 8001f48:	8363      	strh	r3, [r4, #26]
 8001f4a:	e76a      	b.n	8001e22 <TSK_MediumFrequencyTaskM1+0x22>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001f4c:	7ea3      	ldrb	r3, [r4, #26]
 8001f4e:	2b05      	cmp	r3, #5
 8001f50:	d058      	beq.n	8002004 <TSK_MediumFrequencyTaskM1+0x204>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001f52:	4850      	ldr	r0, [pc, #320]	@ (8002094 <TSK_MediumFrequencyTaskM1+0x294>)
 8001f54:	f7ff fc86 	bl	8001864 <MCI_ExecBufferedCommands>
              SixStep_CalcSpeedRef(M1);
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f7ff ff3d 	bl	8001dd8 <SixStep_CalcSpeedRef>
            BADC_SetSamplingPoint(&Bemf_ADC_M1, &PWM_Handle_M1, &BusVoltageSensor_M1._Super);
 8001f5e:	484c      	ldr	r0, [pc, #304]	@ (8002090 <TSK_MediumFrequencyTaskM1+0x290>)
 8001f60:	4a53      	ldr	r2, [pc, #332]	@ (80020b0 <TSK_MediumFrequencyTaskM1+0x2b0>)
 8001f62:	494f      	ldr	r1, [pc, #316]	@ (80020a0 <TSK_MediumFrequencyTaskM1+0x2a0>)
 8001f64:	f005 fc60 	bl	8007828 <BADC_SetSamplingPoint>
            (void) BADC_CalcRunDemagTime (&Bemf_ADC_M1);
 8001f68:	4849      	ldr	r0, [pc, #292]	@ (8002090 <TSK_MediumFrequencyTaskM1+0x290>)
 8001f6a:	f005 fe77 	bl	8007c5c <BADC_CalcRunDemagTime>
            if(!IsSpeedReliable)
 8001f6e:	2d00      	cmp	r5, #0
 8001f70:	f47f af57 	bne.w	8001e22 <TSK_MediumFrequencyTaskM1+0x22>
              MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 8001f74:	4847      	ldr	r0, [pc, #284]	@ (8002094 <TSK_MediumFrequencyTaskM1+0x294>)
 8001f76:	462a      	mov	r2, r5
 8001f78:	2120      	movs	r1, #32
 8001f7a:	f7ff fc67 	bl	800184c <MCI_FaultProcessing>
 8001f7e:	e750      	b.n	8001e22 <TSK_MediumFrequencyTaskM1+0x22>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001f80:	7ea3      	ldrb	r3, [r4, #26]
 8001f82:	2b05      	cmp	r3, #5
 8001f84:	d03e      	beq.n	8002004 <TSK_MediumFrequencyTaskM1+0x204>
              if(! RUC_Exec(&RevUpControlM1))
 8001f86:	4844      	ldr	r0, [pc, #272]	@ (8002098 <TSK_MediumFrequencyTaskM1+0x298>)
 8001f88:	f006 fc24 	bl	80087d4 <RUC_Exec>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	2800      	cmp	r0, #0
 8001f90:	d142      	bne.n	8002018 <TSK_MediumFrequencyTaskM1+0x218>
                MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001f92:	4840      	ldr	r0, [pc, #256]	@ (8002094 <TSK_MediumFrequencyTaskM1+0x294>)
 8001f94:	2110      	movs	r1, #16
 8001f96:	f7ff fc59 	bl	800184c <MCI_FaultProcessing>
              (void)VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001f9a:	4844      	ldr	r0, [pc, #272]	@ (80020ac <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001f9c:	f10d 0106 	add.w	r1, sp, #6
 8001fa0:	f006 fe02 	bl	8008ba8 <VSS_CalcAvrgMecSpeedUnit>
              if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 8001fa4:	483c      	ldr	r0, [pc, #240]	@ (8002098 <TSK_MediumFrequencyTaskM1+0x298>)
 8001fa6:	f006 fc65 	bl	8008874 <RUC_FirstAccelerationStageReached>
 8001faa:	2800      	cmp	r0, #0
 8001fac:	f43f af39 	beq.w	8001e22 <TSK_MediumFrequencyTaskM1+0x22>
                ObserverConverged = BADC_IsObserverConverged( &Bemf_ADC_M1);
 8001fb0:	4837      	ldr	r0, [pc, #220]	@ (8002090 <TSK_MediumFrequencyTaskM1+0x290>)
 8001fb2:	f005 fdcb 	bl	8007b4c <BADC_IsObserverConverged>
 8001fb6:	4605      	mov	r5, r0
                (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 8001fb8:	4629      	mov	r1, r5
 8001fba:	483c      	ldr	r0, [pc, #240]	@ (80020ac <TSK_MediumFrequencyTaskM1+0x2ac>)
 8001fbc:	f006 fe82 	bl	8008cc4 <VSS_SetStartTransition>
            if (ObserverConverged)
 8001fc0:	2d00      	cmp	r5, #0
 8001fc2:	f43f af2e 	beq.w	8001e22 <TSK_MediumFrequencyTaskM1+0x22>
              Mci[M1].State = SWITCH_OVER;
 8001fc6:	2313      	movs	r3, #19
 8001fc8:	76e3      	strb	r3, [r4, #27]
 8001fca:	e72a      	b.n	8001e22 <TSK_MediumFrequencyTaskM1+0x22>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8001fcc:	7ea3      	ldrb	r3, [r4, #26]
 8001fce:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	f47f af25 	bne.w	8001e22 <TSK_MediumFrequencyTaskM1+0x22>
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8001fd8:	482e      	ldr	r0, [pc, #184]	@ (8002094 <TSK_MediumFrequencyTaskM1+0x294>)
 8001fda:	f7ff fcb9 	bl	8001950 <MCI_GetImposedMotorDirection>
 8001fde:	4601      	mov	r1, r0
 8001fe0:	482d      	ldr	r0, [pc, #180]	@ (8002098 <TSK_MediumFrequencyTaskM1+0x298>)
 8001fe2:	f006 fb9f 	bl	8008724 <RUC_Clear>
              RUC_UpdatePulse(&RevUpControlM1, &BusVoltageSensor_M1._Super);
 8001fe6:	4932      	ldr	r1, [pc, #200]	@ (80020b0 <TSK_MediumFrequencyTaskM1+0x2b0>)
 8001fe8:	482b      	ldr	r0, [pc, #172]	@ (8002098 <TSK_MediumFrequencyTaskM1+0x298>)
 8001fea:	f006 fbe7 	bl	80087bc <RUC_UpdatePulse>
              PWMC_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8001fee:	4b2b      	ldr	r3, [pc, #172]	@ (800209c <TSK_MediumFrequencyTaskM1+0x29c>)
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	6818      	ldr	r0, [r3, #0]
 8001ff4:	f006 f9c8 	bl	8008388 <PWMC_TurnOnLowSides>
              TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 8001ff8:	2014      	movs	r0, #20
 8001ffa:	f7ff fd07 	bl	8001a0c <TSK_SetChargeBootCapDelayM1>
              Mci[M1].State = CHARGE_BOOT_CAP;
 8001ffe:	2310      	movs	r3, #16
 8002000:	76e3      	strb	r3, [r4, #27]
 8002002:	e70e      	b.n	8001e22 <TSK_MediumFrequencyTaskM1+0x22>
  SIX_STEP_Clear(motor);
 8002004:	2000      	movs	r0, #0
 8002006:	f7ff fe85 	bl	8001d14 <SIX_STEP_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 800200a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800200e:	f7ff fd0d 	bl	8001a2c <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8002012:	2308      	movs	r3, #8
 8002014:	76e3      	strb	r3, [r4, #27]
}
 8002016:	e704      	b.n	8001e22 <TSK_MediumFrequencyTaskM1+0x22>
                (void) BADC_CalcRevUpDemagTime (&Bemf_ADC_M1);
 8002018:	481d      	ldr	r0, [pc, #116]	@ (8002090 <TSK_MediumFrequencyTaskM1+0x290>)
 800201a:	f005 fe01 	bl	8007c20 <BADC_CalcRevUpDemagTime>
                SixStepVars[M1].DutyCycleRef = STC_CalcSpeedReference( pSTC[M1] );
 800201e:	4b21      	ldr	r3, [pc, #132]	@ (80020a4 <TSK_MediumFrequencyTaskM1+0x2a4>)
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	f006 fcbf 	bl	80089a4 <STC_CalcSpeedReference>
 8002026:	4b20      	ldr	r3, [pc, #128]	@ (80020a8 <TSK_MediumFrequencyTaskM1+0x2a8>)
 8002028:	8018      	strh	r0, [r3, #0]
 800202a:	e7b6      	b.n	8001f9a <TSK_MediumFrequencyTaskM1+0x19a>
                LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 800202c:	481f      	ldr	r0, [pc, #124]	@ (80020ac <TSK_MediumFrequencyTaskM1+0x2ac>)
 800202e:	f10d 0106 	add.w	r1, sp, #6
 8002032:	f006 fdb9 	bl	8008ba8 <VSS_CalcAvrgMecSpeedUnit>
 8002036:	4605      	mov	r5, r0
                tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 8002038:	481c      	ldr	r0, [pc, #112]	@ (80020ac <TSK_MediumFrequencyTaskM1+0x2ac>)
 800203a:	f006 fe51 	bl	8008ce0 <VSS_TransitionEnded>
                LoopClosed = LoopClosed || tempBool;
 800203e:	b915      	cbnz	r5, 8002046 <TSK_MediumFrequencyTaskM1+0x246>
 8002040:	2800      	cmp	r0, #0
 8002042:	f43f aeee 	beq.w	8001e22 <TSK_MediumFrequencyTaskM1+0x22>
                                        (((int32_t)SixStepVars[M1].DutyCycleRef * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8002046:	4b18      	ldr	r3, [pc, #96]	@ (80020a8 <TSK_MediumFrequencyTaskM1+0x2a8>)
 8002048:	481a      	ldr	r0, [pc, #104]	@ (80020b4 <TSK_MediumFrequencyTaskM1+0x2b4>)
 800204a:	881d      	ldrh	r5, [r3, #0]
 800204c:	f006 f85a 	bl	8008104 <PID_GetKIDivisor>
 8002050:	b201      	sxth	r1, r0
                    PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8002052:	fb05 f101 	mul.w	r1, r5, r1
                    STC_SetSpeedSensor(pSTC[M1], &Bemf_ADC_M1._Super); /* Observer has converged */
 8002056:	4d13      	ldr	r5, [pc, #76]	@ (80020a4 <TSK_MediumFrequencyTaskM1+0x2a4>)
                    PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8002058:	4816      	ldr	r0, [pc, #88]	@ (80020b4 <TSK_MediumFrequencyTaskM1+0x2b4>)
 800205a:	f006 f849 	bl	80080f0 <PID_SetIntegralTerm>
                    STC_SetSpeedSensor(pSTC[M1], &Bemf_ADC_M1._Super); /* Observer has converged */
 800205e:	490c      	ldr	r1, [pc, #48]	@ (8002090 <TSK_MediumFrequencyTaskM1+0x290>)
 8002060:	6828      	ldr	r0, [r5, #0]
 8002062:	f006 fc2b 	bl	80088bc <STC_SetSpeedSensor>
                    SixStep_InitAdditionalMethods(M1);
 8002066:	2000      	movs	r0, #0
 8002068:	f7ff feb4 	bl	8001dd4 <SixStep_InitAdditionalMethods>
                    SixStep_CalcSpeedRef(M1);
 800206c:	2000      	movs	r0, #0
 800206e:	f7ff feb3 	bl	8001dd8 <SixStep_CalcSpeedRef>
                    BADC_SetLoopClosed(&Bemf_ADC_M1);
 8002072:	4807      	ldr	r0, [pc, #28]	@ (8002090 <TSK_MediumFrequencyTaskM1+0x290>)
 8002074:	f005 fe08 	bl	8007c88 <BADC_SetLoopClosed>
                    PWMC_DisableHighFreqTask( &PWM_Handle_M1 );
 8002078:	4809      	ldr	r0, [pc, #36]	@ (80020a0 <TSK_MediumFrequencyTaskM1+0x2a0>)
 800207a:	f006 fa1b 	bl	80084b4 <PWMC_DisableHighFreqTask>
                    STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 800207e:	6828      	ldr	r0, [r5, #0]
 8002080:	f006 fce6 	bl	8008a50 <STC_ForceSpeedReferenceToCurrentSpeed>
                    MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8002084:	4803      	ldr	r0, [pc, #12]	@ (8002094 <TSK_MediumFrequencyTaskM1+0x294>)
 8002086:	f7ff fbed 	bl	8001864 <MCI_ExecBufferedCommands>
                    Mci[M1].State = RUN;
 800208a:	2306      	movs	r3, #6
 800208c:	76e3      	strb	r3, [r4, #27]
                }
 800208e:	e6c8      	b.n	8001e22 <TSK_MediumFrequencyTaskM1+0x22>
 8002090:	2000005c 	.word	0x2000005c
 8002094:	20000000 	.word	0x20000000
 8002098:	2000015c 	.word	0x2000015c
 800209c:	20000770 	.word	0x20000770
 80020a0:	20000028 	.word	0x20000028
 80020a4:	20000024 	.word	0x20000024
 80020a8:	20000768 	.word	0x20000768
 80020ac:	20000268 	.word	0x20000268
 80020b0:	20000210 	.word	0x20000210
 80020b4:	200001e4 	.word	0x200001e4

080020b8 <SIX_STEP_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t SIX_STEP_HighFrequencyTask(uint8_t bMotorNbr)
{
 80020b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */

  uint16_t hSixStepReturn;
  if(RUN != Mci[M1].State) /*  only for sensor-less*/
 80020bc:	4b38      	ldr	r3, [pc, #224]	@ (80021a0 <SIX_STEP_HighFrequencyTask+0xe8>)
 80020be:	7edb      	ldrb	r3, [r3, #27]
 80020c0:	2b06      	cmp	r3, #6
{
 80020c2:	b082      	sub	sp, #8
 80020c4:	4605      	mov	r5, r0
  if(RUN != Mci[M1].State) /*  only for sensor-less*/
 80020c6:	d00d      	beq.n	80020e4 <SIX_STEP_HighFrequencyTask+0x2c>
  {
    if (START == Mci[M1].State)
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d046      	beq.n	800215a <SIX_STEP_HighFrequencyTask+0xa2>
    {
      if (0U == RUC_IsAlignStageNow(&RevUpControlM1))
      {
        PWMC_SetAlignFlag(&PWM_Handle_M1, 0);
 80020cc:	4835      	ldr	r0, [pc, #212]	@ (80021a4 <SIX_STEP_HighFrequencyTask+0xec>)
 80020ce:	2100      	movs	r1, #0
 80020d0:	f006 f9f8 	bl	80084c4 <PWMC_SetAlignFlag>
static inline int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 80020d4:	4834      	ldr	r0, [pc, #208]	@ (80021a8 <SIX_STEP_HighFrequencyTask+0xf0>)
    else
    {
      PWMC_SetAlignFlag(&PWM_Handle_M1, 0);
    }
    int16_t hObsAngle = SPD_GetElAngle(&VirtualSpeedSensorM1._Super);
    (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 80020d6:	f10d 0106 	add.w	r1, sp, #6
    int16_t hObsAngle = SPD_GetElAngle(&VirtualSpeedSensorM1._Super);
 80020da:	8883      	ldrh	r3, [r0, #4]
 80020dc:	f8ad 3006 	strh.w	r3, [sp, #6]
    (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 80020e0:	f006 fd10 	bl	8008b04 <VSS_CalcElAngle>
  }
  (void)BADC_CalcElAngle (&Bemf_ADC_M1);
 80020e4:	4c31      	ldr	r4, [pc, #196]	@ (80021ac <SIX_STEP_HighFrequencyTask+0xf4>)
  int16_t hElAngle, hSpeed, hDirection;
  SpeednPosFdbk_Handle_t *speedHandle;
  RCM_ReadOngoingConv();
  RCM_ExecNextConv();
  hDirection = RUC_GetDirection(&RevUpControlM1);
  PWMC_SetPhaseVoltage( pwmcHandle[M1], SixStepVars[M1].DutyCycleRef );
 80020e6:	4e32      	ldr	r6, [pc, #200]	@ (80021b0 <SIX_STEP_HighFrequencyTask+0xf8>)
  (void)BADC_CalcElAngle (&Bemf_ADC_M1);
 80020e8:	4620      	mov	r0, r4
 80020ea:	f005 fd33 	bl	8007b54 <BADC_CalcElAngle>
  RCM_ReadOngoingConv();
 80020ee:	f001 fa81 	bl	80035f4 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 80020f2:	f001 fa3b 	bl	800356c <RCM_ExecNextConv>
  hDirection = RUC_GetDirection(&RevUpControlM1);
 80020f6:	482f      	ldr	r0, [pc, #188]	@ (80021b4 <SIX_STEP_HighFrequencyTask+0xfc>)
 80020f8:	f006 fbc6 	bl	8008888 <RUC_GetDirection>
  PWMC_SetPhaseVoltage( pwmcHandle[M1], SixStepVars[M1].DutyCycleRef );
 80020fc:	4b2e      	ldr	r3, [pc, #184]	@ (80021b8 <SIX_STEP_HighFrequencyTask+0x100>)
 80020fe:	8831      	ldrh	r1, [r6, #0]
  hDirection = RUC_GetDirection(&RevUpControlM1);
 8002100:	4680      	mov	r8, r0
  PWMC_SetPhaseVoltage( pwmcHandle[M1], SixStepVars[M1].DutyCycleRef );
 8002102:	6818      	ldr	r0, [r3, #0]
 8002104:	f006 f894 	bl	8008230 <PWMC_SetPhaseVoltage>
  if  (false == Bemf_ADC_M1.IsLoopClosed)
 8002108:	f894 3067 	ldrb.w	r3, [r4, #103]	@ 0x67
 800210c:	2b00      	cmp	r3, #0
 800210e:	d131      	bne.n	8002174 <SIX_STEP_HighFrequencyTask+0xbc>
  {
    speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002110:	4b2a      	ldr	r3, [pc, #168]	@ (80021bc <SIX_STEP_HighFrequencyTask+0x104>)
 8002112:	681f      	ldr	r7, [r3, #0]
 8002114:	b107      	cbz	r7, 8002118 <SIX_STEP_HighFrequencyTask+0x60>
 8002116:	697f      	ldr	r7, [r7, #20]
    if(false == BADC_IsObserverConverged(&Bemf_ADC_M1))
 8002118:	4824      	ldr	r0, [pc, #144]	@ (80021ac <SIX_STEP_HighFrequencyTask+0xf4>)
 800211a:	f005 fd17 	bl	8007b4c <BADC_IsObserverConverged>
 800211e:	b1c8      	cbz	r0, 8002154 <SIX_STEP_HighFrequencyTask+0x9c>
 8002120:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
    }
    else
    {
      hElAngle = SPD_GetElAngle(&Bemf_ADC_M1._Super);
    }
    hSpeed = SPD_GetElSpeedDpp(speedHandle);
 8002124:	4638      	mov	r0, r7
 8002126:	f006 fca1 	bl	8008a6c <SPD_GetElSpeedDpp>

    if (hDirection > 0)
    {
      SixStepVars[M1].qElAngle = hElAngle + S16_90_PHASE_SHIFT;
 800212a:	b2a4      	uxth	r4, r4
    if (hDirection > 0)
 800212c:	f1b8 0f00 	cmp.w	r8, #0
      SixStepVars[M1].qElAngle = hElAngle + S16_90_PHASE_SHIFT;
 8002130:	bfcc      	ite	gt
 8002132:	f504 4480 	addgt.w	r4, r4, #16384	@ 0x4000
    }
    else
    {
      SixStepVars[M1].qElAngle = hElAngle - S16_90_PHASE_SHIFT;
 8002136:	f5a4 4480 	suble.w	r4, r4, #16384	@ 0x4000
 800213a:	b223      	sxth	r3, r4
    }
    PWM_Handle_M1.hElAngle = SixStepVars[M1].qElAngle;
 800213c:	4c19      	ldr	r4, [pc, #100]	@ (80021a4 <SIX_STEP_HighFrequencyTask+0xec>)
 800213e:	80f3      	strh	r3, [r6, #6]
    hSpeed = SPD_GetElSpeedDpp(speedHandle);
 8002140:	4607      	mov	r7, r0
    if (PWMC_ElAngleToStep(&PWM_Handle_M1))
 8002142:	4620      	mov	r0, r4
    PWM_Handle_M1.hElAngle = SixStepVars[M1].qElAngle;
 8002144:	8263      	strh	r3, [r4, #18]
    if (PWMC_ElAngleToStep(&PWM_Handle_M1))
 8002146:	f006 f9bf 	bl	80084c8 <PWMC_ElAngleToStep>
 800214a:	b9f0      	cbnz	r0, 800218a <SIX_STEP_HighFrequencyTask+0xd2>
}
 800214c:	4628      	mov	r0, r5
 800214e:	b002      	add	sp, #8
 8002150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002154:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8002158:	e7e4      	b.n	8002124 <SIX_STEP_HighFrequencyTask+0x6c>
      if (0U == RUC_IsAlignStageNow(&RevUpControlM1))
 800215a:	4816      	ldr	r0, [pc, #88]	@ (80021b4 <SIX_STEP_HighFrequencyTask+0xfc>)
 800215c:	f006 fb7c 	bl	8008858 <RUC_IsAlignStageNow>
 8002160:	2800      	cmp	r0, #0
 8002162:	d0b3      	beq.n	80020cc <SIX_STEP_HighFrequencyTask+0x14>
        PWMC_SetAlignFlag(&PWM_Handle_M1, RUC_GetDirection(&RevUpControlM1));
 8002164:	4813      	ldr	r0, [pc, #76]	@ (80021b4 <SIX_STEP_HighFrequencyTask+0xfc>)
 8002166:	f006 fb8f 	bl	8008888 <RUC_GetDirection>
 800216a:	4601      	mov	r1, r0
 800216c:	480d      	ldr	r0, [pc, #52]	@ (80021a4 <SIX_STEP_HighFrequencyTask+0xec>)
 800216e:	f006 f9a9 	bl	80084c4 <PWMC_SetAlignFlag>
 8002172:	e7af      	b.n	80020d4 <SIX_STEP_HighFrequencyTask+0x1c>
      BADC_StepChangeEvent(&Bemf_ADC_M1, hSpeed);
    }
  }
  else
  {
    PWMC_ForceNextStep( &PWM_Handle_M1, hDirection );
 8002174:	4641      	mov	r1, r8
 8002176:	480b      	ldr	r0, [pc, #44]	@ (80021a4 <SIX_STEP_HighFrequencyTask+0xec>)
 8002178:	f006 f9de 	bl	8008538 <PWMC_ForceNextStep>
    PWMC_LoadNextStep( &PWM_Handle_M1 );
 800217c:	4809      	ldr	r0, [pc, #36]	@ (80021a4 <SIX_STEP_HighFrequencyTask+0xec>)
 800217e:	f006 f85f 	bl	8008240 <PWMC_LoadNextStep>
}
 8002182:	4628      	mov	r0, r5
 8002184:	b002      	add	sp, #8
 8002186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      PWMC_LoadNextStep( &PWM_Handle_M1 );
 800218a:	4620      	mov	r0, r4
 800218c:	f006 f858 	bl	8008240 <PWMC_LoadNextStep>
      BADC_StepChangeEvent(&Bemf_ADC_M1, hSpeed);
 8002190:	4806      	ldr	r0, [pc, #24]	@ (80021ac <SIX_STEP_HighFrequencyTask+0xf4>)
 8002192:	4639      	mov	r1, r7
 8002194:	f005 fd00 	bl	8007b98 <BADC_StepChangeEvent>
}
 8002198:	4628      	mov	r0, r5
 800219a:	b002      	add	sp, #8
 800219c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021a0:	20000000 	.word	0x20000000
 80021a4:	20000028 	.word	0x20000028
 80021a8:	20000268 	.word	0x20000268
 80021ac:	2000005c 	.word	0x2000005c
 80021b0:	20000768 	.word	0x20000768
 80021b4:	2000015c 	.word	0x2000015c
 80021b8:	20000770 	.word	0x20000770
 80021bc:	20000024 	.word	0x20000024

080021c0 <SixStep_StepCommution>:
{
 80021c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  RCM_ReadOngoingConv();
 80021c2:	f001 fa17 	bl	80035f4 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 80021c6:	f001 f9d1 	bl	800356c <RCM_ExecNextConv>
  hDirection = RUC_GetDirection(&RevUpControlM1);
 80021ca:	4821      	ldr	r0, [pc, #132]	@ (8002250 <SixStep_StepCommution+0x90>)
  PWMC_SetPhaseVoltage( pwmcHandle[M1], SixStepVars[M1].DutyCycleRef );
 80021cc:	4f21      	ldr	r7, [pc, #132]	@ (8002254 <SixStep_StepCommution+0x94>)
  if  (false == Bemf_ADC_M1.IsLoopClosed)
 80021ce:	4c22      	ldr	r4, [pc, #136]	@ (8002258 <SixStep_StepCommution+0x98>)
  hDirection = RUC_GetDirection(&RevUpControlM1);
 80021d0:	f006 fb5a 	bl	8008888 <RUC_GetDirection>
  PWMC_SetPhaseVoltage( pwmcHandle[M1], SixStepVars[M1].DutyCycleRef );
 80021d4:	4b21      	ldr	r3, [pc, #132]	@ (800225c <SixStep_StepCommution+0x9c>)
 80021d6:	8839      	ldrh	r1, [r7, #0]
  hDirection = RUC_GetDirection(&RevUpControlM1);
 80021d8:	4605      	mov	r5, r0
  PWMC_SetPhaseVoltage( pwmcHandle[M1], SixStepVars[M1].DutyCycleRef );
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	f006 f828 	bl	8008230 <PWMC_SetPhaseVoltage>
  if  (false == Bemf_ADC_M1.IsLoopClosed)
 80021e0:	f894 3067 	ldrb.w	r3, [r4, #103]	@ 0x67
 80021e4:	bb0b      	cbnz	r3, 800222a <SixStep_StepCommution+0x6a>
    speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80021e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002260 <SixStep_StepCommution+0xa0>)
 80021e8:	681e      	ldr	r6, [r3, #0]
 80021ea:	b106      	cbz	r6, 80021ee <SixStep_StepCommution+0x2e>
 80021ec:	6976      	ldr	r6, [r6, #20]
    if(false == BADC_IsObserverConverged(&Bemf_ADC_M1))
 80021ee:	481a      	ldr	r0, [pc, #104]	@ (8002258 <SixStep_StepCommution+0x98>)
 80021f0:	f005 fcac 	bl	8007b4c <BADC_IsObserverConverged>
 80021f4:	b1b0      	cbz	r0, 8002224 <SixStep_StepCommution+0x64>
 80021f6:	f9b4 4004 	ldrsh.w	r4, [r4, #4]
    hSpeed = SPD_GetElSpeedDpp(speedHandle);
 80021fa:	4630      	mov	r0, r6
 80021fc:	f006 fc36 	bl	8008a6c <SPD_GetElSpeedDpp>
      SixStepVars[M1].qElAngle = hElAngle + S16_90_PHASE_SHIFT;
 8002200:	b2a4      	uxth	r4, r4
    if (hDirection > 0)
 8002202:	2d00      	cmp	r5, #0
      SixStepVars[M1].qElAngle = hElAngle + S16_90_PHASE_SHIFT;
 8002204:	bfcc      	ite	gt
 8002206:	f504 4480 	addgt.w	r4, r4, #16384	@ 0x4000
      SixStepVars[M1].qElAngle = hElAngle - S16_90_PHASE_SHIFT;
 800220a:	f5a4 4480 	suble.w	r4, r4, #16384	@ 0x4000
 800220e:	b223      	sxth	r3, r4
    PWM_Handle_M1.hElAngle = SixStepVars[M1].qElAngle;
 8002210:	4c14      	ldr	r4, [pc, #80]	@ (8002264 <SixStep_StepCommution+0xa4>)
 8002212:	80fb      	strh	r3, [r7, #6]
    hSpeed = SPD_GetElSpeedDpp(speedHandle);
 8002214:	4606      	mov	r6, r0
    if (PWMC_ElAngleToStep(&PWM_Handle_M1))
 8002216:	4620      	mov	r0, r4
    PWM_Handle_M1.hElAngle = SixStepVars[M1].qElAngle;
 8002218:	8263      	strh	r3, [r4, #18]
    if (PWMC_ElAngleToStep(&PWM_Handle_M1))
 800221a:	f006 f955 	bl	80084c8 <PWMC_ElAngleToStep>
 800221e:	b968      	cbnz	r0, 800223c <SixStep_StepCommution+0x7c>
  }
  return(hCodeError);
}
 8002220:	2000      	movs	r0, #0
 8002222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002224:	f9b6 4004 	ldrsh.w	r4, [r6, #4]
 8002228:	e7e7      	b.n	80021fa <SixStep_StepCommution+0x3a>
    PWMC_ForceNextStep( &PWM_Handle_M1, hDirection );
 800222a:	4629      	mov	r1, r5
 800222c:	480d      	ldr	r0, [pc, #52]	@ (8002264 <SixStep_StepCommution+0xa4>)
 800222e:	f006 f983 	bl	8008538 <PWMC_ForceNextStep>
    PWMC_LoadNextStep( &PWM_Handle_M1 );
 8002232:	480c      	ldr	r0, [pc, #48]	@ (8002264 <SixStep_StepCommution+0xa4>)
 8002234:	f006 f804 	bl	8008240 <PWMC_LoadNextStep>
}
 8002238:	2000      	movs	r0, #0
 800223a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      PWMC_LoadNextStep( &PWM_Handle_M1 );
 800223c:	4620      	mov	r0, r4
 800223e:	f005 ffff 	bl	8008240 <PWMC_LoadNextStep>
      BADC_StepChangeEvent(&Bemf_ADC_M1, hSpeed);
 8002242:	4805      	ldr	r0, [pc, #20]	@ (8002258 <SixStep_StepCommution+0x98>)
 8002244:	4631      	mov	r1, r6
 8002246:	f005 fca7 	bl	8007b98 <BADC_StepChangeEvent>
}
 800224a:	2000      	movs	r0, #0
 800224c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800224e:	bf00      	nop
 8002250:	2000015c 	.word	0x2000015c
 8002254:	20000768 	.word	0x20000768
 8002258:	2000005c 	.word	0x2000005c
 800225c:	20000770 	.word	0x20000770
 8002260:	20000024 	.word	0x20000024
 8002264:	20000028 	.word	0x20000028

08002268 <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8002268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800226c:	b089      	sub	sp, #36	@ 0x24
  else
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
 800226e:	6885      	ldr	r5, [r0, #8]
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002270:	4b33      	ldr	r3, [pc, #204]	@ (8002340 <RI_SetRegCommandParser+0xd8>)
 8002272:	9306      	str	r3, [sp, #24]
    uint16_t size = 0U;
 8002274:	f04f 0800 	mov.w	r8, #0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002278:	4b32      	ldr	r3, [pc, #200]	@ (8002344 <RI_SetRegCommandParser+0xdc>)
    uint8_t * rxData = pHandle->rxBuffer;
 800227a:	6844      	ldr	r4, [r0, #4]
    int16_t rxLength = pHandle->rxLength;
 800227c:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    uint16_t size = 0U;
 8002280:	f8ad 8016 	strh.w	r8, [sp, #22]
{
 8002284:	4606      	mov	r6, r0
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 8002286:	f8a0 800e 	strh.w	r8, [r0, #14]
 800228a:	186f      	adds	r7, r5, r1
  uint8_t retVal = MCP_CMD_OK;
 800228c:	f8cd 800c 	str.w	r8, [sp, #12]
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002290:	9307      	str	r3, [sp, #28]
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
        /* Prepare next data*/
        rxLength = (int16_t) (rxLength - size);
        rxData = rxData+size;
        /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 8002292:	f1c5 0901 	rsb	r9, r5, #1
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002296:	f1a2 0a02 	sub.w	sl, r2, #2
    while (rxLength > 0)
 800229a:	2a00      	cmp	r2, #0
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 800229c:	fa0f fe8a 	sxth.w	lr, sl
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 80022a0:	f10d 0316 	add.w	r3, sp, #22
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 80022a4:	fa1f fa8a 	uxth.w	sl, sl
    while (rxLength > 0)
 80022a8:	dd36      	ble.n	8002318 <RI_SetRegCommandParser+0xb0>
      regID = *dataElementID & REG_MASK;
 80022aa:	f834 cb02 	ldrh.w	ip, [r4], #2
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 80022ae:	f10d 0820 	add.w	r8, sp, #32
      regID = *dataElementID & REG_MASK;
 80022b2:	f02c 0007 	bic.w	r0, ip, #7
      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 80022b6:	f00c 0b07 	and.w	fp, ip, #7
      if (motorID > NBR_OF_MOTORS)
 80022ba:	f01c 0f06 	tst.w	ip, #6
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 80022be:	4622      	mov	r2, r4
      regID = *dataElementID & REG_MASK;
 80022c0:	b280      	uxth	r0, r0
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 80022c2:	f00c 0138 	and.w	r1, ip, #56	@ 0x38
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 80022c6:	eb08 0b8b 	add.w	fp, r8, fp, lsl #2
      if (motorID > NBR_OF_MOTORS)
 80022ca:	d12d      	bne.n	8002328 <RI_SetRegCommandParser+0xc0>
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 80022cc:	f85b bc08 	ldr.w	fp, [fp, #-8]
 80022d0:	f8cd e000 	str.w	lr, [sp]
 80022d4:	47d8      	blx	fp
        rxLength = (int16_t) (rxLength - size);
 80022d6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
        if ((1U == number_of_item) && (0 == rxLength))
 80022da:	eb05 0309 	add.w	r3, r5, r9
 80022de:	b2db      	uxtb	r3, r3
        rxLength = (int16_t) (rxLength - size);
 80022e0:	ebaa 0201 	sub.w	r2, sl, r1
        if ((1U == number_of_item) && (0 == rxLength))
 80022e4:	2b01      	cmp	r3, #1
        rxLength = (int16_t) (rxLength - size);
 80022e6:	b212      	sxth	r2, r2
        rxData = rxData+size;
 80022e8:	440c      	add	r4, r1
        if ((1U == number_of_item) && (0 == rxLength))
 80022ea:	d012      	beq.n	8002312 <RI_SetRegCommandParser+0xaa>
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 80022ec:	42bd      	cmp	r5, r7
 80022ee:	d021      	beq.n	8002334 <RI_SetRegCommandParser+0xcc>
          {
            *txData = accessResult;
 80022f0:	f805 0b01 	strb.w	r0, [r5], #1
            txData = txData+1;
            pHandle->txLength++;
 80022f4:	89f3      	ldrh	r3, [r6, #14]
 80022f6:	3301      	adds	r3, #1
 80022f8:	81f3      	strh	r3, [r6, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80022fa:	2800      	cmp	r0, #0
 80022fc:	d0cb      	beq.n	8002296 <RI_SetRegCommandParser+0x2e>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 80022fe:	2807      	cmp	r0, #7
 8002300:	d012      	beq.n	8002328 <RI_SetRegCommandParser+0xc0>
 8002302:	2301      	movs	r3, #1
 8002304:	280a      	cmp	r0, #10
 8002306:	9303      	str	r3, [sp, #12]
 8002308:	d1c5      	bne.n	8002296 <RI_SetRegCommandParser+0x2e>
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 800230a:	9803      	ldr	r0, [sp, #12]
 800230c:	b009      	add	sp, #36	@ 0x24
 800230e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((1U == number_of_item) && (0 == rxLength))
 8002312:	2a00      	cmp	r2, #0
 8002314:	d1ea      	bne.n	80022ec <RI_SetRegCommandParser+0x84>
 8002316:	9003      	str	r0, [sp, #12]
    if (MCP_CMD_OK == retVal)
 8002318:	9b03      	ldr	r3, [sp, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f5      	bne.n	800230a <RI_SetRegCommandParser+0xa2>
}
 800231e:	9803      	ldr	r0, [sp, #12]
      pHandle->txLength = 0;
 8002320:	81f3      	strh	r3, [r6, #14]
}
 8002322:	b009      	add	sp, #36	@ 0x24
 8002324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        retVal = MCP_CMD_NOK;
 8002328:	2301      	movs	r3, #1
 800232a:	9303      	str	r3, [sp, #12]
}
 800232c:	9803      	ldr	r0, [sp, #12]
 800232e:	b009      	add	sp, #36	@ 0x24
 8002330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002334:	2308      	movs	r3, #8
 8002336:	9303      	str	r3, [sp, #12]
}
 8002338:	9803      	ldr	r0, [sp, #12]
 800233a:	b009      	add	sp, #36	@ 0x24
 800233c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002340:	0800256d 	.word	0x0800256d
 8002344:	0800266d 	.word	0x0800266d

08002348 <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8002348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800234c:	b086      	sub	sp, #24
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    uint16_t size = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	f8ad 300e 	strh.w	r3, [sp, #14]

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
    pHandle->txLength = 0;
 8002354:	81c3      	strh	r3, [r0, #14]
    uint16_t rxLength = pHandle->rxLength;
 8002356:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 800235a:	4b1c      	ldr	r3, [pc, #112]	@ (80023cc <RI_GetRegCommandParser+0x84>)
 800235c:	9304      	str	r3, [sp, #16]
 800235e:	4b1c      	ldr	r3, [pc, #112]	@ (80023d0 <RI_GetRegCommandParser+0x88>)
    uint8_t * rxData = pHandle->rxBuffer;
 8002360:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 8002364:	6886      	ldr	r6, [r0, #8]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8002366:	9305      	str	r3, [sp, #20]
    while (rxLength > 0U)
 8002368:	f1b8 0f00 	cmp.w	r8, #0
 800236c:	d029      	beq.n	80023c2 <RI_GetRegCommandParser+0x7a>
 800236e:	4607      	mov	r7, r0
 8002370:	b20c      	sxth	r4, r1
    uint8_t * rxData = pHandle->rxBuffer;
 8002372:	464d      	mov	r5, r9
 8002374:	e012      	b.n	800239c <RI_GetRegCommandParser+0x54>
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002376:	f85e ac08 	ldr.w	sl, [lr, #-8]
 800237a:	9400      	str	r4, [sp, #0]
 800237c:	47d0      	blx	sl
        if (retVal == MCP_CMD_OK )
 800237e:	eba8 0305 	sub.w	r3, r8, r5
    while (rxLength > 0U)
 8002382:	fa19 f383 	uxtah	r3, r9, r3
 8002386:	b29b      	uxth	r3, r3
        if (retVal == MCP_CMD_OK )
 8002388:	b9e0      	cbnz	r0, 80023c4 <RI_GetRegCommandParser+0x7c>
        {
          /* Prepare next data */
          txData = txData+size;
 800238a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
          pHandle->txLength += size;
 800238e:	89fa      	ldrh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8002390:	1a64      	subs	r4, r4, r1
          pHandle->txLength += size;
 8002392:	440a      	add	r2, r1
          txData = txData+size;
 8002394:	440e      	add	r6, r1
          pHandle->txLength += size;
 8002396:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8002398:	b224      	sxth	r4, r4
    while (rxLength > 0U)
 800239a:	b19b      	cbz	r3, 80023c4 <RI_GetRegCommandParser+0x7c>
      regID = *dataElementID & REG_MASK;
 800239c:	f835 cb02 	ldrh.w	ip, [r5], #2
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 80023a0:	f10d 0a18 	add.w	sl, sp, #24
      regID = *dataElementID & REG_MASK;
 80023a4:	f02c 0007 	bic.w	r0, ip, #7
      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 80023a8:	f00c 0e07 	and.w	lr, ip, #7
      if (motorID > NBR_OF_MOTORS)
 80023ac:	f01c 0f06 	tst.w	ip, #6
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 80023b0:	f10d 030e 	add.w	r3, sp, #14
 80023b4:	4632      	mov	r2, r6
      regID = *dataElementID & REG_MASK;
 80023b6:	b280      	uxth	r0, r0
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 80023b8:	f00c 0138 	and.w	r1, ip, #56	@ 0x38
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 80023bc:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
      if (motorID > NBR_OF_MOTORS)
 80023c0:	d0d9      	beq.n	8002376 <RI_GetRegCommandParser+0x2e>
  uint8_t retVal = MCP_CMD_NOK;
 80023c2:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 80023c4:	b006      	add	sp, #24
 80023c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023ca:	bf00      	nop
 80023cc:	08002a3d 	.word	0x08002a3d
 80023d0:	08002b71 	.word	0x08002b71

080023d4 <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 80023d4:	b570      	push	{r4, r5, r6, lr}
 80023d6:	4604      	mov	r4, r0
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80023d8:	6845      	ldr	r5, [r0, #4]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 80023da:	6822      	ldr	r2, [r4, #0]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80023dc:	f835 3b02 	ldrh.w	r3, [r5], #2
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 80023e0:	8992      	ldrh	r2, [r2, #12]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80023e2:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 80023e4:	3a01      	subs	r2, #1
 80023e6:	b291      	uxth	r1, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80023e8:	f403 427f 	and.w	r2, r3, #65280	@ 0xff00
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80023ec:	3802      	subs	r0, #2
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80023ee:	f023 0c07 	bic.w	ip, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80023f2:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
{
 80023f6:	b082      	sub	sp, #8
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80023f8:	b280      	uxth	r0, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 80023fa:	fa1f fc8c 	uxth.w	ip, ip
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80023fe:	d039      	beq.n	8002474 <MCP_ReceivedPacket+0xa0>
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 8002400:	3b01      	subs	r3, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 8002402:	4e49      	ldr	r6, [pc, #292]	@ (8002528 <MCP_ReceivedPacket+0x154>)
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8002404:	6065      	str	r5, [r4, #4]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;
 800240e:	2500      	movs	r5, #0

    switch (command)
 8002410:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002414:	81a0      	strh	r0, [r4, #12]
    pHandle->txLength = 0U;
 8002416:	81e5      	strh	r5, [r4, #14]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8002418:	eb06 0683 	add.w	r6, r6, r3, lsl #2
    switch (command)
 800241c:	d867      	bhi.n	80024ee <MCP_ReceivedPacket+0x11a>
 800241e:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
 8002422:	d81e      	bhi.n	8002462 <MCP_ReceivedPacket+0x8e>
 8002424:	e8df f00c 	tbb	[pc, ip]
 8002428:	1d1d1d48 	.word	0x1d1d1d48
 800242c:	1d1d1d1d 	.word	0x1d1d1d1d
 8002430:	1d1d1d50 	.word	0x1d1d1d50
 8002434:	1d1d1d1d 	.word	0x1d1d1d1d
 8002438:	1d1d1d43 	.word	0x1d1d1d43
 800243c:	1d1d1d1d 	.word	0x1d1d1d1d
 8002440:	1d1d1d3b 	.word	0x1d1d1d3b
 8002444:	1d1d1d1d 	.word	0x1d1d1d1d
 8002448:	1d1d1d35 	.word	0x1d1d1d35
 800244c:	1d1d1d1d 	.word	0x1d1d1d1d
 8002450:	1d1d1d55 	.word	0x1d1d1d55
 8002454:	1d1d1d1d 	.word	0x1d1d1d1d
 8002458:	1d1d1d31 	.word	0x1d1d1d31
 800245c:	1d1d1d1d 	.word	0x1d1d1d1d
 8002460:	5d          	.byte	0x5d
 8002461:	00          	.byte	0x00
 8002462:	2300      	movs	r3, #0
 8002464:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002466:	68a2      	ldr	r2, [r4, #8]
 8002468:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 800246a:	89e3      	ldrh	r3, [r4, #14]
 800246c:	3301      	adds	r3, #1
 800246e:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 8002470:	b002      	add	sp, #8
 8002472:	bd70      	pop	{r4, r5, r6, pc}
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 8002474:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
    pHandle->txLength = 0U;
 8002478:	2300      	movs	r3, #0
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 800247a:	f1bc 0f01 	cmp.w	ip, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 800247e:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8002480:	6065      	str	r5, [r4, #4]
    pHandle->txLength = 0U;
 8002482:	81e3      	strh	r3, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8002484:	d93b      	bls.n	80024fe <MCP_ReceivedPacket+0x12a>
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8002486:	200d      	movs	r0, #13
 8002488:	e7ed      	b.n	8002466 <MCP_ReceivedPacket+0x92>
        if (IDLE == MCI_GetSTMState(pMCI))
 800248a:	4630      	mov	r0, r6
 800248c:	f7ff fa0c 	bl	80018a8 <MCI_GetSTMState>
 8002490:	b128      	cbz	r0, 800249e <MCP_ReceivedPacket+0xca>
          (void)MCI_StopMotor(pMCI);
 8002492:	4630      	mov	r0, r6
 8002494:	f7ff fa24 	bl	80018e0 <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002498:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800249a:	2000      	movs	r0, #0
 800249c:	e7e3      	b.n	8002466 <MCP_ReceivedPacket+0x92>
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 800249e:	4630      	mov	r0, r6
 80024a0:	f7ff fa08 	bl	80018b4 <MCI_StartMotor>
 80024a4:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80024a8:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 80024aa:	b2c0      	uxtb	r0, r0
 80024ac:	e7db      	b.n	8002466 <MCP_ReceivedPacket+0x92>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 80024ae:	4620      	mov	r0, r4
 80024b0:	f7ff ff4a 	bl	8002348 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80024b4:	89e3      	ldrh	r3, [r4, #14]
        break;
 80024b6:	e7d6      	b.n	8002466 <MCP_ReceivedPacket+0x92>
        *pHandle->txBuffer = MCP_VERSION;
 80024b8:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4U;
 80024ba:	2104      	movs	r1, #4
        *pHandle->txBuffer = MCP_VERSION;
 80024bc:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 80024be:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 80024c0:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80024c2:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80024c4:	2000      	movs	r0, #0
        break;
 80024c6:	e7ce      	b.n	8002466 <MCP_ReceivedPacket+0x92>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 80024c8:	4620      	mov	r0, r4
 80024ca:	f7ff fecd 	bl	8002268 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80024ce:	89e3      	ldrh	r3, [r4, #14]
        break;
 80024d0:	e7c9      	b.n	8002466 <MCP_ReceivedPacket+0x92>
        if (RUN == MCI_GetSTMState(pMCI))
 80024d2:	4630      	mov	r0, r6
 80024d4:	f7ff f9e8 	bl	80018a8 <MCI_GetSTMState>
 80024d8:	2806      	cmp	r0, #6
 80024da:	d01d      	beq.n	8002518 <MCP_ReceivedPacket+0x144>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80024dc:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80024de:	2000      	movs	r0, #0
 80024e0:	e7c1      	b.n	8002466 <MCP_ReceivedPacket+0x92>
        (void)MCI_FaultAcknowledged(pMCI);
 80024e2:	4630      	mov	r0, r6
 80024e4:	f7ff fa18 	bl	8001918 <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80024e8:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80024ea:	2000      	movs	r0, #0
        break;
 80024ec:	e7bb      	b.n	8002466 <MCP_ReceivedPacket+0x92>
    switch (command)
 80024ee:	f1bc 0f78 	cmp.w	ip, #120	@ 0x78
 80024f2:	d1b6      	bne.n	8002462 <MCP_ReceivedPacket+0x8e>
        HAL_NVIC_SystemReset();
 80024f4:	f002 fe2c 	bl	8005150 <HAL_NVIC_SystemReset>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80024f8:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80024fa:	4628      	mov	r0, r5
        break;
 80024fc:	e7b3      	b.n	8002466 <MCP_ReceivedPacket+0x92>
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80024fe:	4b0b      	ldr	r3, [pc, #44]	@ (800252c <MCP_ReceivedPacket+0x158>)
 8002500:	f853 602c 	ldr.w	r6, [r3, ip, lsl #2]
 8002504:	b176      	cbz	r6, 8002524 <MCP_ReceivedPacket+0x150>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8002506:	68a3      	ldr	r3, [r4, #8]
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	b20a      	sxth	r2, r1
 800250c:	f104 030e 	add.w	r3, r4, #14
 8002510:	4629      	mov	r1, r5
 8002512:	47b0      	blx	r6
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002514:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8002516:	e7a6      	b.n	8002466 <MCP_ReceivedPacket+0x92>
          MCI_StopRamp(pMCI);
 8002518:	4630      	mov	r0, r6
 800251a:	f7ff fa2d 	bl	8001978 <MCI_StopRamp>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800251e:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8002520:	2000      	movs	r0, #0
 8002522:	e7a0      	b.n	8002466 <MCP_ReceivedPacket+0x92>
 8002524:	4633      	mov	r3, r6
 8002526:	e7ae      	b.n	8002486 <MCP_ReceivedPacket+0xb2>
 8002528:	20000000 	.word	0x20000000
 800252c:	20000788 	.word	0x20000788

08002530 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002530:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8002532:	f003 fc91 	bl	8005e58 <HAL_RCC_GetHCLKFreq>
 8002536:	4b0a      	ldr	r3, [pc, #40]	@ (8002560 <MX_MotorControl_Init+0x30>)
 8002538:	fba3 3000 	umull	r3, r0, r3, r0
 800253c:	09c0      	lsrs	r0, r0, #7
 800253e:	f002 fe19 	bl	8005174 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8002542:	4b08      	ldr	r3, [pc, #32]	@ (8002564 <MX_MotorControl_Init+0x34>)
 8002544:	2200      	movs	r2, #0
 8002546:	6819      	ldr	r1, [r3, #0]
 8002548:	f04f 30ff 	mov.w	r0, #4294967295
 800254c:	f002 fdb6 	bl	80050bc <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8002550:	4805      	ldr	r0, [pc, #20]	@ (8002568 <MX_MotorControl_Init+0x38>)
 8002552:	f7ff fa25 	bl	80019a0 <MCboot>
  mc_lock_pins();
}
 8002556:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 800255a:	f7ff bb53 	b.w	8001c04 <mc_lock_pins>
 800255e:	bf00      	nop
 8002560:	10624dd3 	.word	0x10624dd3
 8002564:	20000484 	.word	0x20000484
 8002568:	20001a14 	.word	0x20001a14

0800256c <RI_SetRegisterGlobal>:
#include "mcp_config.h"
#include "mcpa.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 800256c:	b410      	push	{r4}
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 800256e:	3908      	subs	r1, #8
{
 8002570:	f9bd c004 	ldrsh.w	ip, [sp, #4]
  switch(typeID)
 8002574:	2920      	cmp	r1, #32
 8002576:	d812      	bhi.n	800259e <RI_SetRegisterGlobal+0x32>
 8002578:	e8df f001 	tbb	[pc, r1]
 800257c:	11111117 	.word	0x11111117
 8002580:	11111111 	.word	0x11111111
 8002584:	11111121 	.word	0x11111121
 8002588:	11111111 	.word	0x11111111
 800258c:	1111112f 	.word	0x1111112f
 8002590:	11111111 	.word	0x11111111
 8002594:	11111139 	.word	0x11111139
 8002598:	11111111 	.word	0x11111111
 800259c:	4d          	.byte	0x4d
 800259d:	00          	.byte	0x00
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 800259e:	2200      	movs	r2, #0
 80025a0:	801a      	strh	r2, [r3, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 80025a2:	2007      	movs	r0, #7
      break;
    }
  }
  return (retVal);
}
 80025a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025a8:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 80025aa:	2848      	cmp	r0, #72	@ 0x48
      *size = 1;
 80025ac:	f04f 0201 	mov.w	r2, #1
          retVal = MCP_ERROR_RO_REG;
 80025b0:	bf14      	ite	ne
 80025b2:	2005      	movne	r0, #5
 80025b4:	2004      	moveq	r0, #4
}
 80025b6:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 1;
 80025ba:	801a      	strh	r2, [r3, #0]
}
 80025bc:	4770      	bx	lr
      switch (regID)
 80025be:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 80025c2:	d039      	beq.n	8002638 <RI_SetRegisterGlobal+0xcc>
 80025c4:	d942      	bls.n	800264c <RI_SetRegisterGlobal+0xe0>
 80025c6:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 80025ca:	d035      	beq.n	8002638 <RI_SetRegisterGlobal+0xcc>
 80025cc:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80025d0:	4290      	cmp	r0, r2
 80025d2:	bf14      	ite	ne
 80025d4:	2005      	movne	r0, #5
 80025d6:	2004      	moveq	r0, #4
 80025d8:	e02f      	b.n	800263a <RI_SetRegisterGlobal+0xce>
          retVal = MCP_ERROR_RO_REG;
 80025da:	2818      	cmp	r0, #24
      *size = 4;
 80025dc:	f04f 0204 	mov.w	r2, #4
          retVal = MCP_ERROR_RO_REG;
 80025e0:	bf14      	ite	ne
 80025e2:	2005      	movne	r0, #5
 80025e4:	4610      	moveq	r0, r2
}
 80025e6:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 4;
 80025ea:	801a      	strh	r2, [r3, #0]
}
 80025ec:	4770      	bx	lr
uint8_t RI_MovString(const char_t *srcString, char_t *destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */
 80025ee:	2101      	movs	r1, #1
 80025f0:	8019      	strh	r1, [r3, #0]

  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80025f2:	f992 0000 	ldrsb.w	r0, [r2]
 80025f6:	b328      	cbz	r0, 8002644 <RI_SetRegisterGlobal+0xd8>
 80025f8:	fa1f f08c 	uxth.w	r0, ip
 80025fc:	e003      	b.n	8002606 <RI_SetRegisterGlobal+0x9a>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 80025fe:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002600:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
 8002604:	b1f4      	cbz	r4, 8002644 <RI_SetRegisterGlobal+0xd8>
    *size = *size + 1U;
 8002606:	f101 0c01 	add.w	ip, r1, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800260a:	4281      	cmp	r1, r0
    *size = *size + 1U;
 800260c:	fa1f f18c 	uxth.w	r1, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002610:	d3f5      	bcc.n	80025fe <RI_SetRegisterGlobal+0x92>
      retVal = MCP_ERROR_RO_REG;
 8002612:	2004      	movs	r0, #4
 8002614:	e7c6      	b.n	80025a4 <RI_SetRegisterGlobal+0x38>
      *size = rawSize + 2U;
 8002616:	8812      	ldrh	r2, [r2, #0]
 8002618:	3202      	adds	r2, #2
 800261a:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 800261c:	fa1f fc8c 	uxth.w	ip, ip
 8002620:	4562      	cmp	r2, ip
      *size = rawSize + 2U;
 8002622:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 8002624:	d81a      	bhi.n	800265c <RI_SetRegisterGlobal+0xf0>
        switch (regID)
 8002626:	28a8      	cmp	r0, #168	@ 0xa8
 8002628:	d0f3      	beq.n	8002612 <RI_SetRegisterGlobal+0xa6>
 800262a:	d81b      	bhi.n	8002664 <RI_SetRegisterGlobal+0xf8>
 800262c:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002630:	2828      	cmp	r0, #40	@ 0x28
 8002632:	d0ee      	beq.n	8002612 <RI_SetRegisterGlobal+0xa6>
 8002634:	2005      	movs	r0, #5
 8002636:	e7b5      	b.n	80025a4 <RI_SetRegisterGlobal+0x38>
  uint8_t retVal = MCP_CMD_OK;
 8002638:	2000      	movs	r0, #0
      *size = 2;
 800263a:	2202      	movs	r2, #2
}
 800263c:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 2;
 8002640:	801a      	strh	r2, [r3, #0]
}
 8002642:	4770      	bx	lr
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 8002644:	2300      	movs	r3, #0
 8002646:	7013      	strb	r3, [r2, #0]
      retVal = MCP_ERROR_RO_REG;
 8002648:	2004      	movs	r0, #4
 800264a:	e7ab      	b.n	80025a4 <RI_SetRegisterGlobal+0x38>
      switch (regID)
 800264c:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8002650:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8002654:	bf14      	ite	ne
 8002656:	2005      	movne	r0, #5
 8002658:	2004      	moveq	r0, #4
 800265a:	e7ee      	b.n	800263a <RI_SetRegisterGlobal+0xce>
        *size = 0;
 800265c:	2200      	movs	r2, #0
 800265e:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8002660:	200a      	movs	r0, #10
 8002662:	e79f      	b.n	80025a4 <RI_SetRegisterGlobal+0x38>
        switch (regID)
 8002664:	28e8      	cmp	r0, #232	@ 0xe8
 8002666:	d1e5      	bne.n	8002634 <RI_SetRegisterGlobal+0xc8>
 8002668:	e7d3      	b.n	8002612 <RI_SetRegisterGlobal+0xa6>
 800266a:	bf00      	nop

0800266c <RI_SetRegisterMotor1>:
{
 800266c:	b530      	push	{r4, r5, lr}
 800266e:	b091      	sub	sp, #68	@ 0x44
  switch(typeID)
 8002670:	3908      	subs	r1, #8
{
 8002672:	f9bd c050 	ldrsh.w	ip, [sp, #80]	@ 0x50
 8002676:	461c      	mov	r4, r3
  switch(typeID)
 8002678:	2920      	cmp	r1, #32
 800267a:	d812      	bhi.n	80026a2 <RI_SetRegisterMotor1+0x36>
 800267c:	e8df f001 	tbb	[pc, r1]
 8002680:	11111116 	.word	0x11111116
 8002684:	11111111 	.word	0x11111111
 8002688:	11111126 	.word	0x11111126
 800268c:	11111111 	.word	0x11111111
 8002690:	11111156 	.word	0x11111156
 8002694:	11111111 	.word	0x11111111
 8002698:	11111141 	.word	0x11111141
 800269c:	11111111 	.word	0x11111111
 80026a0:	64          	.byte	0x64
 80026a1:	00          	.byte	0x00
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 80026a2:	2300      	movs	r3, #0
 80026a4:	8023      	strh	r3, [r4, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 80026a6:	2007      	movs	r0, #7
}
 80026a8:	b011      	add	sp, #68	@ 0x44
 80026aa:	bd30      	pop	{r4, r5, pc}
      switch (regID)
 80026ac:	f5b0 6fd9 	cmp.w	r0, #1736	@ 0x6c8
 80026b0:	f000 8115 	beq.w	80028de <RI_SetRegisterMotor1+0x272>
 80026b4:	f200 80d0 	bhi.w	8002858 <RI_SetRegisterMotor1+0x1ec>
 80026b8:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
            retVal = MCP_ERROR_RO_REG;
 80026bc:	2848      	cmp	r0, #72	@ 0x48
 80026be:	bf14      	ite	ne
 80026c0:	2005      	movne	r0, #5
 80026c2:	2004      	moveq	r0, #4
      *size = 1;
 80026c4:	2301      	movs	r3, #1
 80026c6:	8023      	strh	r3, [r4, #0]
}
 80026c8:	b011      	add	sp, #68	@ 0x44
 80026ca:	bd30      	pop	{r4, r5, pc}
      switch (regID)
 80026cc:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 80026d0:	8811      	ldrh	r1, [r2, #0]
      switch (regID)
 80026d2:	d011      	beq.n	80026f8 <RI_SetRegisterMotor1+0x8c>
 80026d4:	f200 80b2 	bhi.w	800283c <RI_SetRegisterMotor1+0x1d0>
 80026d8:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 80026dc:	f000 810a 	beq.w	80028f4 <RI_SetRegisterMotor1+0x288>
 80026e0:	f200 80ed 	bhi.w	80028be <RI_SetRegisterMotor1+0x252>
 80026e4:	2890      	cmp	r0, #144	@ 0x90
 80026e6:	f000 810a 	beq.w	80028fe <RI_SetRegisterMotor1+0x292>
 80026ea:	28d0      	cmp	r0, #208	@ 0xd0
 80026ec:	f040 8197 	bne.w	8002a1e <RI_SetRegisterMotor1+0x3b2>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 80026f0:	48b0      	ldr	r0, [pc, #704]	@ (80029b4 <RI_SetRegisterMotor1+0x348>)
 80026f2:	b209      	sxth	r1, r1
 80026f4:	f005 fcf2 	bl	80080dc <PID_SetKI>
  uint8_t retVal = MCP_CMD_OK;
 80026f8:	2000      	movs	r0, #0
      *size = 2;
 80026fa:	2302      	movs	r3, #2
 80026fc:	8023      	strh	r3, [r4, #0]
}
 80026fe:	b011      	add	sp, #68	@ 0x44
 8002700:	bd30      	pop	{r4, r5, pc}
  *size= 1U ; /* /0 is the min String size */
 8002702:	2101      	movs	r1, #1
 8002704:	8021      	strh	r1, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002706:	f992 3000 	ldrsb.w	r3, [r2]
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 8092 	beq.w	8002834 <RI_SetRegisterMotor1+0x1c8>
 8002710:	fa1f f38c 	uxth.w	r3, ip
 8002714:	e005      	b.n	8002722 <RI_SetRegisterMotor1+0xb6>
    *size = *size + 1U;
 8002716:	8021      	strh	r1, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002718:	f912 0f01 	ldrsb.w	r0, [r2, #1]!
 800271c:	2800      	cmp	r0, #0
 800271e:	f000 8089 	beq.w	8002834 <RI_SetRegisterMotor1+0x1c8>
    *size = *size + 1U;
 8002722:	1c48      	adds	r0, r1, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002724:	428b      	cmp	r3, r1
    *size = *size + 1U;
 8002726:	b281      	uxth	r1, r0
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002728:	d8f5      	bhi.n	8002716 <RI_SetRegisterMotor1+0xaa>
 800272a:	e085      	b.n	8002838 <RI_SetRegisterMotor1+0x1cc>
      switch (regID)
 800272c:	2858      	cmp	r0, #88	@ 0x58
 800272e:	f000 80db 	beq.w	80028e8 <RI_SetRegisterMotor1+0x27c>
 8002732:	2898      	cmp	r0, #152	@ 0x98
 8002734:	f000 809d 	beq.w	8002872 <RI_SetRegisterMotor1+0x206>
          retVal = MCP_ERROR_RO_REG;
 8002738:	2818      	cmp	r0, #24
 800273a:	bf14      	ite	ne
 800273c:	2005      	movne	r0, #5
 800273e:	2004      	moveq	r0, #4
      *size = 4;
 8002740:	2304      	movs	r3, #4
 8002742:	8023      	strh	r3, [r4, #0]
}
 8002744:	b011      	add	sp, #68	@ 0x44
 8002746:	bd30      	pop	{r4, r5, pc}
      uint16_t rawSize = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8002748:	f8b2 e000 	ldrh.w	lr, [r2]
      *size = rawSize + 2U;
 800274c:	f10e 0102 	add.w	r1, lr, #2
 8002750:	b289      	uxth	r1, r1
      if (*size > (uint16_t)dataAvailable)
 8002752:	fa1f f38c 	uxth.w	r3, ip
 8002756:	4299      	cmp	r1, r3
      *size = rawSize + 2U;
 8002758:	8021      	strh	r1, [r4, #0]
      if (*size > (uint16_t)dataAvailable)
 800275a:	f200 8086 	bhi.w	800286a <RI_SetRegisterMotor1+0x1fe>
        switch (regID)
 800275e:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 8002762:	f000 80d1 	beq.w	8002908 <RI_SetRegisterMotor1+0x29c>
 8002766:	f240 8092 	bls.w	800288e <RI_SetRegisterMotor1+0x222>
 800276a:	f5b0 6fa5 	cmp.w	r0, #1320	@ 0x528
 800276e:	f000 8140 	beq.w	80029f2 <RI_SetRegisterMotor1+0x386>
 8002772:	f5b0 6ffd 	cmp.w	r0, #2024	@ 0x7e8
 8002776:	f040 8097 	bne.w	80028a8 <RI_SetRegisterMotor1+0x23c>
            BemfAdcConfig.SamplingPointOn = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 800277a:	8953      	ldrh	r3, [r2, #10]
            BemfAdcConfig.SamplingPointOff = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 800277c:	4c8e      	ldr	r4, [pc, #568]	@ (80029b8 <RI_SetRegisterMotor1+0x34c>)
 800277e:	8910      	ldrh	r0, [r2, #8]
            ZcRising2CommDelay = (uint16_t) ((ConvertedData * 512) / 60);
 8002780:	8991      	ldrh	r1, [r2, #12]
            BemfAdcConfig.SamplingPointOff = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 8002782:	f640 1c7c 	movw	ip, #2428	@ 0x97c
            BemfAdcConfig.SamplingPointOn = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 8002786:	fb0c f303 	mul.w	r3, ip, r3
 800278a:	fba4 5303 	umull	r5, r3, r4, r3
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
            OnSensingEnThres = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 8002794:	8a93      	ldrh	r3, [r2, #20]
            BemfAdcConfig.SamplingPointOff = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 8002796:	fb0c f000 	mul.w	r0, ip, r0
 800279a:	fba4 5000 	umull	r5, r0, r4, r0
            OnSensingEnThres = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 800279e:	fb0c f303 	mul.w	r3, ip, r3
            BemfAdcConfig.AdcThresholdHighPerc = *(uint16_t *)rawData; //cstat !MISRAC2012-Rule-11.3
 80027a2:	8855      	ldrh	r5, [r2, #2]
 80027a4:	f8ad 5022 	strh.w	r5, [sp, #34]	@ 0x22
            OnSensingEnThres = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 80027a8:	fba4 5303 	umull	r5, r3, r4, r3
 80027ac:	095b      	lsrs	r3, r3, #5
 80027ae:	f8ad 301a 	strh.w	r3, [sp, #26]
            OnSensingHisteresys = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 80027b2:	8ad3      	ldrh	r3, [r2, #22]
            BemfAdcConfig.SamplingPointOff = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 80027b4:	0940      	lsrs	r0, r0, #5
            (void)BADC_SetBemfSensorlessParam(&Bemf_ADC_M1, &BemfAdcConfig,&ZcRising2CommDelay,&ZcFalling2CommDelay,&bemfAdcDemagConfig,
 80027b6:	f10d 051a 	add.w	r5, sp, #26
            OnSensingHisteresys = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 80027ba:	fb0c f303 	mul.w	r3, ip, r3
 80027be:	fba4 4303 	umull	r4, r3, r4, r3
            BemfAdcConfig.SamplingPointOff = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 80027c2:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
            BemfAdcConfig.AWDfiltering = *(uint16_t *)&rawData[22]; //cstat !MISRAC2012-Rule-11.3
 80027c6:	8b14      	ldrh	r4, [r2, #24]
            ZcFalling2CommDelay = (uint16_t) ((ConvertedData * 512) / 60);
 80027c8:	89d0      	ldrh	r0, [r2, #14]
            (void)BADC_SetBemfSensorlessParam(&Bemf_ADC_M1, &BemfAdcConfig,&ZcRising2CommDelay,&ZcFalling2CommDelay,&bemfAdcDemagConfig,
 80027ca:	9501      	str	r5, [sp, #4]
            BemfAdcConfig.AWDfiltering = *(uint16_t *)&rawData[22]; //cstat !MISRAC2012-Rule-11.3
 80027cc:	f88d 402e 	strb.w	r4, [sp, #46]	@ 0x2e
            computationdelayChoice = *(uint16_t *)&rawData[24];
 80027d0:	8b54      	ldrh	r4, [r2, #26]
            ZcRising2CommDelay = (uint16_t) ((ConvertedData * 512) / 60);
 80027d2:	4d7a      	ldr	r5, [pc, #488]	@ (80029bc <RI_SetRegisterMotor1+0x350>)
            computationdelayChoice = *(uint16_t *)&rawData[24];
 80027d4:	f8ad 401e 	strh.w	r4, [sp, #30]
            (void)BADC_SetBemfSensorlessParam(&Bemf_ADC_M1, &BemfAdcConfig,&ZcRising2CommDelay,&ZcFalling2CommDelay,&bemfAdcDemagConfig,
 80027d8:	f10d 041e 	add.w	r4, sp, #30
 80027dc:	9403      	str	r4, [sp, #12]
            ZcRising2CommDelay = (uint16_t) ((ConvertedData * 512) / 60);
 80027de:	0249      	lsls	r1, r1, #9
            OnSensingHisteresys = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 80027e0:	095b      	lsrs	r3, r3, #5
            (void)BADC_SetBemfSensorlessParam(&Bemf_ADC_M1, &BemfAdcConfig,&ZcRising2CommDelay,&ZcFalling2CommDelay,&bemfAdcDemagConfig,
 80027e2:	ac07      	add	r4, sp, #28
            ZcFalling2CommDelay = (uint16_t) ((ConvertedData * 512) / 60);
 80027e4:	0240      	lsls	r0, r0, #9
            (void)BADC_SetBemfSensorlessParam(&Bemf_ADC_M1, &BemfAdcConfig,&ZcRising2CommDelay,&ZcFalling2CommDelay,&bemfAdcDemagConfig,
 80027e6:	9402      	str	r4, [sp, #8]
            OnSensingHisteresys = (uint16_t) ((PWM_PERIOD_CYCLES * ConvertedData) / 100);
 80027e8:	f8ad 301c 	strh.w	r3, [sp, #28]
            ZcRising2CommDelay = (uint16_t) ((ConvertedData * 512) / 60);
 80027ec:	fba5 1401 	umull	r1, r4, r5, r1
            (void)BADC_SetBemfSensorlessParam(&Bemf_ADC_M1, &BemfAdcConfig,&ZcRising2CommDelay,&ZcFalling2CommDelay,&bemfAdcDemagConfig,
 80027f0:	ab0c      	add	r3, sp, #48	@ 0x30
            ZcFalling2CommDelay = (uint16_t) ((ConvertedData * 512) / 60);
 80027f2:	fba5 5000 	umull	r5, r0, r5, r0
            (void)BADC_SetBemfSensorlessParam(&Bemf_ADC_M1, &BemfAdcConfig,&ZcRising2CommDelay,&ZcFalling2CommDelay,&bemfAdcDemagConfig,
 80027f6:	9300      	str	r3, [sp, #0]
            ZcFalling2CommDelay = (uint16_t) ((ConvertedData * 512) / 60);
 80027f8:	0940      	lsrs	r0, r0, #5
            bemfAdcDemagConfig.DemagMinimumSpeedUnit = (uint16_t) ((ConvertedData * SPEED_UNIT) / U_RPM); //cstat !MISRAC2012-Rule-11.3
 80027fa:	8a51      	ldrh	r1, [r2, #18]
            ZcFalling2CommDelay = (uint16_t) ((ConvertedData * 512) / 60);
 80027fc:	f8ad 0018 	strh.w	r0, [sp, #24]
            bemfAdcDemagConfig.DemagMinimumSpeedUnit = (uint16_t) ((ConvertedData * SPEED_UNIT) / U_RPM); //cstat !MISRAC2012-Rule-11.3
 8002800:	486f      	ldr	r0, [pc, #444]	@ (80029c0 <RI_SetRegisterMotor1+0x354>)
            bemfAdcDemagConfig.DemagMinimumThreshold = *(uint16_t *)&rawData[14]; //cstat !MISRAC2012-Rule-11.3
 8002802:	8a15      	ldrh	r5, [r2, #16]
 8002804:	950f      	str	r5, [sp, #60]	@ 0x3c
            bemfAdcDemagConfig.DemagMinimumSpeedUnit = (uint16_t) ((ConvertedData * SPEED_UNIT) / U_RPM); //cstat !MISRAC2012-Rule-11.3
 8002806:	fba0 0101 	umull	r0, r1, r0, r1
 800280a:	0889      	lsrs	r1, r1, #2
 800280c:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
            BemfAdcConfig.AdcThresholdPwmPerc = *(uint16_t *)&rawData[2]; //cstat !MISRAC2012-Rule-11.3
 8002810:	8891      	ldrh	r1, [r2, #4]
            BemfAdcConfig.AdcThresholdLowPerc = *(uint16_t *)&rawData[4]; //cstat !MISRAC2012-Rule-11.3
 8002812:	88d2      	ldrh	r2, [r2, #6]
            BemfAdcConfig.AdcThresholdPwmPerc = *(uint16_t *)&rawData[2]; //cstat !MISRAC2012-Rule-11.3
 8002814:	f8ad 1020 	strh.w	r1, [sp, #32]
            ZcRising2CommDelay = (uint16_t) ((ConvertedData * 512) / 60);
 8002818:	0964      	lsrs	r4, r4, #5
            BemfAdcConfig.AdcThresholdLowPerc = *(uint16_t *)&rawData[4]; //cstat !MISRAC2012-Rule-11.3
 800281a:	f8ad 2024 	strh.w	r2, [sp, #36]	@ 0x24
            (void)BADC_SetBemfSensorlessParam(&Bemf_ADC_M1, &BemfAdcConfig,&ZcRising2CommDelay,&ZcFalling2CommDelay,&bemfAdcDemagConfig,
 800281e:	4869      	ldr	r0, [pc, #420]	@ (80029c4 <RI_SetRegisterMotor1+0x358>)
            ZcRising2CommDelay = (uint16_t) ((ConvertedData * 512) / 60);
 8002820:	f8ad 4016 	strh.w	r4, [sp, #22]
            (void)BADC_SetBemfSensorlessParam(&Bemf_ADC_M1, &BemfAdcConfig,&ZcRising2CommDelay,&ZcFalling2CommDelay,&bemfAdcDemagConfig,
 8002824:	ab06      	add	r3, sp, #24
 8002826:	f10d 0216 	add.w	r2, sp, #22
 800282a:	a908      	add	r1, sp, #32
 800282c:	f005 fa44 	bl	8007cb8 <BADC_SetBemfSensorlessParam>
  uint8_t retVal = MCP_CMD_OK;
 8002830:	2000      	movs	r0, #0
 8002832:	e739      	b.n	80026a8 <RI_SetRegisterMotor1+0x3c>
    *tempdestString = (int8_t)0;
 8002834:	2300      	movs	r3, #0
 8002836:	7013      	strb	r3, [r2, #0]
      retVal = MCP_ERROR_RO_REG;
 8002838:	2004      	movs	r0, #4
 800283a:	e735      	b.n	80026a8 <RI_SetRegisterMotor1+0x3c>
      switch (regID)
 800283c:	f241 4390 	movw	r3, #5264	@ 0x1490
 8002840:	4298      	cmp	r0, r3
 8002842:	d053      	beq.n	80028ec <RI_SetRegisterMotor1+0x280>
 8002844:	d932      	bls.n	80028ac <RI_SetRegisterMotor1+0x240>
 8002846:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 800284a:	4298      	cmp	r0, r3
 800284c:	f040 80d8 	bne.w	8002a00 <RI_SetRegisterMotor1+0x394>
          PID_SetKDDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8002850:	4858      	ldr	r0, [pc, #352]	@ (80029b4 <RI_SetRegisterMotor1+0x348>)
 8002852:	f005 fc7b 	bl	800814c <PID_SetKDDivisorPOW2>
          break;
 8002856:	e74f      	b.n	80026f8 <RI_SetRegisterMotor1+0x8c>
      switch (regID)
 8002858:	f5b0 6fe1 	cmp.w	r0, #1800	@ 0x708
 800285c:	d13d      	bne.n	80028da <RI_SetRegisterMotor1+0x26e>
          PWMC_SetQuasiSynchState(&PWM_Handle_M1, regdata8);
 800285e:	7811      	ldrb	r1, [r2, #0]
 8002860:	4859      	ldr	r0, [pc, #356]	@ (80029c8 <RI_SetRegisterMotor1+0x35c>)
 8002862:	f005 febd 	bl	80085e0 <PWMC_SetQuasiSynchState>
  uint8_t retVal = MCP_CMD_OK;
 8002866:	2000      	movs	r0, #0
 8002868:	e72c      	b.n	80026c4 <RI_SetRegisterMotor1+0x58>
        *size = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	8023      	strh	r3, [r4, #0]
              retVal = MCP_ERROR_BAD_RAW_FORMAT;
 800286e:	200a      	movs	r0, #10
 8002870:	e71a      	b.n	80026a8 <RI_SetRegisterMotor1+0x3c>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8002872:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002876:	4955      	ldr	r1, [pc, #340]	@ (80029cc <RI_SetRegisterMotor1+0x360>)
 8002878:	4855      	ldr	r0, [pc, #340]	@ (80029d0 <RI_SetRegisterMotor1+0x364>)
 800287a:	fb81 2103 	smull	r2, r1, r1, r3
 800287e:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8002882:	2200      	movs	r2, #0
 8002884:	b209      	sxth	r1, r1
 8002886:	f7fe ffd1 	bl	800182c <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 800288a:	2000      	movs	r0, #0
          break;
 800288c:	e758      	b.n	8002740 <RI_SetRegisterMotor1+0xd4>
        switch (regID)
 800288e:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8002892:	f000 80a1 	beq.w	80029d8 <RI_SetRegisterMotor1+0x36c>
 8002896:	d807      	bhi.n	80028a8 <RI_SetRegisterMotor1+0x23c>
 8002898:	28a8      	cmp	r0, #168	@ 0xa8
 800289a:	d0cd      	beq.n	8002838 <RI_SetRegisterMotor1+0x1cc>
 800289c:	f200 80c1 	bhi.w	8002a22 <RI_SetRegisterMotor1+0x3b6>
 80028a0:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80028a4:	2828      	cmp	r0, #40	@ 0x28
 80028a6:	d0c7      	beq.n	8002838 <RI_SetRegisterMotor1+0x1cc>
 80028a8:	2005      	movs	r0, #5
 80028aa:	e6fd      	b.n	80026a8 <RI_SetRegisterMotor1+0x3c>
      switch (regID)
 80028ac:	f241 4350 	movw	r3, #5200	@ 0x1450
 80028b0:	4298      	cmp	r0, r3
 80028b2:	f040 80b4 	bne.w	8002a1e <RI_SetRegisterMotor1+0x3b2>
          PID_SetKPDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 80028b6:	483f      	ldr	r0, [pc, #252]	@ (80029b4 <RI_SetRegisterMotor1+0x348>)
 80028b8:	f005 fc1e 	bl	80080f8 <PID_SetKPDivisorPOW2>
          break;
 80028bc:	e71c      	b.n	80026f8 <RI_SetRegisterMotor1+0x8c>
      switch (regID)
 80028be:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 80028c2:	f43f af19 	beq.w	80026f8 <RI_SetRegisterMotor1+0x8c>
 80028c6:	f200 80aa 	bhi.w	8002a1e <RI_SetRegisterMotor1+0x3b2>
 80028ca:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
          retVal = MCP_ERROR_UNKNOWN_REG;
 80028ce:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 80028d2:	bf0c      	ite	eq
 80028d4:	2004      	moveq	r0, #4
 80028d6:	2005      	movne	r0, #5
 80028d8:	e70f      	b.n	80026fa <RI_SetRegisterMotor1+0x8e>
      switch (regID)
 80028da:	2005      	movs	r0, #5
 80028dc:	e6f2      	b.n	80026c4 <RI_SetRegisterMotor1+0x58>
          PWMC_SetLSModConfig(&PWM_Handle_M1, regdataU8);
 80028de:	7811      	ldrb	r1, [r2, #0]
 80028e0:	4839      	ldr	r0, [pc, #228]	@ (80029c8 <RI_SetRegisterMotor1+0x35c>)
 80028e2:	f005 fe65 	bl	80085b0 <PWMC_SetLSModConfig>
          break;
 80028e6:	e7be      	b.n	8002866 <RI_SetRegisterMotor1+0x1fa>
          retVal = MCP_ERROR_RO_REG;
 80028e8:	2004      	movs	r0, #4
 80028ea:	e729      	b.n	8002740 <RI_SetRegisterMotor1+0xd4>
          PID_SetKIDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 80028ec:	4831      	ldr	r0, [pc, #196]	@ (80029b4 <RI_SetRegisterMotor1+0x348>)
 80028ee:	f005 fc11 	bl	8008114 <PID_SetKIDivisorPOW2>
          break;
 80028f2:	e701      	b.n	80026f8 <RI_SetRegisterMotor1+0x8c>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 80028f4:	482f      	ldr	r0, [pc, #188]	@ (80029b4 <RI_SetRegisterMotor1+0x348>)
 80028f6:	b209      	sxth	r1, r1
 80028f8:	f005 fc20 	bl	800813c <PID_SetKD>
          break;
 80028fc:	e6fc      	b.n	80026f8 <RI_SetRegisterMotor1+0x8c>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 80028fe:	482d      	ldr	r0, [pc, #180]	@ (80029b4 <RI_SetRegisterMotor1+0x348>)
 8002900:	b209      	sxth	r1, r1
 8002902:	f005 fbe9 	bl	80080d8 <PID_SetKP>
          break;
 8002906:	e6f7      	b.n	80026f8 <RI_SetRegisterMotor1+0x8c>
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8002908:	f01e 0f07 	tst.w	lr, #7
 800290c:	d1af      	bne.n	800286e <RI_SetRegisterMotor1+0x202>
            uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 800290e:	fa5f fe8e 	uxtb.w	lr, lr
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8002912:	f1be 0f2f 	cmp.w	lr, #47	@ 0x2f
 8002916:	d8aa      	bhi.n	800286e <RI_SetRegisterMotor1+0x202>
              for (i = 0; i <nbrOfPhase; i++)
 8002918:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800291c:	d088      	beq.n	8002830 <RI_SetRegisterMotor1+0x1c4>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 800291e:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8002922:	492a      	ldr	r1, [pc, #168]	@ (80029cc <RI_SetRegisterMotor1+0x360>)
  {
    retValue = false;
  }
  else
  {
    pHandle->ParamsData[phaseNumber].hFinalPulse = phaseData->hFinalPulse;
 8002924:	88d5      	ldrh	r5, [r2, #6]
 8002926:	fb81 4003 	smull	r4, r0, r1, r3
 800292a:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 800292e:	4b29      	ldr	r3, [pc, #164]	@ (80029d4 <RI_SetRegisterMotor1+0x368>)
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002930:	8914      	ldrh	r4, [r2, #8]
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8002932:	819c      	strh	r4, [r3, #12]
              for (i = 0; i <nbrOfPhase; i++)
 8002934:	f1be 0f01 	cmp.w	lr, #1
    pHandle->ParamsData[phaseNumber].hFinalPulse = phaseData->hFinalPulse;
 8002938:	821d      	strh	r5, [r3, #16]
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 800293a:	81d8      	strh	r0, [r3, #14]
 800293c:	f43f af78 	beq.w	8002830 <RI_SetRegisterMotor1+0x1c4>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002940:	f9b2 400a 	ldrsh.w	r4, [r2, #10]
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002944:	8a15      	ldrh	r5, [r2, #16]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002946:	fb81 c004 	smull	ip, r0, r1, r4
 800294a:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 800294e:	f1be 0f02 	cmp.w	lr, #2
    pHandle->ParamsData[phaseNumber].hFinalPulse = phaseData->hFinalPulse;
 8002952:	89d4      	ldrh	r4, [r2, #14]
 8002954:	839c      	strh	r4, [r3, #28]
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8002956:	8358      	strh	r0, [r3, #26]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8002958:	831d      	strh	r5, [r3, #24]
 800295a:	f43f af69 	beq.w	8002830 <RI_SetRegisterMotor1+0x1c4>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 800295e:	f9b2 4012 	ldrsh.w	r4, [r2, #18]
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002962:	8b15      	ldrh	r5, [r2, #24]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002964:	fb81 c004 	smull	ip, r0, r1, r4
 8002968:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 800296c:	f1be 0f03 	cmp.w	lr, #3
    pHandle->ParamsData[phaseNumber].hFinalPulse = phaseData->hFinalPulse;
 8002970:	8ad4      	ldrh	r4, [r2, #22]
 8002972:	851c      	strh	r4, [r3, #40]	@ 0x28
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8002974:	84d8      	strh	r0, [r3, #38]	@ 0x26
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8002976:	849d      	strh	r5, [r3, #36]	@ 0x24
 8002978:	f43f af5a 	beq.w	8002830 <RI_SetRegisterMotor1+0x1c4>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 800297c:	f9b2 401a 	ldrsh.w	r4, [r2, #26]
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002980:	8c15      	ldrh	r5, [r2, #32]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002982:	fb81 c004 	smull	ip, r0, r1, r4
 8002986:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 800298a:	f1be 0f05 	cmp.w	lr, #5
    pHandle->ParamsData[phaseNumber].hFinalPulse = phaseData->hFinalPulse;
 800298e:	8bd4      	ldrh	r4, [r2, #30]
 8002990:	869c      	strh	r4, [r3, #52]	@ 0x34
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8002992:	8658      	strh	r0, [r3, #50]	@ 0x32
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8002994:	861d      	strh	r5, [r3, #48]	@ 0x30
 8002996:	f47f af4b 	bne.w	8002830 <RI_SetRegisterMotor1+0x1c4>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 800299a:	f9b2 0022 	ldrsh.w	r0, [r2, #34]	@ 0x22
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 800299e:	8d14      	ldrh	r4, [r2, #40]	@ 0x28
    pHandle->ParamsData[phaseNumber].hFinalPulse = phaseData->hFinalPulse;
 80029a0:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 80029a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 80029a6:	fb81 5100 	smull	r5, r1, r1, r0
 80029aa:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 80029ae:	87d9      	strh	r1, [r3, #62]	@ 0x3e
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 80029b0:	879c      	strh	r4, [r3, #60]	@ 0x3c
              for (i = 0; i <nbrOfPhase; i++)
 80029b2:	e73d      	b.n	8002830 <RI_SetRegisterMotor1+0x1c4>
 80029b4:	200001e4 	.word	0x200001e4
 80029b8:	51eb851f 	.word	0x51eb851f
 80029bc:	88888889 	.word	0x88888889
 80029c0:	aaaaaaab 	.word	0xaaaaaaab
 80029c4:	2000005c 	.word	0x2000005c
 80029c8:	20000028 	.word	0x20000028
 80029cc:	2aaaaaab 	.word	0x2aaaaaab
 80029d0:	20000000 	.word	0x20000000
 80029d4:	2000015c 	.word	0x2000015c
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 80029d8:	f8d2 1002 	ldr.w	r1, [r2, #2]
 80029dc:	4b14      	ldr	r3, [pc, #80]	@ (8002a30 <RI_SetRegisterMotor1+0x3c4>)
 80029de:	88d2      	ldrh	r2, [r2, #6]
 80029e0:	fb83 0301 	smull	r0, r3, r3, r1
 80029e4:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 80029e8:	4812      	ldr	r0, [pc, #72]	@ (8002a34 <RI_SetRegisterMotor1+0x3c8>)
 80029ea:	b209      	sxth	r1, r1
 80029ec:	f7fe ff1e 	bl	800182c <MCI_ExecSpeedRamp>
            break;
 80029f0:	e71e      	b.n	8002830 <RI_SetRegisterMotor1+0x1c4>
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 80029f2:	4811      	ldr	r0, [pc, #68]	@ (8002a38 <RI_SetRegisterMotor1+0x3cc>)
 80029f4:	1c91      	adds	r1, r2, #2
}
 80029f6:	b011      	add	sp, #68	@ 0x44
 80029f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 80029fc:	f005 ba98 	b.w	8007f30 <MCPA_cfgLog>
      switch (regID)
 8002a00:	f241 43cf 	movw	r3, #5327	@ 0x14cf
 8002a04:	4298      	cmp	r0, r3
 8002a06:	d90a      	bls.n	8002a1e <RI_SetRegisterMotor1+0x3b2>
 8002a08:	f641 2390 	movw	r3, #6800	@ 0x1a90
 8002a0c:	4298      	cmp	r0, r3
 8002a0e:	d00c      	beq.n	8002a2a <RI_SetRegisterMotor1+0x3be>
 8002a10:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8002a14:	4298      	cmp	r0, r3
 8002a16:	bf14      	ite	ne
 8002a18:	2005      	movne	r0, #5
 8002a1a:	2004      	moveq	r0, #4
 8002a1c:	e66d      	b.n	80026fa <RI_SetRegisterMotor1+0x8e>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8002a1e:	2005      	movs	r0, #5
 8002a20:	e66b      	b.n	80026fa <RI_SetRegisterMotor1+0x8e>
        switch (regID)
 8002a22:	28e8      	cmp	r0, #232	@ 0xe8
 8002a24:	f43f af08 	beq.w	8002838 <RI_SetRegisterMotor1+0x1cc>
 8002a28:	e73e      	b.n	80028a8 <RI_SetRegisterMotor1+0x23c>
      switch (regID)
 8002a2a:	2004      	movs	r0, #4
 8002a2c:	e665      	b.n	80026fa <RI_SetRegisterMotor1+0x8e>
 8002a2e:	bf00      	nop
 8002a30:	2aaaaaab 	.word	0x2aaaaaab
 8002a34:	20000000 	.word	0x20000000
 8002a38:	200003b4 	.word	0x200003b4

08002a3c <RI_GetRegisterGlobal>:
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8002a3c:	b510      	push	{r4, lr}
    switch (typeID)
 8002a3e:	f1a1 0c08 	sub.w	ip, r1, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8002a42:	f9bd e008 	ldrsh.w	lr, [sp, #8]
    switch (typeID)
 8002a46:	f1bc 0f20 	cmp.w	ip, #32
 8002a4a:	d812      	bhi.n	8002a72 <RI_GetRegisterGlobal+0x36>
 8002a4c:	e8df f00c 	tbb	[pc, ip]
 8002a50:	1111111b 	.word	0x1111111b
 8002a54:	11111111 	.word	0x11111111
 8002a58:	11111127 	.word	0x11111127
 8002a5c:	11111111 	.word	0x11111111
 8002a60:	11111122 	.word	0x11111122
 8002a64:	11111111 	.word	0x11111111
 8002a68:	11111135 	.word	0x11111135
 8002a6c:	11111111 	.word	0x11111111
 8002a70:	13          	.byte	0x13
 8002a71:	00          	.byte	0x00
 8002a72:	2007      	movs	r0, #7
}
 8002a74:	bd10      	pop	{r4, pc}
        switch (regID)
 8002a76:	2828      	cmp	r0, #40	@ 0x28
 8002a78:	d029      	beq.n	8002ace <RI_GetRegisterGlobal+0x92>
        *size = (*rawSize) + 2U;
 8002a7a:	8812      	ldrh	r2, [r2, #0]
 8002a7c:	3202      	adds	r2, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002a7e:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8002a80:	b292      	uxth	r2, r2
 8002a82:	801a      	strh	r2, [r3, #0]
}
 8002a84:	bd10      	pop	{r4, pc}
        if (freeSpace > 0)
 8002a86:	f1be 0f00 	cmp.w	lr, #0
 8002a8a:	dd1e      	ble.n	8002aca <RI_GetRegisterGlobal+0x8e>
 8002a8c:	2201      	movs	r2, #1
            *size= 0 ; /* */
 8002a8e:	801a      	strh	r2, [r3, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 8002a90:	2005      	movs	r0, #5
}
 8002a92:	bd10      	pop	{r4, pc}
        if (freeSpace >= 4)
 8002a94:	f1be 0f03 	cmp.w	lr, #3
 8002a98:	dd15      	ble.n	8002ac6 <RI_GetRegisterGlobal+0x8a>
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	e7f7      	b.n	8002a8e <RI_GetRegisterGlobal+0x52>
        if (freeSpace >= 2)
 8002a9e:	f1be 0f01 	cmp.w	lr, #1
 8002aa2:	dd10      	ble.n	8002ac6 <RI_GetRegisterGlobal+0x8a>
          switch (regID)
 8002aa4:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8002aa8:	d05a      	beq.n	8002b60 <RI_GetRegisterGlobal+0x124>
    uint8_t retVal = MCP_CMD_OK;
 8002aaa:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8002aae:	bf14      	ite	ne
 8002ab0:	2005      	movne	r0, #5
 8002ab2:	2000      	moveq	r0, #0
          *size = 2;
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	801a      	strh	r2, [r3, #0]
}
 8002ab8:	bd10      	pop	{r4, pc}
        switch (regID)
 8002aba:	2820      	cmp	r0, #32
 8002abc:	d02c      	beq.n	8002b18 <RI_GetRegisterGlobal+0xdc>
 8002abe:	2860      	cmp	r0, #96	@ 0x60
 8002ac0:	d00f      	beq.n	8002ae2 <RI_GetRegisterGlobal+0xa6>
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	e7e3      	b.n	8002a8e <RI_GetRegisterGlobal+0x52>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002ac6:	2008      	movs	r0, #8
}
 8002ac8:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002aca:	4608      	mov	r0, r1
}
 8002acc:	bd10      	pop	{r4, pc}
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002ace:	fa1f fe8e 	uxth.w	lr, lr
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8002ad2:	210a      	movs	r1, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002ad4:	f1be 0f0b 	cmp.w	lr, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8002ad8:	8011      	strh	r1, [r2, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002ada:	d835      	bhi.n	8002b48 <RI_GetRegisterGlobal+0x10c>
 8002adc:	220c      	movs	r2, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002ade:	2008      	movs	r0, #8
 8002ae0:	e7cf      	b.n	8002a82 <RI_GetRegisterGlobal+0x46>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002ae2:	4c20      	ldr	r4, [pc, #128]	@ (8002b64 <RI_GetRegisterGlobal+0x128>)
 8002ae4:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8002ae8:	2101      	movs	r1, #1
 8002aea:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002aec:	b180      	cbz	r0, 8002b10 <RI_GetRegisterGlobal+0xd4>
 8002aee:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8002af2:	46a4      	mov	ip, r4
 8002af4:	e008      	b.n	8002b08 <RI_GetRegisterGlobal+0xcc>
    *tempdestString = *tempsrcString;
 8002af6:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8002afa:	8819      	ldrh	r1, [r3, #0]
 8002afc:	3101      	adds	r1, #1
 8002afe:	b289      	uxth	r1, r1
 8002b00:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002b02:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8002b06:	b118      	cbz	r0, 8002b10 <RI_GetRegisterGlobal+0xd4>
 8002b08:	4571      	cmp	r1, lr
 8002b0a:	d3f4      	bcc.n	8002af6 <RI_GetRegisterGlobal+0xba>
    retVal = MCP_ERROR_STRING_FORMAT;
 8002b0c:	2006      	movs	r0, #6
}
 8002b0e:	bd10      	pop	{r4, pc}
    *tempdestString = (int8_t)0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	7013      	strb	r3, [r2, #0]
  uint8_t retVal = MCP_CMD_OK;
 8002b14:	2000      	movs	r0, #0
}
 8002b16:	bd10      	pop	{r4, pc}
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002b18:	4c13      	ldr	r4, [pc, #76]	@ (8002b68 <RI_GetRegisterGlobal+0x12c>)
 8002b1a:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8002b1e:	2101      	movs	r1, #1
 8002b20:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002b22:	2800      	cmp	r0, #0
 8002b24:	d0f4      	beq.n	8002b10 <RI_GetRegisterGlobal+0xd4>
 8002b26:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8002b2a:	46a4      	mov	ip, r4
 8002b2c:	e009      	b.n	8002b42 <RI_GetRegisterGlobal+0x106>
    *tempdestString = *tempsrcString;
 8002b2e:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8002b32:	8819      	ldrh	r1, [r3, #0]
 8002b34:	3101      	adds	r1, #1
 8002b36:	b289      	uxth	r1, r1
 8002b38:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002b3a:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8002b3e:	2800      	cmp	r0, #0
 8002b40:	d0e6      	beq.n	8002b10 <RI_GetRegisterGlobal+0xd4>
 8002b42:	458e      	cmp	lr, r1
 8002b44:	d8f3      	bhi.n	8002b2e <RI_GetRegisterGlobal+0xf2>
 8002b46:	e7e1      	b.n	8002b0c <RI_GetRegisterGlobal+0xd0>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8002b48:	4908      	ldr	r1, [pc, #32]	@ (8002b6c <RI_GetRegisterGlobal+0x130>)
 8002b4a:	6848      	ldr	r0, [r1, #4]
 8002b4c:	680c      	ldr	r4, [r1, #0]
 8002b4e:	8909      	ldrh	r1, [r1, #8]
 8002b50:	f8c2 0006 	str.w	r0, [r2, #6]
 8002b54:	f8c2 4002 	str.w	r4, [r2, #2]
 8002b58:	8151      	strh	r1, [r2, #10]
    uint8_t retVal = MCP_CMD_OK;
 8002b5a:	2000      	movs	r0, #0
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8002b5c:	220c      	movs	r2, #12
 8002b5e:	e790      	b.n	8002a82 <RI_GetRegisterGlobal+0x46>
    uint8_t retVal = MCP_CMD_OK;
 8002b60:	2000      	movs	r0, #0
 8002b62:	e7a7      	b.n	8002ab4 <RI_GetRegisterGlobal+0x78>
 8002b64:	08008f10 	.word	0x08008f10
 8002b68:	08008ee8 	.word	0x08008ee8
 8002b6c:	08008edc 	.word	0x08008edc

08002b70 <RI_GetRegisterMotor1>:
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8002b70:	b570      	push	{r4, r5, r6, lr}
 8002b72:	b090      	sub	sp, #64	@ 0x40
 8002b74:	461d      	mov	r5, r3
    switch (typeID)
 8002b76:	f1a1 0308 	sub.w	r3, r1, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8002b7a:	f9bd c050 	ldrsh.w	ip, [sp, #80]	@ 0x50
 8002b7e:	4614      	mov	r4, r2
    switch (typeID)
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d812      	bhi.n	8002baa <RI_GetRegisterMotor1+0x3a>
 8002b84:	e8df f003 	tbb	[pc, r3]
 8002b88:	1111112f 	.word	0x1111112f
 8002b8c:	11111111 	.word	0x11111111
 8002b90:	11111157 	.word	0x11111157
 8002b94:	11111111 	.word	0x11111111
 8002b98:	11111142 	.word	0x11111142
 8002b9c:	11111111 	.word	0x11111111
 8002ba0:	11111173 	.word	0x11111173
 8002ba4:	11111111 	.word	0x11111111
 8002ba8:	14          	.byte	0x14
 8002ba9:	00          	.byte	0x00
 8002baa:	2007      	movs	r0, #7
  }
 8002bac:	b010      	add	sp, #64	@ 0x40
 8002bae:	bd70      	pop	{r4, r5, r6, pc}
        switch (regID)
 8002bb0:	f5b0 7f94 	cmp.w	r0, #296	@ 0x128
 8002bb4:	f000 81bb 	beq.w	8002f2e <RI_GetRegisterMotor1+0x3be>
 8002bb8:	d864      	bhi.n	8002c84 <RI_GetRegisterMotor1+0x114>
 8002bba:	28a8      	cmp	r0, #168	@ 0xa8
        rawData++;
 8002bbc:	f104 0202 	add.w	r2, r4, #2
        switch (regID)
 8002bc0:	f000 8210 	beq.w	8002fe4 <RI_GetRegisterMotor1+0x474>
 8002bc4:	28e8      	cmp	r0, #232	@ 0xe8
 8002bc6:	f000 8163 	beq.w	8002e90 <RI_GetRegisterMotor1+0x320>
 8002bca:	2868      	cmp	r0, #104	@ 0x68
 8002bcc:	f040 8214 	bne.w	8002ff8 <RI_GetRegisterMotor1+0x488>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002bd0:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8002bd4:	233c      	movs	r3, #60	@ 0x3c
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002bd6:	f1bc 0f3d 	cmp.w	ip, #61	@ 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8002bda:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002bdc:	f200 823f 	bhi.w	800305e <RI_GetRegisterMotor1+0x4ee>
 8002be0:	233e      	movs	r3, #62	@ 0x3e
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002be2:	2008      	movs	r0, #8
 8002be4:	e069      	b.n	8002cba <RI_GetRegisterMotor1+0x14a>
        if (freeSpace > 0)
 8002be6:	f1bc 0f00 	cmp.w	ip, #0
 8002bea:	f340 816e 	ble.w	8002eca <RI_GetRegisterMotor1+0x35a>
          switch (regID)
 8002bee:	28c8      	cmp	r0, #200	@ 0xc8
 8002bf0:	f000 8207 	beq.w	8003002 <RI_GetRegisterMotor1+0x492>
 8002bf4:	f200 80af 	bhi.w	8002d56 <RI_GetRegisterMotor1+0x1e6>
 8002bf8:	2848      	cmp	r0, #72	@ 0x48
 8002bfa:	f000 8154 	beq.w	8002ea6 <RI_GetRegisterMotor1+0x336>
 8002bfe:	2888      	cmp	r0, #136	@ 0x88
 8002c00:	f040 8203 	bne.w	800300a <RI_GetRegisterMotor1+0x49a>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8002c04:	48bc      	ldr	r0, [pc, #752]	@ (8002ef8 <RI_GetRegisterMotor1+0x388>)
 8002c06:	f7fe fe9f 	bl	8001948 <MCI_GetControlMode>
              break;
 8002c0a:	e0af      	b.n	8002d6c <RI_GetRegisterMotor1+0x1fc>
        if (freeSpace >= 4)
 8002c0c:	f1bc 0f03 	cmp.w	ip, #3
 8002c10:	dd35      	ble.n	8002c7e <RI_GetRegisterMotor1+0x10e>
          switch (regID)
 8002c12:	2858      	cmp	r0, #88	@ 0x58
 8002c14:	f000 815b 	beq.w	8002ece <RI_GetRegisterMotor1+0x35e>
 8002c18:	2898      	cmp	r0, #152	@ 0x98
 8002c1a:	f000 8160 	beq.w	8002ede <RI_GetRegisterMotor1+0x36e>
 8002c1e:	2818      	cmp	r0, #24
 8002c20:	f040 80aa 	bne.w	8002d78 <RI_GetRegisterMotor1+0x208>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8002c24:	48b4      	ldr	r0, [pc, #720]	@ (8002ef8 <RI_GetRegisterMotor1+0x388>)
 8002c26:	f7fe fe89 	bl	800193c <MCI_GetFaultState>
 8002c2a:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002c2c:	2000      	movs	r0, #0
          *size = 4;
 8002c2e:	2304      	movs	r3, #4
 8002c30:	802b      	strh	r3, [r5, #0]
  }
 8002c32:	b010      	add	sp, #64	@ 0x40
 8002c34:	bd70      	pop	{r4, r5, r6, pc}
        if (freeSpace >= 2)
 8002c36:	f1bc 0f01 	cmp.w	ip, #1
 8002c3a:	dd20      	ble.n	8002c7e <RI_GetRegisterMotor1+0x10e>
          switch (regID)
 8002c3c:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8002c40:	d010      	beq.n	8002c64 <RI_GetRegisterMotor1+0xf4>
 8002c42:	d872      	bhi.n	8002d2a <RI_GetRegisterMotor1+0x1ba>
 8002c44:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 8002c48:	f000 8135 	beq.w	8002eb6 <RI_GetRegisterMotor1+0x346>
 8002c4c:	f200 8162 	bhi.w	8002f14 <RI_GetRegisterMotor1+0x3a4>
 8002c50:	2890      	cmp	r0, #144	@ 0x90
 8002c52:	f000 81f5 	beq.w	8003040 <RI_GetRegisterMotor1+0x4d0>
 8002c56:	28d0      	cmp	r0, #208	@ 0xd0
 8002c58:	f040 81f0 	bne.w	800303c <RI_GetRegisterMotor1+0x4cc>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 8002c5c:	48a7      	ldr	r0, [pc, #668]	@ (8002efc <RI_GetRegisterMotor1+0x38c>)
 8002c5e:	f005 fa43 	bl	80080e8 <PID_GetKI>
 8002c62:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002c64:	2000      	movs	r0, #0
          *size = 2;
 8002c66:	2302      	movs	r3, #2
 8002c68:	802b      	strh	r3, [r5, #0]
  }
 8002c6a:	b010      	add	sp, #64	@ 0x40
 8002c6c:	bd70      	pop	{r4, r5, r6, pc}
        switch (regID)
 8002c6e:	28a0      	cmp	r0, #160	@ 0xa0
 8002c70:	d043      	beq.n	8002cfa <RI_GetRegisterMotor1+0x18a>
 8002c72:	28e0      	cmp	r0, #224	@ 0xe0
 8002c74:	d024      	beq.n	8002cc0 <RI_GetRegisterMotor1+0x150>
            *size= 0 ; /* */
 8002c76:	2300      	movs	r3, #0
 8002c78:	802b      	strh	r3, [r5, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002c7a:	2005      	movs	r0, #5
            break;
 8002c7c:	e796      	b.n	8002bac <RI_GetRegisterMotor1+0x3c>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002c7e:	2008      	movs	r0, #8
  }
 8002c80:	b010      	add	sp, #64	@ 0x40
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
        switch (regID)
 8002c84:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 8002c88:	f000 8169 	beq.w	8002f5e <RI_GetRegisterMotor1+0x3ee>
 8002c8c:	f5b0 6ffd 	cmp.w	r0, #2024	@ 0x7e8
 8002c90:	d074      	beq.n	8002d7c <RI_GetRegisterMotor1+0x20c>
 8002c92:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8002c96:	f040 81af 	bne.w	8002ff8 <RI_GetRegisterMotor1+0x488>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8002c9a:	4897      	ldr	r0, [pc, #604]	@ (8002ef8 <RI_GetRegisterMotor1+0x388>)
 8002c9c:	f7fe fe66 	bl	800196c <MCI_GetLastRampFinalSpeed>
 8002ca0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002ca4:	0043      	lsls	r3, r0, #1
 8002ca6:	f8c4 3002 	str.w	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8002caa:	4893      	ldr	r0, [pc, #588]	@ (8002ef8 <RI_GetRegisterMotor1+0x388>)
 8002cac:	f7fe fe62 	bl	8001974 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 8002cb0:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8002cb2:	80e0      	strh	r0, [r4, #6]
            *rawSize = 6;
 8002cb4:	8023      	strh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002cb6:	2000      	movs	r0, #0
            break;
 8002cb8:	2308      	movs	r3, #8
        *size = (*rawSize) + 2U;
 8002cba:	802b      	strh	r3, [r5, #0]
  }
 8002cbc:	b010      	add	sp, #64	@ 0x40
 8002cbe:	bd70      	pop	{r4, r5, r6, pc}
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8002cc0:	4b8f      	ldr	r3, [pc, #572]	@ (8002f00 <RI_GetRegisterMotor1+0x390>)
 8002cc2:	681a      	ldr	r2, [r3, #0]
  *size= 1U ; /* /0 is the min String size */
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	802b      	strh	r3, [r5, #0]
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8002cc8:	f102 0124 	add.w	r1, r2, #36	@ 0x24
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002ccc:	f992 2024 	ldrsb.w	r2, [r2, #36]	@ 0x24
 8002cd0:	b17a      	cbz	r2, 8002cf2 <RI_GetRegisterMotor1+0x182>
 8002cd2:	fa1f fc8c 	uxth.w	ip, ip
 8002cd6:	e008      	b.n	8002cea <RI_GetRegisterMotor1+0x17a>
    *tempdestString = *tempsrcString;
 8002cd8:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8002cdc:	882b      	ldrh	r3, [r5, #0]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002ce4:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8002ce8:	b11a      	cbz	r2, 8002cf2 <RI_GetRegisterMotor1+0x182>
 8002cea:	459c      	cmp	ip, r3
 8002cec:	d8f4      	bhi.n	8002cd8 <RI_GetRegisterMotor1+0x168>
    retVal = MCP_ERROR_STRING_FORMAT;
 8002cee:	2006      	movs	r0, #6
 8002cf0:	e75c      	b.n	8002bac <RI_GetRegisterMotor1+0x3c>
    *tempdestString = (int8_t)0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	7023      	strb	r3, [r4, #0]
  uint8_t retVal = MCP_CMD_OK;
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	e758      	b.n	8002bac <RI_GetRegisterMotor1+0x3c>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8002cfa:	4a82      	ldr	r2, [pc, #520]	@ (8002f04 <RI_GetRegisterMotor1+0x394>)
  *size= 1U ; /* /0 is the min String size */
 8002cfc:	2301      	movs	r3, #1
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8002cfe:	6811      	ldr	r1, [r2, #0]
  *size= 1U ; /* /0 is the min String size */
 8002d00:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002d02:	f991 2000 	ldrsb.w	r2, [r1]
 8002d06:	2a00      	cmp	r2, #0
 8002d08:	d0f3      	beq.n	8002cf2 <RI_GetRegisterMotor1+0x182>
 8002d0a:	fa1f fc8c 	uxth.w	ip, ip
 8002d0e:	e009      	b.n	8002d24 <RI_GetRegisterMotor1+0x1b4>
    *tempdestString = *tempsrcString;
 8002d10:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8002d14:	882b      	ldrh	r3, [r5, #0]
 8002d16:	3301      	adds	r3, #1
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8002d1c:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8002d20:	2a00      	cmp	r2, #0
 8002d22:	d0e6      	beq.n	8002cf2 <RI_GetRegisterMotor1+0x182>
 8002d24:	459c      	cmp	ip, r3
 8002d26:	d8f3      	bhi.n	8002d10 <RI_GetRegisterMotor1+0x1a0>
 8002d28:	e7e1      	b.n	8002cee <RI_GetRegisterMotor1+0x17e>
          switch (regID)
 8002d2a:	f241 4390 	movw	r3, #5264	@ 0x1490
 8002d2e:	4298      	cmp	r0, r3
 8002d30:	f000 80c6 	beq.w	8002ec0 <RI_GetRegisterMotor1+0x350>
 8002d34:	f240 816b 	bls.w	800300e <RI_GetRegisterMotor1+0x49e>
 8002d38:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 8002d3c:	4298      	cmp	r0, r3
 8002d3e:	f000 8173 	beq.w	8003028 <RI_GetRegisterMotor1+0x4b8>
 8002d42:	f641 2390 	movw	r3, #6800	@ 0x1a90
 8002d46:	4298      	cmp	r0, r3
 8002d48:	f040 8178 	bne.w	800303c <RI_GetRegisterMotor1+0x4cc>
              *regdataU16 = MCI_GetDutyCycleRef(pMCIN);
 8002d4c:	486a      	ldr	r0, [pc, #424]	@ (8002ef8 <RI_GetRegisterMotor1+0x388>)
 8002d4e:	f7fe fe23 	bl	8001998 <MCI_GetDutyCycleRef>
 8002d52:	8020      	strh	r0, [r4, #0]
              break;
 8002d54:	e786      	b.n	8002c64 <RI_GetRegisterMotor1+0xf4>
          switch (regID)
 8002d56:	f5b0 6fd9 	cmp.w	r0, #1736	@ 0x6c8
 8002d5a:	f000 80a8 	beq.w	8002eae <RI_GetRegisterMotor1+0x33e>
 8002d5e:	f5b0 6fe1 	cmp.w	r0, #1800	@ 0x708
 8002d62:	f040 8152 	bne.w	800300a <RI_GetRegisterMotor1+0x49a>
              *data = PWMC_GetQuasiSynchState(&PWM_Handle_M1);
 8002d66:	4868      	ldr	r0, [pc, #416]	@ (8002f08 <RI_GetRegisterMotor1+0x398>)
 8002d68:	f005 fc38 	bl	80085dc <PWMC_GetQuasiSynchState>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8002d6c:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8002d6e:	2000      	movs	r0, #0
          *size = 1;
 8002d70:	2301      	movs	r3, #1
 8002d72:	802b      	strh	r3, [r5, #0]
  }
 8002d74:	b010      	add	sp, #64	@ 0x40
 8002d76:	bd70      	pop	{r4, r5, r6, pc}
          switch (regID)
 8002d78:	2005      	movs	r0, #5
 8002d7a:	e758      	b.n	8002c2e <RI_GetRegisterMotor1+0xbe>
            (void)BADC_GetBemfSensorlessParam(&Bemf_ADC_M1, &bemfAdcConfig,&ZcRising2CommDelay,&ZcFalling2CommDelay,&bemfAdcDemagConfig,
 8002d7c:	f10d 011e 	add.w	r1, sp, #30
 8002d80:	ab07      	add	r3, sp, #28
 8002d82:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8002d86:	f10d 021a 	add.w	r2, sp, #26
 8002d8a:	ab0c      	add	r3, sp, #48	@ 0x30
 8002d8c:	e9cd 3200 	strd	r3, r2, [sp]
 8002d90:	485e      	ldr	r0, [pc, #376]	@ (8002f0c <RI_GetRegisterMotor1+0x39c>)
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPointOff) / PWM_PERIOD_CYCLES) + 1U;
 8002d92:	4e5f      	ldr	r6, [pc, #380]	@ (8002f10 <RI_GetRegisterMotor1+0x3a0>)
            (void)BADC_GetBemfSensorlessParam(&Bemf_ADC_M1, &bemfAdcConfig,&ZcRising2CommDelay,&ZcFalling2CommDelay,&bemfAdcDemagConfig,
 8002d94:	ab06      	add	r3, sp, #24
 8002d96:	f10d 0216 	add.w	r2, sp, #22
 8002d9a:	a908      	add	r1, sp, #32
 8002d9c:	f004 ffb2 	bl	8007d04 <BADC_GetBemfSensorlessParam>
            *ConvertedData = bemfAdcConfig.AdcThresholdHighPerc;
 8002da0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
            *ConvertedData = ((ZcRising2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(ZcRising2CommDelay * 0.12);
 8002da4:	f8bd 0016 	ldrh.w	r0, [sp, #22]
            *ConvertedData = bemfAdcConfig.AdcThresholdHighPerc;
 8002da8:	2300      	movs	r3, #0
 8002daa:	4619      	mov	r1, r3
 8002dac:	f362 030f 	bfi	r3, r2, #0, #16
 8002db0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8002db4:	f362 431f 	bfi	r3, r2, #16, #16
 8002db8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8002dbc:	f8c4 3002 	str.w	r3, [r4, #2]
 8002dc0:	f362 010f 	bfi	r1, r2, #0, #16
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPointOff) / PWM_PERIOD_CYCLES) + 1U;
 8002dc4:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPointOn) / PWM_PERIOD_CYCLES) + 1U;
 8002dc8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPointOff) / PWM_PERIOD_CYCLES) + 1U;
 8002dcc:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8002dd0:	fb0c f202 	mul.w	r2, ip, r2
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPointOn) / PWM_PERIOD_CYCLES) + 1U;
 8002dd4:	fb0c f303 	mul.w	r3, ip, r3
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPointOff) / PWM_PERIOD_CYCLES) + 1U;
 8002dd8:	fba6 c202 	umull	ip, r2, r6, r2
 8002ddc:	0a92      	lsrs	r2, r2, #10
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPointOn) / PWM_PERIOD_CYCLES) + 1U;
 8002dde:	fba6 6303 	umull	r6, r3, r6, r3
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPointOff) / PWM_PERIOD_CYCLES) + 1U;
 8002de2:	3201      	adds	r2, #1
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPointOn) / PWM_PERIOD_CYCLES) + 1U;
 8002de4:	0a9b      	lsrs	r3, r3, #10
            *ConvertedData = bemfAdcConfig.AdcThresholdHighPerc;
 8002de6:	f362 411f 	bfi	r1, r2, #16, #16
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPointOn) / PWM_PERIOD_CYCLES) + 1U;
 8002dea:	3301      	adds	r3, #1
            *ConvertedData = ((ZcRising2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(ZcRising2CommDelay * 0.12);
 8002dec:	2808      	cmp	r0, #8
            *ConvertedData = bemfAdcConfig.AdcThresholdHighPerc;
 8002dee:	f8c4 1006 	str.w	r1, [r4, #6]
            *ConvertedData = (uint16_t)((100 * bemfAdcConfig.SamplingPointOn) / PWM_PERIOD_CYCLES) + 1U;
 8002df2:	8163      	strh	r3, [r4, #10]
            *ConvertedData = ((ZcRising2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(ZcRising2CommDelay * 0.12);
 8002df4:	f240 812b 	bls.w	800304e <RI_GetRegisterMotor1+0x4de>
 8002df8:	f7fd fc8a 	bl	8000710 <__aeabi_i2d>
 8002dfc:	a33c      	add	r3, pc, #240	@ (adr r3, 8002ef0 <RI_GetRegisterMotor1+0x380>)
 8002dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e02:	f7fd fa09 	bl	8000218 <__aeabi_dmul>
 8002e06:	f7fd fced 	bl	80007e4 <__aeabi_d2uiz>
 8002e0a:	b283      	uxth	r3, r0
            *ConvertedData = ((ZcFalling2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(ZcFalling2CommDelay * 0.12);
 8002e0c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
            *ConvertedData = ((ZcRising2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(ZcRising2CommDelay * 0.12);
 8002e10:	81a3      	strh	r3, [r4, #12]
            *ConvertedData = ((ZcFalling2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(ZcFalling2CommDelay * 0.12);
 8002e12:	2808      	cmp	r0, #8
 8002e14:	f240 8119 	bls.w	800304a <RI_GetRegisterMotor1+0x4da>
 8002e18:	f7fd fc7a 	bl	8000710 <__aeabi_i2d>
 8002e1c:	a334      	add	r3, pc, #208	@ (adr r3, 8002ef0 <RI_GetRegisterMotor1+0x380>)
 8002e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e22:	f7fd f9f9 	bl	8000218 <__aeabi_dmul>
 8002e26:	f7fd fcdd 	bl	80007e4 <__aeabi_d2uiz>
 8002e2a:	b282      	uxth	r2, r0
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	4619      	mov	r1, r3
 8002e30:	f362 030f 	bfi	r3, r2, #0, #16
            *ConvertedData = bemfAdcDemagConfig.DemagMinimumThreshold;
 8002e34:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
            *ConvertedData = ((ZcFalling2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(ZcFalling2CommDelay * 0.12);
 8002e36:	f362 431f 	bfi	r3, r2, #16, #16
            *ConvertedData = (uint16_t) ((bemfAdcDemagConfig.DemagMinimumSpeedUnit * U_RPM) / SPEED_UNIT) ;
 8002e3a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
            *ConvertedData = ((ZcFalling2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(ZcFalling2CommDelay * 0.12);
 8002e3e:	f8c4 300e 	str.w	r3, [r4, #14]
            *ConvertedData = (uint16_t) ((bemfAdcDemagConfig.DemagMinimumSpeedUnit * U_RPM) / SPEED_UNIT) ;
 8002e42:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002e46:	0052      	lsls	r2, r2, #1
            *ConvertedData = (uint16_t)((100 * OnSensingEnThres) / PWM_PERIOD_CYCLES) + 1U;
 8002e48:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8002e4c:	2064      	movs	r0, #100	@ 0x64
            *ConvertedData = ((ZcFalling2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(ZcFalling2CommDelay * 0.12);
 8002e4e:	f362 010f 	bfi	r1, r2, #0, #16
            *ConvertedData = (uint16_t)((100 * OnSensingEnThres) / PWM_PERIOD_CYCLES) + 1U;
 8002e52:	4a2f      	ldr	r2, [pc, #188]	@ (8002f10 <RI_GetRegisterMotor1+0x3a0>)
 8002e54:	fb00 f303 	mul.w	r3, r0, r3
 8002e58:	fba2 6303 	umull	r6, r3, r2, r3
 8002e5c:	0a9b      	lsrs	r3, r3, #10
 8002e5e:	3301      	adds	r3, #1
            *ConvertedData = ((ZcFalling2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(ZcFalling2CommDelay * 0.12);
 8002e60:	f363 411f 	bfi	r1, r3, #16, #16
            *ConvertedData = (uint16_t)((100 * OnSensingDisThres) / PWM_PERIOD_CYCLES) + 1U;
 8002e64:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            *ConvertedData = ((ZcFalling2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(ZcFalling2CommDelay * 0.12);
 8002e68:	f8c4 1012 	str.w	r1, [r4, #18]
            *ConvertedData = (uint16_t)((100 * OnSensingDisThres) / PWM_PERIOD_CYCLES) + 1U;
 8002e6c:	fb00 f303 	mul.w	r3, r0, r3
 8002e70:	fba2 2303 	umull	r2, r3, r2, r3
 8002e74:	0a9b      	lsrs	r3, r3, #10
 8002e76:	3301      	adds	r3, #1
            *ConvertedData = bemfAdcConfig.AWDfiltering;
 8002e78:	f89d 102e 	ldrb.w	r1, [sp, #46]	@ 0x2e
            *ConvertedData = computationdelayChoice;
 8002e7c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
            *ConvertedData = (uint16_t)((100 * OnSensingDisThres) / PWM_PERIOD_CYCLES) + 1U;
 8002e80:	82e3      	strh	r3, [r4, #22]
            *rawSize = 26;
 8002e82:	231a      	movs	r3, #26
 8002e84:	8023      	strh	r3, [r4, #0]
            *ConvertedData = bemfAdcConfig.AWDfiltering;
 8002e86:	8321      	strh	r1, [r4, #24]
            *ConvertedData = computationdelayChoice;
 8002e88:	8362      	strh	r2, [r4, #26]
            break;
 8002e8a:	231c      	movs	r3, #28
    uint8_t retVal = MCP_CMD_OK;
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	e714      	b.n	8002cba <RI_GetRegisterMotor1+0x14a>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002e90:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(SixStepFwConfig_reg_t);
 8002e94:	230b      	movs	r3, #11
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002e96:	f1bc 0f0c 	cmp.w	ip, #12
            *rawSize = (uint16_t)sizeof(SixStepFwConfig_reg_t);
 8002e9a:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002e9c:	f200 80f9 	bhi.w	8003092 <RI_GetRegisterMotor1+0x522>
 8002ea0:	230d      	movs	r3, #13
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002ea2:	2008      	movs	r0, #8
 8002ea4:	e709      	b.n	8002cba <RI_GetRegisterMotor1+0x14a>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8002ea6:	4814      	ldr	r0, [pc, #80]	@ (8002ef8 <RI_GetRegisterMotor1+0x388>)
 8002ea8:	f7fe fcfe 	bl	80018a8 <MCI_GetSTMState>
              break;
 8002eac:	e75e      	b.n	8002d6c <RI_GetRegisterMotor1+0x1fc>
              *data = PWMC_GetLSModConfig(&PWM_Handle_M1);
 8002eae:	4816      	ldr	r0, [pc, #88]	@ (8002f08 <RI_GetRegisterMotor1+0x398>)
 8002eb0:	f005 fb6a 	bl	8008588 <PWMC_GetLSModConfig>
              break;
 8002eb4:	e75a      	b.n	8002d6c <RI_GetRegisterMotor1+0x1fc>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 8002eb6:	4811      	ldr	r0, [pc, #68]	@ (8002efc <RI_GetRegisterMotor1+0x38c>)
 8002eb8:	f005 f942 	bl	8008140 <PID_GetKD>
 8002ebc:	8020      	strh	r0, [r4, #0]
              break;
 8002ebe:	e6d1      	b.n	8002c64 <RI_GetRegisterMotor1+0xf4>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(&PIDSpeedHandle_M1);
 8002ec0:	480e      	ldr	r0, [pc, #56]	@ (8002efc <RI_GetRegisterMotor1+0x38c>)
 8002ec2:	f005 f921 	bl	8008108 <PID_GetKIDivisorPOW2>
 8002ec6:	8020      	strh	r0, [r4, #0]
              break;
 8002ec8:	e6cc      	b.n	8002c64 <RI_GetRegisterMotor1+0xf4>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002eca:	4608      	mov	r0, r1
 8002ecc:	e66e      	b.n	8002bac <RI_GetRegisterMotor1+0x3c>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002ece:	480a      	ldr	r0, [pc, #40]	@ (8002ef8 <RI_GetRegisterMotor1+0x388>)
 8002ed0:	f7fe fd58 	bl	8001984 <MCI_GetAvrgMecSpeedUnit>
 8002ed4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002ed8:	0040      	lsls	r0, r0, #1
 8002eda:	6020      	str	r0, [r4, #0]
              break;
 8002edc:	e6a6      	b.n	8002c2c <RI_GetRegisterMotor1+0xbc>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002ede:	4806      	ldr	r0, [pc, #24]	@ (8002ef8 <RI_GetRegisterMotor1+0x388>)
 8002ee0:	f7fe fd56 	bl	8001990 <MCI_GetMecSpeedRefUnit>
 8002ee4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002ee8:	0040      	lsls	r0, r0, #1
 8002eea:	6020      	str	r0, [r4, #0]
              break;
 8002eec:	e69e      	b.n	8002c2c <RI_GetRegisterMotor1+0xbc>
 8002eee:	bf00      	nop
 8002ef0:	eb851eb8 	.word	0xeb851eb8
 8002ef4:	3fbeb851 	.word	0x3fbeb851
 8002ef8:	20000000 	.word	0x20000000
 8002efc:	200001e4 	.word	0x200001e4
 8002f00:	200002a4 	.word	0x200002a4
 8002f04:	200002ac 	.word	0x200002ac
 8002f08:	20000028 	.word	0x20000028
 8002f0c:	2000005c 	.word	0x2000005c
 8002f10:	6bf790a9 	.word	0x6bf790a9
          switch (regID)
 8002f14:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8002f18:	f000 808b 	beq.w	8003032 <RI_GetRegisterMotor1+0x4c2>
 8002f1c:	f5b0 6fba 	cmp.w	r0, #1488	@ 0x5d0
 8002f20:	f040 808c 	bne.w	800303c <RI_GetRegisterMotor1+0x4cc>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 8002f24:	4868      	ldr	r0, [pc, #416]	@ (80030c8 <RI_GetRegisterMotor1+0x558>)
 8002f26:	f005 f8bd 	bl	80080a4 <NTC_GetAvTemp_C>
 8002f2a:	8020      	strh	r0, [r4, #0]
              break;
 8002f2c:	e69a      	b.n	8002c64 <RI_GetRegisterMotor1+0xf4>
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8002f2e:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = 12;
 8002f32:	230c      	movs	r3, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8002f34:	f1bc 0f0d 	cmp.w	ip, #13
            *rawSize = 12;
 8002f38:	8023      	strh	r3, [r4, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8002f3a:	f240 808d 	bls.w	8003058 <RI_GetRegisterMotor1+0x4e8>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8002f3e:	4b63      	ldr	r3, [pc, #396]	@ (80030cc <RI_GetRegisterMotor1+0x55c>)
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	6859      	ldr	r1, [r3, #4]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f8c4 300e 	str.w	r3, [r4, #14]
 8002f4c:	f8c4 0002 	str.w	r0, [r4, #2]
 8002f50:	f8c4 1006 	str.w	r1, [r4, #6]
 8002f54:	f8c4 200a 	str.w	r2, [r4, #10]
 8002f58:	230e      	movs	r3, #14
    uint8_t retVal = MCP_CMD_OK;
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	e6ad      	b.n	8002cba <RI_GetRegisterMotor1+0x14a>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002f5e:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8002f62:	2328      	movs	r3, #40	@ 0x28
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002f64:	f1bc 0f29 	cmp.w	ip, #41	@ 0x29
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8002f68:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002f6a:	d972      	bls.n	8003052 <RI_GetRegisterMotor1+0x4e2>
  {
    retValue = false;
  }
  else
  {
    phaseData->hFinalPulse = (int16_t)pHandle->ParamsData[phaseNumber].hFinalPulse;
 8002f6c:	4b58      	ldr	r3, [pc, #352]	@ (80030d0 <RI_GetRegisterMotor1+0x560>)
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8002f6e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8002f72:	8a18      	ldrh	r0, [r3, #16]
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8002f74:	8999      	ldrh	r1, [r3, #12]
                *durationms  = revUpPhase.hDurationms;
 8002f76:	8121      	strh	r1, [r4, #8]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8002f78:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalPulse = (uint16_t)revUpPhase.hFinalPulse; //cstat !MISRAC2012-Rule-11.3
 8002f7c:	80e0      	strh	r0, [r4, #6]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8002f7e:	0052      	lsls	r2, r2, #1
    phaseData->hFinalPulse = (int16_t)pHandle->ParamsData[phaseNumber].hFinalPulse;
 8002f80:	8b98      	ldrh	r0, [r3, #28]
 8002f82:	f8c4 2002 	str.w	r2, [r4, #2]
 8002f86:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8002f8a:	8b19      	ldrh	r1, [r3, #24]
                *durationms  = revUpPhase.hDurationms;
 8002f8c:	8221      	strh	r1, [r4, #16]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8002f8e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalPulse = (uint16_t)revUpPhase.hFinalPulse; //cstat !MISRAC2012-Rule-11.3
 8002f92:	81e0      	strh	r0, [r4, #14]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8002f94:	0052      	lsls	r2, r2, #1
    phaseData->hFinalPulse = (int16_t)pHandle->ParamsData[phaseNumber].hFinalPulse;
 8002f96:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
 8002f98:	f8c4 200a 	str.w	r2, [r4, #10]
 8002f9c:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	@ 0x26
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8002fa0:	8c99      	ldrh	r1, [r3, #36]	@ 0x24
                *durationms  = revUpPhase.hDurationms;
 8002fa2:	8321      	strh	r1, [r4, #24]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8002fa4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalPulse = (uint16_t)revUpPhase.hFinalPulse; //cstat !MISRAC2012-Rule-11.3
 8002fa8:	82e0      	strh	r0, [r4, #22]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8002faa:	0052      	lsls	r2, r2, #1
    phaseData->hFinalPulse = (int16_t)pHandle->ParamsData[phaseNumber].hFinalPulse;
 8002fac:	8e98      	ldrh	r0, [r3, #52]	@ 0x34
 8002fae:	f8c4 2012 	str.w	r2, [r4, #18]
 8002fb2:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	@ 0x32
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8002fb6:	8e19      	ldrh	r1, [r3, #48]	@ 0x30
                *durationms  = revUpPhase.hDurationms;
 8002fb8:	8421      	strh	r1, [r4, #32]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8002fba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalPulse = (uint16_t)revUpPhase.hFinalPulse; //cstat !MISRAC2012-Rule-11.3
 8002fbe:	83e0      	strh	r0, [r4, #30]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8002fc0:	0052      	lsls	r2, r2, #1
    phaseData->hFinalPulse = (int16_t)pHandle->ParamsData[phaseNumber].hFinalPulse;
 8002fc2:	f8b3 0040 	ldrh.w	r0, [r3, #64]	@ 0x40
 8002fc6:	f8c4 201a 	str.w	r2, [r4, #26]
 8002fca:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	@ 0x3e
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8002fce:	8f99      	ldrh	r1, [r3, #60]	@ 0x3c
                *durationms  = revUpPhase.hDurationms;
 8002fd0:	8521      	strh	r1, [r4, #40]	@ 0x28
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8002fd2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002fd6:	0052      	lsls	r2, r2, #1
                *finalPulse = (uint16_t)revUpPhase.hFinalPulse; //cstat !MISRAC2012-Rule-11.3
 8002fd8:	84e0      	strh	r0, [r4, #38]	@ 0x26
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8002fda:	f8c4 2022 	str.w	r2, [r4, #34]	@ 0x22
                *durationms  = revUpPhase.hDurationms;
 8002fde:	232a      	movs	r3, #42	@ 0x2a
    uint8_t retVal = MCP_CMD_OK;
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	e66a      	b.n	8002cba <RI_GetRegisterMotor1+0x14a>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002fe4:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8002fe8:	2310      	movs	r3, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002fea:	f1bc 0f11 	cmp.w	ip, #17
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8002fee:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8002ff0:	d85c      	bhi.n	80030ac <RI_GetRegisterMotor1+0x53c>
 8002ff2:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002ff4:	2008      	movs	r0, #8
 8002ff6:	e660      	b.n	8002cba <RI_GetRegisterMotor1+0x14a>
        *size = (*rawSize) + 2U;
 8002ff8:	8823      	ldrh	r3, [r4, #0]
 8002ffa:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002ffc:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	e65b      	b.n	8002cba <RI_GetRegisterMotor1+0x14a>
  return ((MC_NULL == pHandle) ? 0U : (uint8_t)pHandle->bPhaseNbr);
 8003002:	4b33      	ldr	r3, [pc, #204]	@ (80030d0 <RI_GetRegisterMotor1+0x560>)
 8003004:	f893 004a 	ldrb.w	r0, [r3, #74]	@ 0x4a
              break;
 8003008:	e6b0      	b.n	8002d6c <RI_GetRegisterMotor1+0x1fc>
          switch (regID)
 800300a:	2005      	movs	r0, #5
 800300c:	e6b0      	b.n	8002d70 <RI_GetRegisterMotor1+0x200>
          switch (regID)
 800300e:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8003012:	f43f ae27 	beq.w	8002c64 <RI_GetRegisterMotor1+0xf4>
 8003016:	f241 4350 	movw	r3, #5200	@ 0x1450
 800301a:	4298      	cmp	r0, r3
 800301c:	d10e      	bne.n	800303c <RI_GetRegisterMotor1+0x4cc>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(&PIDSpeedHandle_M1);
 800301e:	482d      	ldr	r0, [pc, #180]	@ (80030d4 <RI_GetRegisterMotor1+0x564>)
 8003020:	f005 f868 	bl	80080f4 <PID_GetKPDivisorPOW2>
 8003024:	8020      	strh	r0, [r4, #0]
              break;
 8003026:	e61d      	b.n	8002c64 <RI_GetRegisterMotor1+0xf4>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDSpeedHandle_M1);
 8003028:	482a      	ldr	r0, [pc, #168]	@ (80030d4 <RI_GetRegisterMotor1+0x564>)
 800302a:	f005 f88d 	bl	8008148 <PID_GetKDDivisorPOW2>
 800302e:	8020      	strh	r0, [r4, #0]
              break;
 8003030:	e618      	b.n	8002c64 <RI_GetRegisterMotor1+0xf4>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 8003032:	4829      	ldr	r0, [pc, #164]	@ (80030d8 <RI_GetRegisterMotor1+0x568>)
 8003034:	f004 f9de 	bl	80073f4 <VBS_GetAvBusVoltage_V>
 8003038:	8020      	strh	r0, [r4, #0]
              break;
 800303a:	e613      	b.n	8002c64 <RI_GetRegisterMotor1+0xf4>
          switch (regID)
 800303c:	2005      	movs	r0, #5
 800303e:	e612      	b.n	8002c66 <RI_GetRegisterMotor1+0xf6>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 8003040:	4824      	ldr	r0, [pc, #144]	@ (80030d4 <RI_GetRegisterMotor1+0x564>)
 8003042:	f005 f84d 	bl	80080e0 <PID_GetKP>
 8003046:	8020      	strh	r0, [r4, #0]
              break;
 8003048:	e60c      	b.n	8002c64 <RI_GetRegisterMotor1+0xf4>
            *ConvertedData = ((ZcFalling2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(ZcFalling2CommDelay * 0.12);
 800304a:	2201      	movs	r2, #1
 800304c:	e6ee      	b.n	8002e2c <RI_GetRegisterMotor1+0x2bc>
            *ConvertedData = ((ZcRising2CommDelay * 0.12) < 1) ? 1 : (uint16_t)(ZcRising2CommDelay * 0.12);
 800304e:	2301      	movs	r3, #1
 8003050:	e6dc      	b.n	8002e0c <RI_GetRegisterMotor1+0x29c>
 8003052:	232a      	movs	r3, #42	@ 0x2a
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003054:	2008      	movs	r0, #8
 8003056:	e630      	b.n	8002cba <RI_GetRegisterMotor1+0x14a>
 8003058:	230e      	movs	r3, #14
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800305a:	2008      	movs	r0, #8
 800305c:	e62d      	b.n	8002cba <RI_GetRegisterMotor1+0x14a>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 800305e:	4b1f      	ldr	r3, [pc, #124]	@ (80030dc <RI_GetRegisterMotor1+0x56c>)
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f103 0c30 	add.w	ip, r3, #48	@ 0x30
 8003066:	681c      	ldr	r4, [r3, #0]
 8003068:	6858      	ldr	r0, [r3, #4]
 800306a:	6899      	ldr	r1, [r3, #8]
 800306c:	68de      	ldr	r6, [r3, #12]
 800306e:	60d6      	str	r6, [r2, #12]
 8003070:	3310      	adds	r3, #16
 8003072:	4563      	cmp	r3, ip
 8003074:	6014      	str	r4, [r2, #0]
 8003076:	6050      	str	r0, [r2, #4]
 8003078:	6091      	str	r1, [r2, #8]
 800307a:	f102 0210 	add.w	r2, r2, #16
 800307e:	d1f2      	bne.n	8003066 <RI_GetRegisterMotor1+0x4f6>
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	6859      	ldr	r1, [r3, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	6093      	str	r3, [r2, #8]
 8003088:	6010      	str	r0, [r2, #0]
 800308a:	6051      	str	r1, [r2, #4]
 800308c:	233e      	movs	r3, #62	@ 0x3e
    uint8_t retVal = MCP_CMD_OK;
 800308e:	2000      	movs	r0, #0
 8003090:	e613      	b.n	8002cba <RI_GetRegisterMotor1+0x14a>
              SixStepFwConfig_reg_t const *pSixStepConfig_reg = SixStepConfig_reg[motorID];
 8003092:	4b13      	ldr	r3, [pc, #76]	@ (80030e0 <RI_GetRegisterMotor1+0x570>)
              (void)memcpy(rawData, (const uint8_t *)pSixStepConfig_reg, sizeof(SixStepFwConfig_reg_t));
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6819      	ldr	r1, [r3, #0]
 8003098:	6858      	ldr	r0, [r3, #4]
 800309a:	6050      	str	r0, [r2, #4]
 800309c:	6011      	str	r1, [r2, #0]
 800309e:	8919      	ldrh	r1, [r3, #8]
 80030a0:	7a9b      	ldrb	r3, [r3, #10]
 80030a2:	7293      	strb	r3, [r2, #10]
 80030a4:	8111      	strh	r1, [r2, #8]
 80030a6:	230d      	movs	r3, #13
    uint8_t retVal = MCP_CMD_OK;
 80030a8:	2000      	movs	r0, #0
 80030aa:	e606      	b.n	8002cba <RI_GetRegisterMotor1+0x14a>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 80030ac:	4b0d      	ldr	r3, [pc, #52]	@ (80030e4 <RI_GetRegisterMotor1+0x574>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6858      	ldr	r0, [r3, #4]
 80030b2:	681c      	ldr	r4, [r3, #0]
 80030b4:	6899      	ldr	r1, [r3, #8]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	60d3      	str	r3, [r2, #12]
 80030ba:	6050      	str	r0, [r2, #4]
 80030bc:	6014      	str	r4, [r2, #0]
 80030be:	6091      	str	r1, [r2, #8]
 80030c0:	2312      	movs	r3, #18
    uint8_t retVal = MCP_CMD_OK;
 80030c2:	2000      	movs	r0, #0
 80030c4:	e5f9      	b.n	8002cba <RI_GetRegisterMotor1+0x14a>
 80030c6:	bf00      	nop
 80030c8:	2000023c 	.word	0x2000023c
 80030cc:	200002b0 	.word	0x200002b0
 80030d0:	2000015c 	.word	0x2000015c
 80030d4:	200001e4 	.word	0x200001e4
 80030d8:	20000210 	.word	0x20000210
 80030dc:	200002a4 	.word	0x200002a4
 80030e0:	200002a8 	.word	0x200002a8
 80030e4:	200002a0 	.word	0x200002a0

080030e8 <RI_GetIDSize>:
  return (retVal);
}

uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 80030e8:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 80030ec:	3808      	subs	r0, #8
 80030ee:	b2c0      	uxtb	r0, r0
 80030f0:	2810      	cmp	r0, #16
 80030f2:	bf9a      	itte	ls
 80030f4:	4b01      	ldrls	r3, [pc, #4]	@ (80030fc <RI_GetIDSize+0x14>)
 80030f6:	5c18      	ldrbls	r0, [r3, r0]
 80030f8:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 80030fa:	4770      	bx	lr
 80030fc:	08008f80 	.word	0x08008f80

08003100 <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[0];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 8003100:	f000 0338 	and.w	r3, r0, #56	@ 0x38
 8003104:	2b10      	cmp	r3, #16
 8003106:	d003      	beq.n	8003110 <RI_GetPtrReg+0x10>
    {
      case TYPE_DATA_16BIT:
      {
        switch (regID)
 8003108:	4b07      	ldr	r3, [pc, #28]	@ (8003128 <RI_GetPtrReg+0x28>)
            break;
          }

          default:
          {
            *dataPtr = &nullData16;
 800310a:	600b      	str	r3, [r1, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 800310c:	2005      	movs	r0, #5
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 800310e:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 8003110:	f020 0007 	bic.w	r0, r0, #7
        switch (regID)
 8003114:	f641 2390 	movw	r3, #6800	@ 0x1a90
 8003118:	4298      	cmp	r0, r3
 800311a:	d1f5      	bne.n	8003108 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pSixStepVars->DutyCycleRef);
 800311c:	4b03      	ldr	r3, [pc, #12]	@ (800312c <RI_GetPtrReg+0x2c>)
 800311e:	685b      	ldr	r3, [r3, #4]
            *dataPtr = &nullData16;
 8003120:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003122:	2000      	movs	r0, #0
}
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	20001a18 	.word	0x20001a18
 800312c:	20000000 	.word	0x20000000

08003130 <RCM_RegisterRegConv>:
  * @param  regConv Pointer to the regular conversion parameters.
  *         Contains ADC, Channel and sampling time to be used.
  *
  */
void RCM_RegisterRegConv(RegConv_t *regConv)
{
 8003130:	b570      	push	{r4, r5, r6, lr}

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003132:	4c8c      	ldr	r4, [pc, #560]	@ (8003364 <RCM_RegisterRegConv+0x234>)
 8003134:	6822      	ldr	r2, [r4, #0]
 8003136:	2a00      	cmp	r2, #0
 8003138:	d033      	beq.n	80031a2 <RCM_RegisterRegConv+0x72>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800313a:	f890 c004 	ldrb.w	ip, [r0, #4]
 800313e:	7913      	ldrb	r3, [r2, #4]
 8003140:	4563      	cmp	r3, ip
 8003142:	d01e      	beq.n	8003182 <RCM_RegisterRegConv+0x52>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003144:	6861      	ldr	r1, [r4, #4]
 8003146:	2900      	cmp	r1, #0
 8003148:	f000 80d3 	beq.w	80032f2 <RCM_RegisterRegConv+0x1c2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800314c:	790b      	ldrb	r3, [r1, #4]
 800314e:	4563      	cmp	r3, ip
 8003150:	d036      	beq.n	80031c0 <RCM_RegisterRegConv+0x90>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003152:	68a5      	ldr	r5, [r4, #8]
 8003154:	2d00      	cmp	r5, #0
 8003156:	f000 80ad 	beq.w	80032b4 <RCM_RegisterRegConv+0x184>
  uint8_t handle = 255U;
 800315a:	22ff      	movs	r2, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800315c:	792b      	ldrb	r3, [r5, #4]
 800315e:	4563      	cmp	r3, ip
 8003160:	f000 80b8 	beq.w	80032d4 <RCM_RegisterRegConv+0x1a4>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003164:	68e5      	ldr	r5, [r4, #12]
 8003166:	2d00      	cmp	r5, #0
 8003168:	f000 80bc 	beq.w	80032e4 <RCM_RegisterRegConv+0x1b4>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800316c:	792b      	ldrb	r3, [r5, #4]
 800316e:	4563      	cmp	r3, ip
 8003170:	f000 80ce 	beq.w	8003310 <RCM_RegisterRegConv+0x1e0>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 8003174:	2a03      	cmp	r2, #3
 8003176:	bf98      	it	ls
 8003178:	6803      	ldrls	r3, [r0, #0]
 800317a:	d936      	bls.n	80031ea <RCM_RegisterRegConv+0xba>
 800317c:	22ff      	movs	r2, #255	@ 0xff
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 800317e:	7302      	strb	r2, [r0, #12]
}
 8003180:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003182:	6803      	ldr	r3, [r0, #0]
 8003184:	6812      	ldr	r2, [r2, #0]
 8003186:	4293      	cmp	r3, r2
 8003188:	d031      	beq.n	80031ee <RCM_RegisterRegConv+0xbe>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800318a:	6861      	ldr	r1, [r4, #4]
 800318c:	2900      	cmp	r1, #0
 800318e:	f000 80da 	beq.w	8003346 <RCM_RegisterRegConv+0x216>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003192:	790a      	ldrb	r2, [r1, #4]
 8003194:	4562      	cmp	r2, ip
 8003196:	f000 80cb 	beq.w	8003330 <RCM_RegisterRegConv+0x200>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800319a:	68a5      	ldr	r5, [r4, #8]
 800319c:	2d00      	cmp	r5, #0
 800319e:	d1dc      	bne.n	800315a <RCM_RegisterRegConv+0x2a>
 80031a0:	e089      	b.n	80032b6 <RCM_RegisterRegConv+0x186>
 80031a2:	6861      	ldr	r1, [r4, #4]
 80031a4:	2900      	cmp	r1, #0
 80031a6:	f000 80a8 	beq.w	80032fa <RCM_RegisterRegConv+0x1ca>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80031aa:	f890 c004 	ldrb.w	ip, [r0, #4]
 80031ae:	790b      	ldrb	r3, [r1, #4]
 80031b0:	4563      	cmp	r3, ip
 80031b2:	d006      	beq.n	80031c2 <RCM_RegisterRegConv+0x92>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80031b4:	68a5      	ldr	r5, [r4, #8]
 80031b6:	2d00      	cmp	r5, #0
 80031b8:	d1d0      	bne.n	800315c <RCM_RegisterRegConv+0x2c>
 80031ba:	6803      	ldr	r3, [r0, #0]
 80031bc:	462a      	mov	r2, r5
 80031be:	e00b      	b.n	80031d8 <RCM_RegisterRegConv+0xa8>
  uint8_t handle = 255U;
 80031c0:	22ff      	movs	r2, #255	@ 0xff
 80031c2:	6803      	ldr	r3, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80031c4:	6809      	ldr	r1, [r1, #0]
 80031c6:	4299      	cmp	r1, r3
 80031c8:	f000 80a8 	beq.w	800331c <RCM_RegisterRegConv+0x1ec>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80031cc:	68a5      	ldr	r5, [r4, #8]
 80031ce:	2d00      	cmp	r5, #0
 80031d0:	d1c4      	bne.n	800315c <RCM_RegisterRegConv+0x2c>
 80031d2:	2a04      	cmp	r2, #4
 80031d4:	d86f      	bhi.n	80032b6 <RCM_RegisterRegConv+0x186>
 80031d6:	462a      	mov	r2, r5
 80031d8:	68e1      	ldr	r1, [r4, #12]
 80031da:	b131      	cbz	r1, 80031ea <RCM_RegisterRegConv+0xba>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80031dc:	790d      	ldrb	r5, [r1, #4]
 80031de:	4565      	cmp	r5, ip
 80031e0:	d103      	bne.n	80031ea <RCM_RegisterRegConv+0xba>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80031e2:	6809      	ldr	r1, [r1, #0]
 80031e4:	4299      	cmp	r1, r3
 80031e6:	f000 8081 	beq.w	80032ec <RCM_RegisterRegConv+0x1bc>
      RCM_handle_array [handle] = regConv;
 80031ea:	4611      	mov	r1, r2
 80031ec:	e001      	b.n	80031f2 <RCM_RegisterRegConv+0xc2>
    uint8_t i = 0;
 80031ee:	2200      	movs	r2, #0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80031f0:	4611      	mov	r1, r2
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 80031f2:	4d5d      	ldr	r5, [pc, #372]	@ (8003368 <RCM_RegisterRegConv+0x238>)
      RCM_handle_array [handle] = regConv;
 80031f4:	f844 0021 	str.w	r0, [r4, r1, lsl #2]
 80031f8:	2400      	movs	r4, #0
 80031fa:	46a6      	mov	lr, r4
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 80031fc:	f845 4031 	str.w	r4, [r5, r1, lsl #3]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003200:	689c      	ldr	r4, [r3, #8]
 8003202:	f362 0e07 	bfi	lr, r2, #0, #8
 8003206:	07e6      	lsls	r6, r4, #31
 8003208:	f362 2e0f 	bfi	lr, r2, #8, #8
 800320c:	d422      	bmi.n	8003254 <RCM_RegisterRegConv+0x124>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800320e:	685c      	ldr	r4, [r3, #4]
 8003210:	f024 0404 	bic.w	r4, r4, #4
 8003214:	605c      	str	r4, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003216:	2404      	movs	r4, #4
 8003218:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800321a:	685c      	ldr	r4, [r3, #4]
 800321c:	f024 0420 	bic.w	r4, r4, #32
 8003220:	605c      	str	r4, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8003222:	2420      	movs	r4, #32
 8003224:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003226:	689c      	ldr	r4, [r3, #8]
 8003228:	f024 4440 	bic.w	r4, r4, #3221225472	@ 0xc0000000
 800322c:	f024 043f 	bic.w	r4, r4, #63	@ 0x3f
 8003230:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8003234:	609c      	str	r4, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003236:	689c      	ldr	r4, [r3, #8]
 8003238:	2c00      	cmp	r4, #0
 800323a:	dbfc      	blt.n	8003236 <RCM_RegisterRegConv+0x106>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800323c:	681c      	ldr	r4, [r3, #0]
 800323e:	07e5      	lsls	r5, r4, #31
 8003240:	d408      	bmi.n	8003254 <RCM_RegisterRegConv+0x124>
  MODIFY_REG(ADCx->CR,
 8003242:	4d4a      	ldr	r5, [pc, #296]	@ (800336c <RCM_RegisterRegConv+0x23c>)
 8003244:	689c      	ldr	r4, [r3, #8]
 8003246:	402c      	ands	r4, r5
 8003248:	f044 0401 	orr.w	r4, r4, #1
 800324c:	609c      	str	r4, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800324e:	681c      	ldr	r4, [r3, #0]
 8003250:	07e4      	lsls	r4, r4, #31
 8003252:	d5f7      	bpl.n	8003244 <RCM_RegisterRegConv+0x114>
      RCM_NoInj_array[handle].enable = false;
 8003254:	4d46      	ldr	r5, [pc, #280]	@ (8003370 <RCM_RegisterRegConv+0x240>)
 8003256:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800325a:	004c      	lsls	r4, r1, #1
      RCM_NoInj_array[handle].prev = handle;
 800325c:	1d2e      	adds	r6, r5, #4
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 800325e:	2101      	movs	r1, #1
      RCM_NoInj_array[handle].prev = handle;
 8003260:	f826 e004 	strh.w	lr, [r6, r4]
      RCM_NoInj_array[handle].enable = false;
 8003264:	f04f 0e00 	mov.w	lr, #0
 8003268:	f805 e004 	strb.w	lr, [r5, r4]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800326c:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 800326e:	fa01 f10c 	lsl.w	r1, r1, ip
 8003272:	f024 040f 	bic.w	r4, r4, #15
 8003276:	f1bc 0f09 	cmp.w	ip, #9
 800327a:	631c      	str	r4, [r3, #48]	@ 0x30
 800327c:	ea41 618c 	orr.w	r1, r1, ip, lsl #26
 8003280:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 8003284:	d81f      	bhi.n	80032c6 <RCM_RegisterRegConv+0x196>
 8003286:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800328a:	0dcd      	lsrs	r5, r1, #23
 800328c:	f005 0504 	and.w	r5, r5, #4
 8003290:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 8003292:	6886      	ldr	r6, [r0, #8]
 8003294:	595c      	ldr	r4, [r3, r5]
 8003296:	f3c1 5104 	ubfx	r1, r1, #20, #5
 800329a:	f04f 0e07 	mov.w	lr, #7
 800329e:	fa06 fc01 	lsl.w	ip, r6, r1
 80032a2:	fa0e f101 	lsl.w	r1, lr, r1
 80032a6:	ea24 0101 	bic.w	r1, r4, r1
 80032aa:	ea41 010c 	orr.w	r1, r1, ip
 80032ae:	5159      	str	r1, [r3, r5]
  regConv->convHandle = handle;
 80032b0:	7302      	strb	r2, [r0, #12]
}
 80032b2:	bd70      	pop	{r4, r5, r6, pc}
 80032b4:	6803      	ldr	r3, [r0, #0]
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80032b6:	68e2      	ldr	r2, [r4, #12]
 80032b8:	b112      	cbz	r2, 80032c0 <RCM_RegisterRegConv+0x190>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80032ba:	7911      	ldrb	r1, [r2, #4]
 80032bc:	4561      	cmp	r1, ip
 80032be:	d03e      	beq.n	800333e <RCM_RegisterRegConv+0x20e>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 80032c0:	2202      	movs	r2, #2
      RCM_handle_array [handle] = regConv;
 80032c2:	4611      	mov	r1, r2
 80032c4:	e795      	b.n	80031f2 <RCM_RegisterRegConv+0xc2>
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 80032c6:	3c1e      	subs	r4, #30
 80032c8:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
 80032cc:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 80032d0:	e7db      	b.n	800328a <RCM_RegisterRegConv+0x15a>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 80032d2:	460a      	mov	r2, r1
 80032d4:	6803      	ldr	r3, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80032d6:	6829      	ldr	r1, [r5, #0]
 80032d8:	4299      	cmp	r1, r3
 80032da:	f47f af43 	bne.w	8003164 <RCM_RegisterRegConv+0x34>
      i++;
 80032de:	2202      	movs	r2, #2
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80032e0:	4611      	mov	r1, r2
 80032e2:	e786      	b.n	80031f2 <RCM_RegisterRegConv+0xc2>
 80032e4:	2a04      	cmp	r2, #4
 80032e6:	6803      	ldr	r3, [r0, #0]
 80032e8:	f67f af7f 	bls.w	80031ea <RCM_RegisterRegConv+0xba>
 80032ec:	2203      	movs	r2, #3
      RCM_handle_array [handle] = regConv;
 80032ee:	4611      	mov	r1, r2
 80032f0:	e77f      	b.n	80031f2 <RCM_RegisterRegConv+0xc2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80032f2:	68a5      	ldr	r5, [r4, #8]
 80032f4:	b1cd      	cbz	r5, 800332a <RCM_RegisterRegConv+0x1fa>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 80032f6:	2201      	movs	r2, #1
 80032f8:	e730      	b.n	800315c <RCM_RegisterRegConv+0x2c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80032fa:	68a5      	ldr	r5, [r4, #8]
 80032fc:	b1d5      	cbz	r5, 8003334 <RCM_RegisterRegConv+0x204>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80032fe:	f890 c004 	ldrb.w	ip, [r0, #4]
 8003302:	792b      	ldrb	r3, [r5, #4]
 8003304:	4563      	cmp	r3, ip
 8003306:	d0e4      	beq.n	80032d2 <RCM_RegisterRegConv+0x1a2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003308:	68e5      	ldr	r5, [r4, #12]
 800330a:	b155      	cbz	r5, 8003322 <RCM_RegisterRegConv+0x1f2>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 800330c:	460a      	mov	r2, r1
 800330e:	e72d      	b.n	800316c <RCM_RegisterRegConv+0x3c>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003310:	6829      	ldr	r1, [r5, #0]
 8003312:	6803      	ldr	r3, [r0, #0]
 8003314:	4299      	cmp	r1, r3
 8003316:	f47f af2d 	bne.w	8003174 <RCM_RegisterRegConv+0x44>
 800331a:	e7e7      	b.n	80032ec <RCM_RegisterRegConv+0x1bc>
      i++;
 800331c:	2201      	movs	r2, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800331e:	4611      	mov	r1, r2
 8003320:	e767      	b.n	80031f2 <RCM_RegisterRegConv+0xc2>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8003322:	462a      	mov	r2, r5
 8003324:	6803      	ldr	r3, [r0, #0]
      RCM_handle_array [handle] = regConv;
 8003326:	4611      	mov	r1, r2
 8003328:	e763      	b.n	80031f2 <RCM_RegisterRegConv+0xc2>
 800332a:	6803      	ldr	r3, [r0, #0]
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 800332c:	2201      	movs	r2, #1
 800332e:	e753      	b.n	80031d8 <RCM_RegisterRegConv+0xa8>
  uint8_t handle = 255U;
 8003330:	22ff      	movs	r2, #255	@ 0xff
 8003332:	e747      	b.n	80031c4 <RCM_RegisterRegConv+0x94>
 8003334:	f890 c004 	ldrb.w	ip, [r0, #4]
 8003338:	6803      	ldr	r3, [r0, #0]
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800333a:	462a      	mov	r2, r5
 800333c:	e74c      	b.n	80031d8 <RCM_RegisterRegConv+0xa8>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d0d3      	beq.n	80032ec <RCM_RegisterRegConv+0x1bc>
 8003344:	e7bc      	b.n	80032c0 <RCM_RegisterRegConv+0x190>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003346:	68a5      	ldr	r5, [r4, #8]
 8003348:	2d00      	cmp	r5, #0
 800334a:	d0ef      	beq.n	800332c <RCM_RegisterRegConv+0x1fc>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800334c:	792a      	ldrb	r2, [r5, #4]
 800334e:	4562      	cmp	r2, ip
 8003350:	d006      	beq.n	8003360 <RCM_RegisterRegConv+0x230>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003352:	68e5      	ldr	r5, [r4, #12]
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8003354:	2201      	movs	r2, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003356:	2d00      	cmp	r5, #0
 8003358:	f47f af08 	bne.w	800316c <RCM_RegisterRegConv+0x3c>
      RCM_handle_array [handle] = regConv;
 800335c:	4611      	mov	r1, r2
 800335e:	e748      	b.n	80031f2 <RCM_RegisterRegConv+0xc2>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8003360:	2201      	movs	r2, #1
 8003362:	e7b8      	b.n	80032d6 <RCM_RegisterRegConv+0x1a6>
 8003364:	20001a60 	.word	0x20001a60
 8003368:	20001a40 	.word	0x20001a40
 800336c:	7fffffc0 	.word	0x7fffffc0
 8003370:	20001a28 	.word	0x20001a28

08003374 <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
 8003374:	b530      	push	{r4, r5, lr}
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
 8003376:	7b03      	ldrb	r3, [r0, #12]
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8003378:	4a5e      	ldr	r2, [pc, #376]	@ (80034f4 <RCM_ExecRegularConv+0x180>)
 800337a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800337e:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003382:	f812 0011 	ldrb.w	r0, [r2, r1, lsl #1]
 8003386:	2800      	cmp	r0, #0
 8003388:	d138      	bne.n	80033fc <RCM_ExecRegularConv+0x88>
  {
    /* Find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 800338a:	7811      	ldrb	r1, [r2, #0]
 800338c:	b991      	cbnz	r1, 80033b4 <RCM_ExecRegularConv+0x40>
  uint8_t LastEnable = RCM_MAX_CONV;
 800338e:	2004      	movs	r0, #4
      if (true == RCM_NoInj_array [i].enable)
 8003390:	7991      	ldrb	r1, [r2, #6]
 8003392:	2900      	cmp	r1, #0
 8003394:	d175      	bne.n	8003482 <RCM_ExecRegularConv+0x10e>
 8003396:	7b11      	ldrb	r1, [r2, #12]
 8003398:	2900      	cmp	r1, #0
 800339a:	d177      	bne.n	800348c <RCM_ExecRegularConv+0x118>
 800339c:	7c91      	ldrb	r1, [r2, #18]
 800339e:	2900      	cmp	r1, #0
 80033a0:	f000 809a 	beq.w	80034d8 <RCM_ExecRegularConv+0x164>
      {
        if (RCM_NoInj_array[i].next > handle)
 80033a4:	7dd1      	ldrb	r1, [r2, #23]
 80033a6:	4299      	cmp	r1, r3
 80033a8:	f240 80a0 	bls.w	80034ec <RCM_ExecRegularConv+0x178>
 80033ac:	f04f 0e03 	mov.w	lr, #3
 80033b0:	4670      	mov	r0, lr
 80033b2:	e003      	b.n	80033bc <RCM_ExecRegularConv+0x48>
 80033b4:	7951      	ldrb	r1, [r2, #5]
 80033b6:	428b      	cmp	r3, r1
 80033b8:	d2ea      	bcs.n	8003390 <RCM_ExecRegularConv+0x1c>
  uint8_t i=0;
 80033ba:	4686      	mov	lr, r0
        /* We found a previous reg conv to link with */
        {
          formerNext = RCM_NoInj_array [i].next;
          RCM_NoInj_array[handle].next = formerNext;
 80033bc:	eb0c 0403 	add.w	r4, ip, r3
 80033c0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
          RCM_NoInj_array[handle].prev = i;
          RCM_NoInj_array[i].next = handle;
 80033c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
          RCM_NoInj_array[handle].next = formerNext;
 80033c8:	7161      	strb	r1, [r4, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 80033ca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          RCM_NoInj_array[handle].prev = i;
 80033ce:	f884 e004 	strb.w	lr, [r4, #4]
          RCM_NoInj_array[formerNext].prev = handle;
 80033d2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80033d6:	4c48      	ldr	r4, [pc, #288]	@ (80034f8 <RCM_ExecRegularConv+0x184>)
          RCM_NoInj_array[formerNext].prev = handle;
 80033d8:	710b      	strb	r3, [r1, #4]
          RCM_NoInj_array[i].next = handle;
 80033da:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80033de:	7821      	ldrb	r1, [r4, #0]
          RCM_NoInj_array[i].next = handle;
 80033e0:	7143      	strb	r3, [r0, #5]
    RCM_NoInj_array[handle].enable = true;
 80033e2:	eb0c 0003 	add.w	r0, ip, r3
 80033e6:	2501      	movs	r5, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80033e8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    RCM_NoInj_array[handle].enable = true;
 80033ec:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80033f0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80033f4:	7849      	ldrb	r1, [r1, #1]
 80033f6:	42a9      	cmp	r1, r5
    {/* Select the new conversion to be the next scheduled only if a conversion is not ongoing */
      RCM_currentHandle = handle;
 80033f8:	bf18      	it	ne
 80033fa:	7023      	strbne	r3, [r4, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == Bemf_ADC_M1.ADCRegularLocked)
 80033fc:	493f      	ldr	r1, [pc, #252]	@ (80034fc <RCM_ExecRegularConv+0x188>)
 80033fe:	f891 1054 	ldrb.w	r1, [r1, #84]	@ 0x54
 8003402:	2900      	cmp	r1, #0
 8003404:	d138      	bne.n	8003478 <RCM_ExecRegularConv+0x104>
  /* The ADC is free to be used asynchronously */
  {
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003406:	493e      	ldr	r1, [pc, #248]	@ (8003500 <RCM_ExecRegularConv+0x18c>)
 8003408:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800340c:	790c      	ldrb	r4, [r1, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800340e:	6808      	ldr	r0, [r1, #0]
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003410:	2101      	movs	r1, #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003412:	2c09      	cmp	r4, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003414:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8003418:	fa01 f104 	lsl.w	r1, r1, r4
 800341c:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
 8003420:	bf84      	itt	hi
 8003422:	3d1e      	subhi	r5, #30
 8003424:	ea41 5105 	orrhi.w	r1, r1, r5, lsl #20
  MODIFY_REG(*preg,
 8003428:	6b04      	ldr	r4, [r0, #48]	@ 0x30
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800342a:	bf94      	ite	ls
 800342c:	ea41 5105 	orrls.w	r1, r1, r5, lsl #20
 8003430:	f041 7100 	orrhi.w	r1, r1, #33554432	@ 0x2000000
 8003434:	0d09      	lsrs	r1, r1, #20
 8003436:	f401 61f8 	and.w	r1, r1, #1984	@ 0x7c0
 800343a:	f424 64f8 	bic.w	r4, r4, #1984	@ 0x7c0
 800343e:	4321      	orrs	r1, r4
 8003440:	6301      	str	r1, [r0, #48]	@ 0x30
* param  ADCx ADC instance
* retval Value between Min_Data=0x0000 and Max_Data=0xFFF0
*/
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12L(const ADC_TypeDef *ADCx)
{
  return (uint16_t)(READ_REG(ADCx->DR) & 0x0000FFF0UL);
 8003442:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 8003444:	6881      	ldr	r1, [r0, #8]
 8003446:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800344a:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800344e:	f041 0104 	orr.w	r1, r1, #4
 8003452:	6081      	str	r1, [r0, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003454:	6801      	ldr	r1, [r0, #0]
 8003456:	0749      	lsls	r1, r1, #29
 8003458:	d5fc      	bpl.n	8003454 <RCM_ExecRegularConv+0xe0>
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 800345a:	eb0c 0103 	add.w	r1, ip, r3
 800345e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003462:	6c00      	ldr	r0, [r0, #64]	@ 0x40
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8003464:	4d24      	ldr	r5, [pc, #144]	@ (80034f8 <RCM_ExecRegularConv+0x184>)
 8003466:	f891 e005 	ldrb.w	lr, [r1, #5]
 800346a:	f885 e000 	strb.w	lr, [r5]
 800346e:	f020 000f 	bic.w	r0, r0, #15
    RCM_NoInj_array[handle].status = valid;
 8003472:	2402      	movs	r4, #2
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 8003474:	8048      	strh	r0, [r1, #2]
    RCM_NoInj_array[handle].status = valid;
 8003476:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 8003478:	449c      	add	ip, r3
 800347a:	eb02 024c 	add.w	r2, r2, ip, lsl #1
  return (retVal);
}
 800347e:	8850      	ldrh	r0, [r2, #2]
 8003480:	bd30      	pop	{r4, r5, pc}
        if (RCM_NoInj_array[i].next > handle)
 8003482:	7ad1      	ldrb	r1, [r2, #11]
 8003484:	428b      	cmp	r3, r1
 8003486:	d31d      	bcc.n	80034c4 <RCM_ExecRegularConv+0x150>
      if (true == RCM_NoInj_array [i].enable)
 8003488:	7b11      	ldrb	r1, [r2, #12]
 800348a:	b1f9      	cbz	r1, 80034cc <RCM_ExecRegularConv+0x158>
        if (RCM_NoInj_array[i].next > handle)
 800348c:	7c51      	ldrb	r1, [r2, #17]
 800348e:	4299      	cmp	r1, r3
 8003490:	d828      	bhi.n	80034e4 <RCM_ExecRegularConv+0x170>
      if (true == RCM_NoInj_array [i].enable)
 8003492:	7c91      	ldrb	r1, [r2, #18]
 8003494:	2900      	cmp	r1, #0
 8003496:	d185      	bne.n	80033a4 <RCM_ExecRegularConv+0x30>
          LastEnable = i;
 8003498:	2102      	movs	r1, #2
         formerNext = RCM_NoInj_array[LastEnable].next;
 800349a:	4608      	mov	r0, r1
 800349c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 80034a0:	eb0c 0403 	add.w	r4, ip, r3
 80034a4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
         formerNext = RCM_NoInj_array[LastEnable].next;
 80034a8:	eb02 0040 	add.w	r0, r2, r0, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 80034ac:	7121      	strb	r1, [r4, #4]
         formerNext = RCM_NoInj_array[LastEnable].next;
 80034ae:	7941      	ldrb	r1, [r0, #5]
         RCM_NoInj_array[handle].next = formerNext;
 80034b0:	7161      	strb	r1, [r4, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 80034b2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80034b6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80034ba:	4c0f      	ldr	r4, [pc, #60]	@ (80034f8 <RCM_ExecRegularConv+0x184>)
         RCM_NoInj_array[formerNext].prev = handle;
 80034bc:	710b      	strb	r3, [r1, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 80034be:	7143      	strb	r3, [r0, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80034c0:	7821      	ldrb	r1, [r4, #0]
 80034c2:	e78e      	b.n	80033e2 <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 80034c4:	f04f 0e01 	mov.w	lr, #1
      if (true == RCM_NoInj_array [i].enable)
 80034c8:	4670      	mov	r0, lr
 80034ca:	e777      	b.n	80033bc <RCM_ExecRegularConv+0x48>
 80034cc:	7c91      	ldrb	r1, [r2, #18]
 80034ce:	2900      	cmp	r1, #0
 80034d0:	f47f af68 	bne.w	80033a4 <RCM_ExecRegularConv+0x30>
          LastEnable = i;
 80034d4:	2101      	movs	r1, #1
 80034d6:	e7e0      	b.n	800349a <RCM_ExecRegularConv+0x126>
       if (LastEnable != RCM_MAX_CONV )
 80034d8:	2800      	cmp	r0, #0
 80034da:	d0de      	beq.n	800349a <RCM_ExecRegularConv+0x126>
         RCM_currentHandle = handle;
 80034dc:	4c06      	ldr	r4, [pc, #24]	@ (80034f8 <RCM_ExecRegularConv+0x184>)
 80034de:	4619      	mov	r1, r3
 80034e0:	7023      	strb	r3, [r4, #0]
    while (i < RCM_MAX_CONV)
 80034e2:	e77e      	b.n	80033e2 <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 80034e4:	f04f 0e02 	mov.w	lr, #2
      if (true == RCM_NoInj_array [i].enable)
 80034e8:	4670      	mov	r0, lr
 80034ea:	e767      	b.n	80033bc <RCM_ExecRegularConv+0x48>
 80034ec:	2003      	movs	r0, #3
          LastEnable = i;
 80034ee:	4601      	mov	r1, r0
 80034f0:	e7d4      	b.n	800349c <RCM_ExecRegularConv+0x128>
 80034f2:	bf00      	nop
 80034f4:	20001a28 	.word	0x20001a28
 80034f8:	20001a24 	.word	0x20001a24
 80034fc:	2000005c 	.word	0x2000005c
 8003500:	20001a60 	.word	0x20001a60

08003504 <RCM_ExecUserConv>:
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 8003504:	4b14      	ldr	r3, [pc, #80]	@ (8003558 <RCM_ExecUserConv+0x54>)
{
 8003506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvHandle != NULL)
 800350a:	681c      	ldr	r4, [r3, #0]
 800350c:	b124      	cbz	r4, 8003518 <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 800350e:	4d13      	ldr	r5, [pc, #76]	@ (800355c <RCM_ExecUserConv+0x58>)
    handle = RCM_UserConvHandle->convHandle;
 8003510:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003512:	782b      	ldrb	r3, [r5, #0]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d001      	beq.n	800351c <RCM_ExecUserConv+0x18>
  }
  else
  {
     /* Nothing to do */
  }
}
 8003518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 800351c:	4620      	mov	r0, r4
 800351e:	f7ff ff29 	bl	8003374 <RCM_ExecRegularConv>
 8003522:	4b0f      	ldr	r3, [pc, #60]	@ (8003560 <RCM_ExecUserConv+0x5c>)
 8003524:	8018      	strh	r0, [r3, #0]
      if (RCM_NoInj_array [handle].status != notvalid)
 8003526:	4b0f      	ldr	r3, [pc, #60]	@ (8003564 <RCM_ExecUserConv+0x60>)
 8003528:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 800352c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003530:	4601      	mov	r1, r0
      if (RCM_NoInj_array [handle].status != notvalid)
 8003532:	785b      	ldrb	r3, [r3, #1]
 8003534:	b10b      	cbz	r3, 800353a <RCM_ExecUserConv+0x36>
        RCM_UserConvState = RCM_USERCONV_EOC;
 8003536:	2302      	movs	r3, #2
 8003538:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 800353a:	4b0b      	ldr	r3, [pc, #44]	@ (8003568 <RCM_ExecUserConv+0x64>)
 800353c:	f853 7036 	ldr.w	r7, [r3, r6, lsl #3]
 8003540:	2f00      	cmp	r7, #0
 8003542:	d0e9      	beq.n	8003518 <RCM_ExecUserConv+0x14>
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003544:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003548:	4620      	mov	r0, r4
 800354a:	685a      	ldr	r2, [r3, #4]
        RCM_UserConvState = RCM_USERCONV_IDLE;
 800354c:	2300      	movs	r3, #0
 800354e:	702b      	strb	r3, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003550:	463b      	mov	r3, r7
}
 8003552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003556:	4718      	bx	r3
 8003558:	20001a1c 	.word	0x20001a1c
 800355c:	20001a20 	.word	0x20001a20
 8003560:	20001a22 	.word	0x20001a22
 8003564:	20001a28 	.word	0x20001a28
 8003568:	20001a40 	.word	0x20001a40

0800356c <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 800356c:	4b1e      	ldr	r3, [pc, #120]	@ (80035e8 <RCM_ExecNextConv+0x7c>)
 800356e:	491f      	ldr	r1, [pc, #124]	@ (80035ec <RCM_ExecNextConv+0x80>)
 8003570:	781a      	ldrb	r2, [r3, #0]
 8003572:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003576:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800357a:	b3a3      	cbz	r3, 80035e6 <RCM_ExecNextConv+0x7a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped */

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 800357c:	4b1c      	ldr	r3, [pc, #112]	@ (80035f0 <RCM_ExecNextConv+0x84>)
{
 800357e:	b510      	push	{r4, lr}
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003584:	6818      	ldr	r0, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003586:	2404      	movs	r4, #4
 8003588:	6004      	str	r4, [r0, #0]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 800358a:	f893 c004 	ldrb.w	ip, [r3, #4]
 800358e:	2301      	movs	r3, #1
 8003590:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8003594:	f1bc 0f09 	cmp.w	ip, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8003598:	fa03 f30c 	lsl.w	r3, r3, ip
 800359c:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
 80035a0:	bf84      	itt	hi
 80035a2:	3c1e      	subhi	r4, #30
 80035a4:	ea43 5304 	orrhi.w	r3, r3, r4, lsl #20
 80035a8:	ea4f 0e42 	mov.w	lr, r2, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 80035ac:	bf98      	it	ls
 80035ae:	ea43 5304 	orrls.w	r3, r3, r4, lsl #20

    (void)LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 80035b2:	4496      	add	lr, r2
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 80035b4:	bf88      	it	hi
 80035b6:	f043 7300 	orrhi.w	r3, r3, #33554432	@ 0x2000000
  MODIFY_REG(*preg,
 80035ba:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80035bc:	0d1b      	lsrs	r3, r3, #20
 80035be:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80035c2:	f422 62f8 	bic.w	r2, r2, #1984	@ 0x7c0
 80035c6:	4313      	orrs	r3, r2
 80035c8:	6303      	str	r3, [r0, #48]	@ 0x30
 80035ca:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 80035cc:	6883      	ldr	r3, [r0, #8]
 80035ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 80035d2:	eb01 014e 	add.w	r1, r1, lr, lsl #1
 80035d6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035da:	2401      	movs	r4, #1
 80035dc:	f043 0304 	orr.w	r3, r3, #4
 80035e0:	6083      	str	r3, [r0, #8]
 80035e2:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do, conversion not enabled have already notvalid status */
  }
}
 80035e4:	bd10      	pop	{r4, pc}
 80035e6:	4770      	bx	lr
 80035e8:	20001a24 	.word	0x20001a24
 80035ec:	20001a28 	.word	0x20001a28
 80035f0:	20001a60 	.word	0x20001a60

080035f4 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 80035f4:	b430      	push	{r4, r5}
  uint32_t result;
  RCM_status_t status;

  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 80035f6:	4812      	ldr	r0, [pc, #72]	@ (8003640 <RCM_ReadOngoingConv+0x4c>)
 80035f8:	4a12      	ldr	r2, [pc, #72]	@ (8003644 <RCM_ReadOngoingConv+0x50>)
 80035fa:	7803      	ldrb	r3, [r0, #0]
 80035fc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003600:	f812 4011 	ldrb.w	r4, [r2, r1, lsl #1]
 8003604:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003608:	b16c      	cbz	r4, 8003626 <RCM_ReadOngoingConv+0x32>
  {
    status = RCM_NoInj_array[RCM_currentHandle].status;
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 800360a:	4c0f      	ldr	r4, [pc, #60]	@ (8003648 <RCM_ReadOngoingConv+0x54>)
 800360c:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8003610:	6824      	ldr	r4, [r4, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003612:	6825      	ldr	r5, [r4, #0]
 8003614:	076d      	lsls	r5, r5, #29
 8003616:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800361a:	d406      	bmi.n	800362a <RCM_ReadOngoingConv+0x36>
      RCM_NoInj_array[RCM_currentHandle].status = valid;
      /* Restore back DMA configuration */
    }

    /* Prepare next conversion */
    RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 800361c:	449c      	add	ip, r3
 800361e:	eb02 024c 	add.w	r2, r2, ip, lsl #1
 8003622:	7953      	ldrb	r3, [r2, #5]
 8003624:	7003      	strb	r3, [r0, #0]
    }
    else
    {
      /* Nothing to do */
    }
}
 8003626:	bc30      	pop	{r4, r5}
 8003628:	4770      	bx	lr
    if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 800362a:	784d      	ldrb	r5, [r1, #1]
 800362c:	f015 0ffd 	tst.w	r5, #253	@ 0xfd
 8003630:	d0f4      	beq.n	800361c <RCM_ReadOngoingConv+0x28>
 8003632:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 8003634:	f024 040f 	bic.w	r4, r4, #15
                    = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);
 8003638:	804c      	strh	r4, [r1, #2]
      RCM_NoInj_array[RCM_currentHandle].status = valid;
 800363a:	2402      	movs	r4, #2
 800363c:	704c      	strb	r4, [r1, #1]
 800363e:	e7ed      	b.n	800361c <RCM_ReadOngoingConv+0x28>
 8003640:	20001a24 	.word	0x20001a24
 8003644:	20001a28 	.word	0x20001a28
 8003648:	20001a60 	.word	0x20001a60

0800364c <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800364c:	4b44      	ldr	r3, [pc, #272]	@ (8003760 <USART2_IRQHandler+0x114>)
 800364e:	69da      	ldr	r2, [r3, #28]
 8003650:	0652      	lsls	r2, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  */
//cstat !MISRAC2012-Rule-8.4
void USART2_IRQHandler(void)
{
 8003652:	b510      	push	{r4, lr}
 8003654:	d509      	bpl.n	800366a <USART2_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003656:	4943      	ldr	r1, [pc, #268]	@ (8003764 <USART2_IRQHandler+0x118>)
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel(DMA_TX_A, DMACH_TX_A);
    LL_USART_ClearFlag_TC(USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT(&aspepOverUartA);
 8003658:	4843      	ldr	r0, [pc, #268]	@ (8003768 <USART2_IRQHandler+0x11c>)
 800365a:	69ca      	ldr	r2, [r1, #28]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800365c:	2440      	movs	r4, #64	@ 0x40
 800365e:	f022 0201 	bic.w	r2, r2, #1
 8003662:	61ca      	str	r2, [r1, #28]
 8003664:	621c      	str	r4, [r3, #32]
 8003666:	f7fd fbf9 	bl	8000e5c <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800366a:	4b3d      	ldr	r3, [pc, #244]	@ (8003760 <USART2_IRQHandler+0x114>)
 800366c:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800366e:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8003670:	69d9      	ldr	r1, [r3, #28]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8003672:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8003674:	074c      	lsls	r4, r1, #29
 8003676:	d56a      	bpl.n	800374e <USART2_IRQHandler+0x102>
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8003678:	07d8      	lsls	r0, r3, #31
 800367a:	d51e      	bpl.n	80036ba <USART2_IRQHandler+0x6e>
  {
    /* Nothing to do */
  }
  else
  { /* Stopping the debugger will generate an OverRun error*/
    WRITE_REG(USARTA->ICR, USART_ICR_FECF | USART_ICR_ORECF | USART_ICR_NECF);
 800367c:	4b38      	ldr	r3, [pc, #224]	@ (8003760 <USART2_IRQHandler+0x114>)
 800367e:	220e      	movs	r2, #14
 8003680:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003682:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003686:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 800368a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 800368e:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003692:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8003696:	e840 3100 	strex	r1, r3, [r0]
 800369a:	2900      	cmp	r1, #0
 800369c:	d1f3      	bne.n	8003686 <USART2_IRQHandler+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80036a2:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 80036a6:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80036aa:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ae:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 80036b2:	e840 3100 	strex	r1, r3, [r0]
 80036b6:	2900      	cmp	r1, #0
 80036b8:	d1f3      	bne.n	80036a2 <USART2_IRQHandler+0x56>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80036ba:	4b29      	ldr	r3, [pc, #164]	@ (8003760 <USART2_IRQHandler+0x114>)
 80036bc:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 80036be:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80036c0:	06d2      	lsls	r2, r2, #27
 80036c2:	d543      	bpl.n	800374c <USART2_IRQHandler+0x100>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 80036c4:	06db      	lsls	r3, r3, #27
 80036c6:	d541      	bpl.n	800374c <USART2_IRQHandler+0x100>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80036cc:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 80036d0:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80036d4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d8:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 80036dc:	e840 3100 	strex	r1, r3, [r0]
 80036e0:	2900      	cmp	r1, #0
 80036e2:	d1f3      	bne.n	80036cc <USART2_IRQHandler+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80036e8:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 80036ec:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80036f0:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f4:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 80036f8:	e840 3100 	strex	r1, r3, [r0]
 80036fc:	2900      	cmp	r1, #0
 80036fe:	d1f3      	bne.n	80036e8 <USART2_IRQHandler+0x9c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003700:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003704:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8003708:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 800370c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003710:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8003714:	e840 3100 	strex	r1, r3, [r0]
 8003718:	2900      	cmp	r1, #0
 800371a:	d1f3      	bne.n	8003704 <USART2_IRQHandler+0xb8>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800371c:	4b10      	ldr	r3, [pc, #64]	@ (8003760 <USART2_IRQHandler+0x114>)
 800371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003720:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003724:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8003728:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800372c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003730:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8003734:	e840 3100 	strex	r1, r3, [r0]
 8003738:	2900      	cmp	r1, #0
 800373a:	d1f3      	bne.n	8003724 <USART2_IRQHandler+0xd8>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 800373c:	4b09      	ldr	r3, [pc, #36]	@ (8003764 <USART2_IRQHandler+0x118>)
    LL_USART_DisableDMAReq_RX(USARTA);
    (void)LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX(USARTA);
    /* Clear pending DMA TC to process only new received packet */
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWReset(&aspepOverUartA);
 800373e:	480a      	ldr	r0, [pc, #40]	@ (8003768 <USART2_IRQHandler+0x11c>)
 8003740:	2202      	movs	r2, #2
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 8003742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003746:	605a      	str	r2, [r3, #4]
    ASPEP_HWReset(&aspepOverUartA);
 8003748:	f7fd bd7e 	b.w	8001248 <ASPEP_HWReset>
}
 800374c:	bd10      	pop	{r4, pc}
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 800374e:	07d9      	lsls	r1, r3, #31
 8003750:	d5b3      	bpl.n	80036ba <USART2_IRQHandler+0x6e>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8003752:	f002 0202 	and.w	r2, r2, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003756:	f000 0008 	and.w	r0, r0, #8
  if (0U == flags)
 800375a:	4302      	orrs	r2, r0
 800375c:	d18e      	bne.n	800367c <USART2_IRQHandler+0x30>
 800375e:	e7ac      	b.n	80036ba <USART2_IRQHandler+0x6e>
 8003760:	40004400 	.word	0x40004400
 8003764:	40020000 	.word	0x40020000
 8003768:	200003f0 	.word	0x200003f0

0800376c <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 800376c:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */

  TSK_HardwareFaultTask();
 800376e:	f7fe fa2f 	bl	8001bd0 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 8003772:	e7fe      	b.n	8003772 <HardFault_Handler+0x6>

08003774 <SysTick_Handler>:

 /* USER CODE END HardFault_IRQn 1 */
}

void SysTick_Handler(void)
{
 8003774:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8003776:	4c0d      	ldr	r4, [pc, #52]	@ (80037ac <SysTick_Handler+0x38>)
 8003778:	7823      	ldrb	r3, [r4, #0]
 800377a:	2b02      	cmp	r3, #2
 800377c:	d00f      	beq.n	800379e <SysTick_Handler+0x2a>
  else
  {
    /* Nothing to do */
  }

  SystickDividerCounter ++;
 800377e:	3301      	adds	r3, #1
 8003780:	b2db      	uxtb	r3, r3
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 8003782:	4a0b      	ldr	r2, [pc, #44]	@ (80037b0 <SysTick_Handler+0x3c>)
 8003784:	7023      	strb	r3, [r4, #0]
 8003786:	6813      	ldr	r3, [r2, #0]
 8003788:	079b      	lsls	r3, r3, #30
 800378a:	d504      	bpl.n	8003796 <SysTick_Handler+0x22>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 800378c:	2302      	movs	r3, #2
  /* Buffer is ready by the HW layer to be processed */
  /* NO DMA interrupt */
  if (LL_DMA_IsActiveFlag_TC(DMA_RX_A, DMACH_RX_A))
  {
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT(&aspepOverUartA);
 800378e:	4809      	ldr	r0, [pc, #36]	@ (80037b4 <SysTick_Handler+0x40>)
 8003790:	6053      	str	r3, [r2, #4]
 8003792:	f7fd fd09 	bl	80011a8 <ASPEP_HWDataReceivedIT>
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */

  /* USER CODE END SysTick_IRQn 2 */
}
 8003796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 800379a:	f7fe b9d1 	b.w	8001b40 <MC_RunMotorControlTasks>
    HAL_IncTick();
 800379e:	f000 fb4b 	bl	8003e38 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 80037a2:	f001 fd03 	bl	80051ac <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e7eb      	b.n	8003782 <SysTick_Handler+0xe>
 80037aa:	bf00      	nop
 80037ac:	20000478 	.word	0x20000478
 80037b0:	40020000 	.word	0x40020000
 80037b4:	200003f0 	.word	0x200003f0

080037b8 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 80037b8:	4b04      	ldr	r3, [pc, #16]	@ (80037cc <EXTI15_10_IRQHandler+0x14>)
 80037ba:	695a      	ldr	r2, [r3, #20]

  */
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN START_STOP_BTN */
  if (LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13))
 80037bc:	0492      	lsls	r2, r2, #18
 80037be:	d400      	bmi.n	80037c2 <EXTI15_10_IRQHandler+0xa>
  else
  {
    /* Nothing to do */
  }

}
 80037c0:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 80037c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037c6:	615a      	str	r2, [r3, #20]
    (void)UI_HandleStartStopButton_cb();
 80037c8:	f7fe ba10 	b.w	8001bec <UI_HandleStartStopButton_cb>
 80037cc:	40010400 	.word	0x40010400

080037d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037d0:	b500      	push	{lr}

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037d2:	4b0e      	ldr	r3, [pc, #56]	@ (800380c <HAL_MspInit+0x3c>)
 80037d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80037d6:	f042 0201 	orr.w	r2, r2, #1
{
 80037da:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037dc:	661a      	str	r2, [r3, #96]	@ 0x60
 80037de:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80037e0:	f002 0201 	and.w	r2, r2, #1
 80037e4:	9200      	str	r2, [sp, #0]
 80037e6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80037ea:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80037ee:	659a      	str	r2, [r3, #88]	@ 0x58
 80037f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037f6:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80037f8:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 80037fa:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80037fc:	f001 fc4c 	bl	8005098 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003800:	b003      	add	sp, #12
 8003802:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 8003806:	f001 bf9d 	b.w	8005744 <HAL_PWREx_DisableUCPDDeadBattery>
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000

08003810 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003810:	b510      	push	{r4, lr}
 8003812:	4604      	mov	r4, r0
 8003814:	b0a0      	sub	sp, #128	@ 0x80
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003816:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003818:	2254      	movs	r2, #84	@ 0x54
 800381a:	a80b      	add	r0, sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800381c:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8003820:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8003824:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003826:	f005 fa5f 	bl	8008ce8 <memset>
  if(hadc->Instance==ADC1)
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003830:	d004      	beq.n	800383c <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8003832:	4a41      	ldr	r2, [pc, #260]	@ (8003938 <HAL_ADC_MspInit+0x128>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d045      	beq.n	80038c4 <HAL_ADC_MspInit+0xb4>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003838:	b020      	add	sp, #128	@ 0x80
 800383a:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800383c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003840:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003844:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003846:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003848:	931c      	str	r3, [sp, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800384a:	f002 fb37 	bl	8005ebc <HAL_RCCEx_PeriphCLKConfig>
 800384e:	2800      	cmp	r0, #0
 8003850:	d168      	bne.n	8003924 <HAL_ADC_MspInit+0x114>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003852:	4a3a      	ldr	r2, [pc, #232]	@ (800393c <HAL_ADC_MspInit+0x12c>)
 8003854:	6813      	ldr	r3, [r2, #0]
 8003856:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003858:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800385a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800385c:	d109      	bne.n	8003872 <HAL_ADC_MspInit+0x62>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800385e:	4b38      	ldr	r3, [pc, #224]	@ (8003940 <HAL_ADC_MspInit+0x130>)
 8003860:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003862:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003866:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800386a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800386e:	9301      	str	r3, [sp, #4]
 8003870:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003872:	4b33      	ldr	r3, [pc, #204]	@ (8003940 <HAL_ADC_MspInit+0x130>)
 8003874:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003876:	f042 0204 	orr.w	r2, r2, #4
 800387a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800387c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800387e:	f002 0204 	and.w	r2, r2, #4
 8003882:	9202      	str	r2, [sp, #8]
 8003884:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003886:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003888:	f042 0201 	orr.w	r2, r2, #1
 800388c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800388e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin|M1_BEMF_U_Pin;
 8003890:	200c      	movs	r0, #12
 8003892:	2103      	movs	r1, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003894:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin|M1_BEMF_U_Pin;
 8003898:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800389c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389e:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038a0:	a906      	add	r1, sp, #24
 80038a2:	4828      	ldr	r0, [pc, #160]	@ (8003944 <HAL_ADC_MspInit+0x134>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038a4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a6:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038a8:	f001 fd16 	bl	80052d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 80038ac:	2202      	movs	r2, #2
 80038ae:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 80038b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038b4:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 80038b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ba:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 80038bc:	f001 fd0c 	bl	80052d8 <HAL_GPIO_Init>
}
 80038c0:	b020      	add	sp, #128	@ 0x80
 80038c2:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80038c4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80038c8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038cc:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80038ce:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80038d0:	931c      	str	r3, [sp, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038d2:	f002 faf3 	bl	8005ebc <HAL_RCCEx_PeriphCLKConfig>
 80038d6:	bb40      	cbnz	r0, 800392a <HAL_ADC_MspInit+0x11a>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80038d8:	4a18      	ldr	r2, [pc, #96]	@ (800393c <HAL_ADC_MspInit+0x12c>)
 80038da:	6813      	ldr	r3, [r2, #0]
 80038dc:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80038de:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80038e0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80038e2:	d109      	bne.n	80038f8 <HAL_ADC_MspInit+0xe8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80038e4:	4b16      	ldr	r3, [pc, #88]	@ (8003940 <HAL_ADC_MspInit+0x130>)
 80038e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038ec:	64da      	str	r2, [r3, #76]	@ 0x4c
 80038ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038f4:	9304      	str	r3, [sp, #16]
 80038f6:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038f8:	4b11      	ldr	r3, [pc, #68]	@ (8003940 <HAL_ADC_MspInit+0x130>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038fa:	4812      	ldr	r0, [pc, #72]	@ (8003944 <HAL_ADC_MspInit+0x134>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038fe:	f042 0204 	orr.w	r2, r2, #4
 8003902:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_BEMF_V_Pin|M1_BEMF_W_Pin;
 8003906:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 8003930 <HAL_ADC_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003910:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003912:	2300      	movs	r3, #0
    GPIO_InitStruct.Pin = M1_BEMF_V_Pin|M1_BEMF_W_Pin;
 8003914:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003918:	9a05      	ldr	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391a:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800391c:	f001 fcdc 	bl	80052d8 <HAL_GPIO_Init>
}
 8003920:	b020      	add	sp, #128	@ 0x80
 8003922:	bd10      	pop	{r4, pc}
      Error_Handler();
 8003924:	f7fd ff6a 	bl	80017fc <Error_Handler>
 8003928:	e793      	b.n	8003852 <HAL_ADC_MspInit+0x42>
      Error_Handler();
 800392a:	f7fd ff67 	bl	80017fc <Error_Handler>
 800392e:	e7d3      	b.n	80038d8 <HAL_ADC_MspInit+0xc8>
 8003930:	00000030 	.word	0x00000030
 8003934:	00000003 	.word	0x00000003
 8003938:	50000100 	.word	0x50000100
 800393c:	20001a70 	.word	0x20001a70
 8003940:	40021000 	.word	0x40021000
 8003944:	48000800 	.word	0x48000800

08003948 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003948:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 800394a:	6802      	ldr	r2, [r0, #0]
 800394c:	4922      	ldr	r1, [pc, #136]	@ (80039d8 <HAL_TIM_Base_MspInit+0x90>)
{
 800394e:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003950:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8003952:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003954:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003958:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800395c:	9308      	str	r3, [sp, #32]
  if(htim_base->Instance==TIM1)
 800395e:	d010      	beq.n	8003982 <HAL_TIM_Base_MspInit+0x3a>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8003960:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003964:	d001      	beq.n	800396a <HAL_TIM_Base_MspInit+0x22>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003966:	b00a      	add	sp, #40	@ 0x28
 8003968:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800396a:	4b1c      	ldr	r3, [pc, #112]	@ (80039dc <HAL_TIM_Base_MspInit+0x94>)
 800396c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800396e:	f042 0201 	orr.w	r2, r2, #1
 8003972:	659a      	str	r2, [r3, #88]	@ 0x58
 8003974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	9303      	str	r3, [sp, #12]
 800397c:	9b03      	ldr	r3, [sp, #12]
}
 800397e:	b00a      	add	sp, #40	@ 0x28
 8003980:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003982:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003986:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 800398a:	ed9f 7b11 	vldr	d7, [pc, #68]	@ 80039d0 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM1_CLK_ENABLE();
 800398e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003990:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003994:	661a      	str	r2, [r3, #96]	@ 0x60
 8003996:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003998:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800399c:	9201      	str	r2, [sp, #4]
 800399e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80039a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039b0:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80039b2:	2306      	movs	r3, #6
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80039b4:	a904      	add	r1, sp, #16
 80039b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80039ba:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039be:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039c0:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80039c2:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80039c4:	f001 fc88 	bl	80052d8 <HAL_GPIO_Init>
}
 80039c8:	b00a      	add	sp, #40	@ 0x28
 80039ca:	bd10      	pop	{r4, pc}
 80039cc:	f3af 8000 	nop.w
 80039d0:	00000040 	.word	0x00000040
 80039d4:	00000012 	.word	0x00000012
 80039d8:	40012c00 	.word	0x40012c00
 80039dc:	40021000 	.word	0x40021000

080039e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80039e0:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80039e2:	4a27      	ldr	r2, [pc, #156]	@ (8003a80 <HAL_TIM_MspPostInit+0xa0>)
 80039e4:	6801      	ldr	r1, [r0, #0]
{
 80039e6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e8:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80039ea:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ec:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80039f0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80039f4:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 80039f6:	d001      	beq.n	80039fc <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80039f8:	b008      	add	sp, #32
 80039fa:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a00:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8003a04:	2080      	movs	r0, #128	@ 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a08:	f042 0201 	orr.w	r2, r2, #1
 8003a0c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003a0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a10:	f002 0201 	and.w	r2, r2, #1
 8003a14:	9200      	str	r2, [sp, #0]
 8003a16:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a1a:	f042 0202 	orr.w	r2, r2, #2
 8003a1e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8003a22:	2102      	movs	r1, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a24:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8003a28:	e9cd 0102 	strd	r0, r1, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003a2c:	2406      	movs	r4, #6
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a2e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8003a30:	2601      	movs	r6, #1
 8003a32:	2702      	movs	r7, #2
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8003a34:	a902      	add	r1, sp, #8
 8003a36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a3a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003a3c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8003a3e:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8003a42:	f001 fc49 	bl	80052d8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a46:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8003a48:	2203      	movs	r2, #3
 8003a4a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a4c:	480d      	ldr	r0, [pc, #52]	@ (8003a84 <HAL_TIM_MspPostInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003a4e:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8003a50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003a54:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a58:	f001 fc3e 	bl	80052d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003a5c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003a60:	2302      	movs	r3, #2
 8003a62:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a6e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003a70:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003a74:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a76:	f001 fc2f 	bl	80052d8 <HAL_GPIO_Init>
}
 8003a7a:	b008      	add	sp, #32
 8003a7c:	bdd0      	pop	{r4, r6, r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40012c00 	.word	0x40012c00
 8003a84:	48000400 	.word	0x48000400

08003a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a88:	b570      	push	{r4, r5, r6, lr}
 8003a8a:	4604      	mov	r4, r0
 8003a8c:	b09c      	sub	sp, #112	@ 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a8e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a90:	2254      	movs	r2, #84	@ 0x54
 8003a92:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a94:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8003a98:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8003a9c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a9e:	f005 f923 	bl	8008ce8 <memset>
  if(huart->Instance==USART2)
 8003aa2:	4b37      	ldr	r3, [pc, #220]	@ (8003b80 <HAL_UART_MspInit+0xf8>)
 8003aa4:	6822      	ldr	r2, [r4, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d001      	beq.n	8003aae <HAL_UART_MspInit+0x26>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003aaa:	b01c      	add	sp, #112	@ 0x70
 8003aac:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003aae:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ab0:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003ab2:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ab4:	f002 fa02 	bl	8005ebc <HAL_RCCEx_PeriphCLKConfig>
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	d14d      	bne.n	8003b58 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003abc:	4b31      	ldr	r3, [pc, #196]	@ (8003b84 <HAL_UART_MspInit+0xfc>)
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8003abe:	4e32      	ldr	r6, [pc, #200]	@ (8003b88 <HAL_UART_MspInit+0x100>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ac0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003ac2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003ac6:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ac8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003aca:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8003ace:	9200      	str	r2, [sp, #0]
 8003ad0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003ad4:	ed9f 7b26 	vldr	d7, [pc, #152]	@ 8003b70 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003ae0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003ae4:	ed9f 7b24 	vldr	d7, [pc, #144]	@ 8003b78 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aee:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003af0:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003af2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af6:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003af8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003afa:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003afe:	f001 fbeb 	bl	80052d8 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003b02:	4922      	ldr	r1, [pc, #136]	@ (8003b8c <HAL_UART_MspInit+0x104>)
 8003b04:	221a      	movs	r2, #26
 8003b06:	2300      	movs	r3, #0
 8003b08:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003b0c:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003b0e:	2280      	movs	r2, #128	@ 0x80
 8003b10:	e9c6 3302 	strd	r3, r3, [r6, #8]
 8003b14:	e9c6 2304 	strd	r2, r3, [r6, #16]
 8003b18:	e9c6 3306 	strd	r3, r3, [r6, #24]
 8003b1c:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003b1e:	f001 fb49 	bl	80051b4 <HAL_DMA_Init>
 8003b22:	b9f8      	cbnz	r0, 8003b64 <HAL_UART_MspInit+0xdc>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8003b24:	4d1a      	ldr	r5, [pc, #104]	@ (8003b90 <HAL_UART_MspInit+0x108>)
 8003b26:	491b      	ldr	r1, [pc, #108]	@ (8003b94 <HAL_UART_MspInit+0x10c>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003b28:	f8c4 6080 	str.w	r6, [r4, #128]	@ 0x80
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003b2c:	221b      	movs	r2, #27
 8003b2e:	2300      	movs	r3, #0
 8003b30:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003b34:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003b36:	2110      	movs	r1, #16
 8003b38:	2280      	movs	r2, #128	@ 0x80
 8003b3a:	e9c5 1302 	strd	r1, r3, [r5, #8]
 8003b3e:	e9c5 3305 	strd	r3, r3, [r5, #20]
 8003b42:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003b46:	62b4      	str	r4, [r6, #40]	@ 0x28
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003b48:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003b4a:	f001 fb33 	bl	80051b4 <HAL_DMA_Init>
 8003b4e:	b930      	cbnz	r0, 8003b5e <HAL_UART_MspInit+0xd6>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003b50:	67e5      	str	r5, [r4, #124]	@ 0x7c
 8003b52:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8003b54:	b01c      	add	sp, #112	@ 0x70
 8003b56:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8003b58:	f7fd fe50 	bl	80017fc <Error_Handler>
 8003b5c:	e7ae      	b.n	8003abc <HAL_UART_MspInit+0x34>
      Error_Handler();
 8003b5e:	f7fd fe4d 	bl	80017fc <Error_Handler>
 8003b62:	e7f5      	b.n	8003b50 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8003b64:	f7fd fe4a 	bl	80017fc <Error_Handler>
 8003b68:	e7dc      	b.n	8003b24 <HAL_UART_MspInit+0x9c>
 8003b6a:	bf00      	nop
 8003b6c:	f3af 8000 	nop.w
 8003b70:	0000000c 	.word	0x0000000c
 8003b74:	00000002 	.word	0x00000002
	...
 8003b80:	40004400 	.word	0x40004400
 8003b84:	40021000 	.word	0x40021000
 8003b88:	20000504 	.word	0x20000504
 8003b8c:	40020008 	.word	0x40020008
 8003b90:	200004a4 	.word	0x200004a4
 8003b94:	4002001c 	.word	0x4002001c

08003b98 <ADC1_2_IRQHandler>:
/**
  * @brief  This function handles BEMF sensing interrupt request from ADC1 and ADC2.
  * @param[in] None
  */
void BEMF_ADC1_2_READING_IRQHandler(void)
{
 8003b98:	b508      	push	{r3, lr}
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD1) == (LL_ADC_FLAG_AWD1)) ? 1UL : 0UL);
 8003b9a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	0612      	lsls	r2, r2, #24
 8003ba2:	d502      	bpl.n	8003baa <ADC1_2_IRQHandler+0x12>
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabledIT_AWD1(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->IER, LL_ADC_IT_AWD1) == (LL_ADC_IT_AWD1)) ? 1UL : 0UL);
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	0610      	lsls	r0, r2, #24
 8003ba8:	d410      	bmi.n	8003bcc <ADC1_2_IRQHandler+0x34>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD1) == (LL_ADC_FLAG_AWD1)) ? 1UL : 0UL);
 8003baa:	4b0c      	ldr	r3, [pc, #48]	@ (8003bdc <ADC1_2_IRQHandler+0x44>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	0611      	lsls	r1, r2, #24
 8003bb0:	d50b      	bpl.n	8003bca <ADC1_2_IRQHandler+0x32>
  return ((READ_BIT(ADCx->IER, LL_ADC_IT_AWD1) == (LL_ADC_IT_AWD1)) ? 1UL : 0UL);
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	0612      	lsls	r2, r2, #24
 8003bb6:	d508      	bpl.n	8003bca <ADC1_2_IRQHandler+0x32>

  if(LL_ADC_IsActiveFlag_AWD1(ADC2) && LL_ADC_IsEnabledIT_AWD1(ADC2))
  {
    /* Clear Flags */
    LL_ADC_ClearFlag_AWD1(ADC2);
    BADC_IsZcDetected(&Bemf_ADC_M1, PWM_Handle_M1.Step);
 8003bb8:	4909      	ldr	r1, [pc, #36]	@ (8003be0 <ADC1_2_IRQHandler+0x48>)
 8003bba:	480a      	ldr	r0, [pc, #40]	@ (8003be4 <ADC1_2_IRQHandler+0x4c>)
 8003bbc:	7ac9      	ldrb	r1, [r1, #11]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8003bbe:	2280      	movs	r2, #128	@ 0x80
 8003bc0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 1 */

  /* USER CODE END CURRENT_REGULATION_IRQn 1 */

}
 8003bc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    BADC_IsZcDetected(&Bemf_ADC_M1, PWM_Handle_M1.Step);
 8003bc6:	f003 be73 	b.w	80078b0 <BADC_IsZcDetected>
}
 8003bca:	bd08      	pop	{r3, pc}
    BADC_IsZcDetected(&Bemf_ADC_M1, PWM_Handle_M1.Step);
 8003bcc:	4904      	ldr	r1, [pc, #16]	@ (8003be0 <ADC1_2_IRQHandler+0x48>)
 8003bce:	4805      	ldr	r0, [pc, #20]	@ (8003be4 <ADC1_2_IRQHandler+0x4c>)
 8003bd0:	7ac9      	ldrb	r1, [r1, #11]
 8003bd2:	2280      	movs	r2, #128	@ 0x80
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	f003 fe6b 	bl	80078b0 <BADC_IsZcDetected>
 8003bda:	e7e6      	b.n	8003baa <ADC1_2_IRQHandler+0x12>
 8003bdc:	50000100 	.word	0x50000100
 8003be0:	20000028 	.word	0x20000028
 8003be4:	2000005c 	.word	0x2000005c

08003be8 <TIM2_IRQHandler>:
/**
  * @brief     LFtimer interrupt handler.
  * @param[in] None
  */
void PERIOD_COMM_IRQHandler(void)
{
 8003be8:	b538      	push	{r3, r4, r5, lr}
  /* TIM Update event */

  if(LL_TIM_IsActiveFlag_CC1(Bemf_ADC_M1.pParams_str->LfTim) && LL_TIM_IsEnabledIT_CC1(Bemf_ADC_M1.pParams_str->LfTim))
 8003bea:	4c16      	ldr	r4, [pc, #88]	@ (8003c44 <TIM2_IRQHandler+0x5c>)
 8003bec:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8003bee:	681b      	ldr	r3, [r3, #0]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(const TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8003bf0:	691a      	ldr	r2, [r3, #16]
 8003bf2:	0791      	lsls	r1, r2, #30
 8003bf4:	d519      	bpl.n	8003c2a <TIM2_IRQHandler+0x42>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_CC1(const TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_CC1IE) == (TIM_DIER_CC1IE)) ? 1UL : 0UL);
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	0792      	lsls	r2, r2, #30
 8003bfa:	d516      	bpl.n	8003c2a <TIM2_IRQHandler+0x42>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8003bfc:	f06f 0202 	mvn.w	r2, #2
 8003c00:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_CC1(Bemf_ADC_M1.pParams_str->LfTim);
    if ((Bemf_ADC_M1.SpeedTimerState == COMMUTATION) && (true == Bemf_ADC_M1.IsLoopClosed))
 8003c02:	f894 30fc 	ldrb.w	r3, [r4, #252]	@ 0xfc
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d010      	beq.n	8003c2c <TIM2_IRQHandler+0x44>
    {
      BADC_StepChangeEvent(&Bemf_ADC_M1, 0);
      SixStep_StepCommution();
    }
    else if (Bemf_ADC_M1.SpeedTimerState == DEMAGNETIZATION)
 8003c0a:	b973      	cbnz	r3, 8003c2a <TIM2_IRQHandler+0x42>
    {
      PWMC_SetADCTriggerChannel( &PWM_Handle_M1, *Bemf_ADC_M1.pSensing_Point);
 8003c0c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003c0e:	4d0e      	ldr	r5, [pc, #56]	@ (8003c48 <TIM2_IRQHandler+0x60>)
 8003c10:	8819      	ldrh	r1, [r3, #0]
 8003c12:	4628      	mov	r0, r5
 8003c14:	f004 fc12 	bl	800843c <PWMC_SetADCTriggerChannel>
      BADC_Start(&Bemf_ADC_M1, PWM_Handle_M1.Step, PWM_Handle_M1.LSModArray);
 8003c18:	7ae9      	ldrb	r1, [r5, #11]
 8003c1a:	f105 020c 	add.w	r2, r5, #12
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f003 fd38 	bl	8007694 <BADC_Start>
      Bemf_ADC_M1.SpeedTimerState = COMMUTATION;
 8003c24:	2301      	movs	r3, #1
 8003c26:	f884 30fc 	strb.w	r3, [r4, #252]	@ 0xfc
  }
  else
  {
    /* Nothing to do */
  }
}
 8003c2a:	bd38      	pop	{r3, r4, r5, pc}
    if ((Bemf_ADC_M1.SpeedTimerState == COMMUTATION) && (true == Bemf_ADC_M1.IsLoopClosed))
 8003c2c:	f894 3067 	ldrb.w	r3, [r4, #103]	@ 0x67
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0fa      	beq.n	8003c2a <TIM2_IRQHandler+0x42>
      BADC_StepChangeEvent(&Bemf_ADC_M1, 0);
 8003c34:	4620      	mov	r0, r4
 8003c36:	2100      	movs	r1, #0
 8003c38:	f003 ffae 	bl	8007b98 <BADC_StepChangeEvent>
}
 8003c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      SixStep_StepCommution();
 8003c40:	f7fe babe 	b.w	80021c0 <SixStep_StepCommution>
 8003c44:	2000005c 	.word	0x2000005c
 8003c48:	20000028 	.word	0x20000028

08003c4c <TIM1_UP_TIM16_IRQHandler>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003c4c:	4b02      	ldr	r3, [pc, #8]	@ (8003c58 <TIM1_UP_TIM16_IRQHandler+0xc>)
 8003c4e:	f06f 0201 	mvn.w	r2, #1
 8003c52:	611a      	str	r2, [r3, #16]
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(TIM1);
  (void)TSK_HighFrequencyTask();
 8003c54:	f7fd befa 	b.w	8001a4c <TSK_HighFrequencyTask>
 8003c58:	40012c00 	.word	0x40012c00

08003c5c <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8003c5c:	b508      	push	{r3, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8003c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c90 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8003c60:	691a      	ldr	r2, [r3, #16]
 8003c62:	0611      	lsls	r1, r2, #24
 8003c64:	d505      	bpl.n	8003c72 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003c66:	f06f 0280 	mvn.w	r2, #128	@ 0x80
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_BRK_IRQHandler(&PWM_Handle_M1);
 8003c6a:	480a      	ldr	r0, [pc, #40]	@ (8003c94 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8003c6c:	611a      	str	r2, [r3, #16]
 8003c6e:	f004 fc15 	bl	800849c <PWMC_BRK_IRQHandler>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8003c72:	4b07      	ldr	r3, [pc, #28]	@ (8003c90 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	05d2      	lsls	r2, r2, #23
 8003c78:	d505      	bpl.n	8003c86 <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8003c7a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    PWMC_BRK_IRQHandler(&PWM_Handle_M1);
 8003c7e:	4805      	ldr	r0, [pc, #20]	@ (8003c94 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8003c80:	611a      	str	r2, [r3, #16]
 8003c82:	f004 fc0b 	bl	800849c <PWMC_BRK_IRQHandler>
  MC_RunMotorControlTasks();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8003c86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_RunMotorControlTasks();
 8003c8a:	f7fd bf59 	b.w	8001b40 <MC_RunMotorControlTasks>
 8003c8e:	bf00      	nop
 8003c90:	40012c00 	.word	0x40012c00
 8003c94:	20000028 	.word	0x20000028

08003c98 <UASPEP_INIT>:
  * @brief  Initialization of the Hardware used for data transmission and reception.
  *
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_INIT(void *pHWHandle)
{
 8003c98:	b430      	push	{r4, r5}
#endif
    /* DMA interrupt not used for all families */
    /* Enable DMA end of transfer on UART RX channel completion */
    /* LL_DMA_EnableIT_TC(pHandle->rxDMA, pHandle->rxChannel) */
    /* Enable Error interrupt (EIE) to unmask Overrun interrupt */
    LL_USART_EnableIT_ERROR(pHandle->USARTx);
 8003c9a:	6802      	ldr	r2, [r0, #0]
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
 8003c9c:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca0:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca8:	e841 3400 	strex	r4, r3, [r1]
 8003cac:	2c00      	cmp	r4, #0
 8003cae:	d1f7      	bne.n	8003ca0 <UASPEP_INIT+0x8>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8003cb0:	68c1      	ldr	r1, [r0, #12]
 8003cb2:	4d19      	ldr	r5, [pc, #100]	@ (8003d18 <UASPEP_INIT+0x80>)
 8003cb4:	6843      	ldr	r3, [r0, #4]
 8003cb6:	5c6c      	ldrb	r4, [r5, r1]
 8003cb8:	4423      	add	r3, r4

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 8003cba:	f102 0124 	add.w	r1, r2, #36	@ 0x24
 8003cbe:	6099      	str	r1, [r3, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003cc0:	2340      	movs	r3, #64	@ 0x40
 8003cc2:	6213      	str	r3, [r2, #32]
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
 8003cc4:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc8:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003ccc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd0:	e841 3400 	strex	r4, r3, [r1]
 8003cd4:	2c00      	cmp	r4, #0
 8003cd6:	d1f7      	bne.n	8003cc8 <UASPEP_INIT+0x30>
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003cd8:	2340      	movs	r3, #64	@ 0x40
 8003cda:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cdc:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8003ce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce4:	e842 3100 	strex	r1, r3, [r2]
 8003ce8:	2900      	cmp	r1, #0
 8003cea:	d1f7      	bne.n	8003cdc <UASPEP_INIT+0x44>
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
 8003cec:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf0:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8003cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf8:	e841 3400 	strex	r4, r3, [r1]
 8003cfc:	2c00      	cmp	r4, #0
 8003cfe:	d1f7      	bne.n	8003cf0 <UASPEP_INIT+0x58>
 8003d00:	6901      	ldr	r1, [r0, #16]
 8003d02:	6883      	ldr	r3, [r0, #8]
 8003d04:	5c69      	ldrb	r1, [r5, r1]
 8003d06:	440b      	add	r3, r1
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 8003d08:	f102 0028 	add.w	r0, r2, #40	@ 0x28
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8003d0c:	2140      	movs	r1, #64	@ 0x40
 8003d0e:	6098      	str	r0, [r3, #8]
}
 8003d10:	bc30      	pop	{r4, r5}
 8003d12:	6211      	str	r1, [r2, #32]
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	08008f94 	.word	0x08008f94

08003d1c <UASPEP_CFG_TRANSMISSION>:
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8003d1c:	6903      	ldr	r3, [r0, #16]
 8003d1e:	6880      	ldr	r0, [r0, #8]
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
void UASPEP_CFG_TRANSMISSION(void *pHWHandle, void *data, uint16_t length)
{
 8003d20:	b410      	push	{r4}
 8003d22:	4c0b      	ldr	r4, [pc, #44]	@ (8003d50 <UASPEP_CFG_TRANSMISSION+0x34>)
 8003d24:	5ce3      	ldrb	r3, [r4, r3]
 8003d26:	58c4      	ldr	r4, [r0, r3]
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8003d28:	07e4      	lsls	r4, r4, #31
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8003d2a:	eb00 0c03 	add.w	ip, r0, r3
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8003d2e:	d40c      	bmi.n	8003d4a <UASPEP_CFG_TRANSMISSION+0x2e>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8003d30:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8003d34:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8003d38:	f36f 010f 	bfc	r1, #0, #16
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	f8cc 2004 	str.w	r2, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003d42:	58c2      	ldr	r2, [r0, r3]
 8003d44:	f042 0201 	orr.w	r2, r2, #1
 8003d48:	50c2      	str	r2, [r0, r3]
  }
  else
  {
    /* Nothing to do */
  }
}
 8003d4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	08008f94 	.word	0x08008f94

08003d54 <UASPEP_CFG_RECEPTION>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_CFG_RECEPTION(void *pHWHandle, void* buffer, uint16_t length)
{
 8003d54:	b410      	push	{r4}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003d56:	68c3      	ldr	r3, [r0, #12]
 8003d58:	4c0c      	ldr	r4, [pc, #48]	@ (8003d8c <UASPEP_CFG_RECEPTION+0x38>)
 8003d5a:	6840      	ldr	r0, [r0, #4]
 8003d5c:	5ce3      	ldrb	r3, [r4, r3]
 8003d5e:	58c4      	ldr	r4, [r0, r3]
 8003d60:	eb00 0c03 	add.w	ip, r0, r3
 8003d64:	f024 0401 	bic.w	r4, r4, #1
 8003d68:	50c4      	str	r4, [r0, r3]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8003d6a:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8003d6e:	f8dc 1004 	ldr.w	r1, [ip, #4]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 8003d72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d76:	f36f 010f 	bfc	r1, #0, #16
 8003d7a:	4311      	orrs	r1, r2
 8003d7c:	f8cc 1004 	str.w	r1, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003d80:	58c2      	ldr	r2, [r0, r3]
 8003d82:	f042 0201 	orr.w	r2, r2, #1
 8003d86:	50c2      	str	r2, [r0, r3]
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	08008f94 	.word	0x08008f94

08003d90 <UASPEP_IDLE_ENABLE>:
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8003d90:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8003d92:	2310      	movs	r3, #16
 8003d94:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d96:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003d9a:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9e:	e842 3100 	strex	r1, r3, [r2]
 8003da2:	2900      	cmp	r1, #0
 8003da4:	d1f7      	bne.n	8003d96 <UASPEP_IDLE_ENABLE+0x6>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8003da6:	4770      	bx	lr

08003da8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003da8:	4a03      	ldr	r2, [pc, #12]	@ (8003db8 <SystemInit+0x10>)
 8003daa:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003dae:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003db2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003db6:	4770      	bx	lr
 8003db8:	e000ed00 	.word	0xe000ed00

08003dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dbc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8003dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8003dfc <HAL_InitTick+0x40>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	b90b      	cbnz	r3, 8003dc8 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8003dc4:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8003dc6:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003dc8:	490d      	ldr	r1, [pc, #52]	@ (8003e00 <HAL_InitTick+0x44>)
 8003dca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003dce:	4605      	mov	r5, r0
 8003dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd4:	6808      	ldr	r0, [r1, #0]
 8003dd6:	fbb0 f0f3 	udiv	r0, r0, r3
 8003dda:	f001 f9cb 	bl	8005174 <HAL_SYSTICK_Config>
 8003dde:	4604      	mov	r4, r0
 8003de0:	2800      	cmp	r0, #0
 8003de2:	d1ef      	bne.n	8003dc4 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003de4:	2d0f      	cmp	r5, #15
 8003de6:	d8ed      	bhi.n	8003dc4 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003de8:	4602      	mov	r2, r0
 8003dea:	4629      	mov	r1, r5
 8003dec:	f04f 30ff 	mov.w	r0, #4294967295
 8003df0:	f001 f964 	bl	80050bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003df4:	4b03      	ldr	r3, [pc, #12]	@ (8003e04 <HAL_InitTick+0x48>)
 8003df6:	4620      	mov	r0, r4
 8003df8:	601d      	str	r5, [r3, #0]
}
 8003dfa:	bd38      	pop	{r3, r4, r5, pc}
 8003dfc:	20000480 	.word	0x20000480
 8003e00:	2000047c 	.word	0x2000047c
 8003e04:	20000484 	.word	0x20000484

08003e08 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e08:	4a0a      	ldr	r2, [pc, #40]	@ (8003e34 <HAL_Init+0x2c>)
 8003e0a:	6813      	ldr	r3, [r2, #0]
 8003e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
{
 8003e10:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e12:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e14:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e16:	f001 f93f 	bl	8005098 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e1a:	2004      	movs	r0, #4
 8003e1c:	f7ff ffce 	bl	8003dbc <HAL_InitTick>
 8003e20:	b110      	cbz	r0, 8003e28 <HAL_Init+0x20>
    status = HAL_ERROR;
 8003e22:	2401      	movs	r4, #1
}
 8003e24:	4620      	mov	r0, r4
 8003e26:	bd10      	pop	{r4, pc}
 8003e28:	4604      	mov	r4, r0
    HAL_MspInit();
 8003e2a:	f7ff fcd1 	bl	80037d0 <HAL_MspInit>
}
 8003e2e:	4620      	mov	r0, r4
 8003e30:	bd10      	pop	{r4, pc}
 8003e32:	bf00      	nop
 8003e34:	40022000 	.word	0x40022000

08003e38 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003e38:	4a03      	ldr	r2, [pc, #12]	@ (8003e48 <HAL_IncTick+0x10>)
 8003e3a:	4904      	ldr	r1, [pc, #16]	@ (8003e4c <HAL_IncTick+0x14>)
 8003e3c:	6813      	ldr	r3, [r2, #0]
 8003e3e:	6809      	ldr	r1, [r1, #0]
 8003e40:	440b      	add	r3, r1
 8003e42:	6013      	str	r3, [r2, #0]
}
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	20001a74 	.word	0x20001a74
 8003e4c:	20000480 	.word	0x20000480

08003e50 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003e50:	4b01      	ldr	r3, [pc, #4]	@ (8003e58 <HAL_GetTick+0x8>)
 8003e52:	6818      	ldr	r0, [r3, #0]
}
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	20001a74 	.word	0x20001a74

08003e5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e5c:	b530      	push	{r4, r5, lr}
 8003e5e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003e60:	2300      	movs	r3, #0
 8003e62:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e64:	2800      	cmp	r0, #0
 8003e66:	d05c      	beq.n	8003f22 <HAL_ADC_Init+0xc6>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e68:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	2d00      	cmp	r5, #0
 8003e6e:	f000 80c1 	beq.w	8003ff4 <HAL_ADC_Init+0x198>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003e72:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e74:	6893      	ldr	r3, [r2, #8]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	d505      	bpl.n	8003e86 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e7a:	6893      	ldr	r3, [r2, #8]
 8003e7c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003e80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e84:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e86:	6893      	ldr	r3, [r2, #8]
 8003e88:	00dd      	lsls	r5, r3, #3
 8003e8a:	d419      	bmi.n	8003ec0 <HAL_ADC_Init+0x64>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e8c:	4b6f      	ldr	r3, [pc, #444]	@ (800404c <HAL_ADC_Init+0x1f0>)
 8003e8e:	4870      	ldr	r0, [pc, #448]	@ (8004050 <HAL_ADC_Init+0x1f4>)
 8003e90:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003e92:	6891      	ldr	r1, [r2, #8]
 8003e94:	099b      	lsrs	r3, r3, #6
 8003e96:	fba0 0303 	umull	r0, r3, r0, r3
 8003e9a:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 8003e9e:	099b      	lsrs	r3, r3, #6
 8003ea0:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8003eac:	6091      	str	r1, [r2, #8]
 8003eae:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003eb0:	9b01      	ldr	r3, [sp, #4]
 8003eb2:	b12b      	cbz	r3, 8003ec0 <HAL_ADC_Init+0x64>
    {
      wait_loop_index--;
 8003eb4:	9b01      	ldr	r3, [sp, #4]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003eba:	9b01      	ldr	r3, [sp, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1f9      	bne.n	8003eb4 <HAL_ADC_Init+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ec0:	6893      	ldr	r3, [r2, #8]
 8003ec2:	00d8      	lsls	r0, r3, #3
 8003ec4:	d430      	bmi.n	8003f28 <HAL_ADC_Init+0xcc>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ec6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003ec8:	f043 0310 	orr.w	r3, r3, #16
 8003ecc:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ece:	6e23      	ldr	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003ed0:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ed2:	4303      	orrs	r3, r0
 8003ed4:	6623      	str	r3, [r4, #96]	@ 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ed6:	6893      	ldr	r3, [r2, #8]
 8003ed8:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003edc:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003ede:	d11c      	bne.n	8003f1a <HAL_ADC_Init+0xbe>
 8003ee0:	06d9      	lsls	r1, r3, #27
 8003ee2:	d41a      	bmi.n	8003f1a <HAL_ADC_Init+0xbe>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ee4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003ee6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003eea:	f043 0302 	orr.w	r3, r3, #2
 8003eee:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ef0:	6893      	ldr	r3, [r2, #8]
 8003ef2:	07db      	lsls	r3, r3, #31
 8003ef4:	d429      	bmi.n	8003f4a <HAL_ADC_Init+0xee>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ef6:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8003efa:	d017      	beq.n	8003f2c <HAL_ADC_Init+0xd0>
 8003efc:	4b55      	ldr	r3, [pc, #340]	@ (8004054 <HAL_ADC_Init+0x1f8>)
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d014      	beq.n	8003f2c <HAL_ADC_Init+0xd0>
 8003f02:	4955      	ldr	r1, [pc, #340]	@ (8004058 <HAL_ADC_Init+0x1fc>)
 8003f04:	4b55      	ldr	r3, [pc, #340]	@ (800405c <HAL_ADC_Init+0x200>)
 8003f06:	6889      	ldr	r1, [r1, #8]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	430b      	orrs	r3, r1
 8003f0c:	4954      	ldr	r1, [pc, #336]	@ (8004060 <HAL_ADC_Init+0x204>)
 8003f0e:	6889      	ldr	r1, [r1, #8]
 8003f10:	430b      	orrs	r3, r1
 8003f12:	07d9      	lsls	r1, r3, #31
 8003f14:	d419      	bmi.n	8003f4a <HAL_ADC_Init+0xee>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f16:	4953      	ldr	r1, [pc, #332]	@ (8004064 <HAL_ADC_Init+0x208>)
 8003f18:	e011      	b.n	8003f3e <HAL_ADC_Init+0xe2>
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f1a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003f1c:	f043 0310 	orr.w	r3, r3, #16
 8003f20:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8003f22:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003f24:	b003      	add	sp, #12
 8003f26:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f28:	2000      	movs	r0, #0
 8003f2a:	e7d4      	b.n	8003ed6 <HAL_ADC_Init+0x7a>
 8003f2c:	4b49      	ldr	r3, [pc, #292]	@ (8004054 <HAL_ADC_Init+0x1f8>)
 8003f2e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8003f32:	6889      	ldr	r1, [r1, #8]
 8003f34:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f36:	430b      	orrs	r3, r1
 8003f38:	07dd      	lsls	r5, r3, #31
 8003f3a:	d406      	bmi.n	8003f4a <HAL_ADC_Init+0xee>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f3c:	494a      	ldr	r1, [pc, #296]	@ (8004068 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003f3e:	688b      	ldr	r3, [r1, #8]
 8003f40:	6865      	ldr	r5, [r4, #4]
 8003f42:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8003f46:	432b      	orrs	r3, r5
 8003f48:	608b      	str	r3, [r1, #8]
                 hadc->Init.DataAlign                                                   |
 8003f4a:	68e5      	ldr	r5, [r4, #12]
 8003f4c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f4e:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
                 hadc->Init.DataAlign                                                   |
 8003f52:	432b      	orrs	r3, r5
 8003f54:	68a5      	ldr	r5, [r4, #8]
 8003f56:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f58:	7f65      	ldrb	r5, [r4, #29]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f5a:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 8003f5c:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f64:	d04c      	beq.n	8004000 <HAL_ADC_Init+0x1a4>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f66:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003f68:	b121      	cbz	r1, 8003f74 <HAL_ADC_Init+0x118>
                   | hadc->Init.ExternalTrigConvEdge
 8003f6a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f6c:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003f70:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f72:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003f74:	68d5      	ldr	r5, [r2, #12]
 8003f76:	493d      	ldr	r1, [pc, #244]	@ (800406c <HAL_ADC_Init+0x210>)
 8003f78:	4029      	ands	r1, r5
 8003f7a:	4319      	orrs	r1, r3
 8003f7c:	60d1      	str	r1, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003f7e:	6913      	ldr	r3, [r2, #16]
 8003f80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f82:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8003f86:	430b      	orrs	r3, r1
 8003f88:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f8a:	6893      	ldr	r3, [r2, #8]
 8003f8c:	071b      	lsls	r3, r3, #28
 8003f8e:	d422      	bmi.n	8003fd6 <HAL_ADC_Init+0x17a>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003f90:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f92:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f96:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003f98:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003f9c:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003f9e:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fa2:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003fa6:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8003fa8:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003faa:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003fac:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8003fae:	2900      	cmp	r1, #0
 8003fb0:	d033      	beq.n	800401a <HAL_ADC_Init+0x1be>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003fb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fb6:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003fb8:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8003fbc:	f36f 030d 	bfc	r3, #0, #14
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8003fc6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d02f      	beq.n	800402e <HAL_ADC_Init+0x1d2>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003fce:	6913      	ldr	r3, [r2, #16]
 8003fd0:	f023 0301 	bic.w	r3, r3, #1
 8003fd4:	6113      	str	r3, [r2, #16]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003fd6:	6963      	ldr	r3, [r4, #20]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d016      	beq.n	800400a <HAL_ADC_Init+0x1ae>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003fdc:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003fde:	f023 030f 	bic.w	r3, r3, #15
 8003fe2:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003fe4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003fe6:	f023 0303 	bic.w	r3, r3, #3
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 8003ff0:	b003      	add	sp, #12
 8003ff2:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8003ff4:	f7ff fc0c 	bl	8003810 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003ff8:	6625      	str	r5, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 8003ffa:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 8003ffe:	e738      	b.n	8003e72 <HAL_ADC_Init+0x16>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004000:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004002:	3901      	subs	r1, #1
 8004004:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8004008:	e7ad      	b.n	8003f66 <HAL_ADC_Init+0x10a>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800400a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800400c:	6a23      	ldr	r3, [r4, #32]
 800400e:	f021 010f 	bic.w	r1, r1, #15
 8004012:	3b01      	subs	r3, #1
 8004014:	430b      	orrs	r3, r1
 8004016:	6313      	str	r3, [r2, #48]	@ 0x30
 8004018:	e7e4      	b.n	8003fe4 <HAL_ADC_Init+0x188>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800401a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800401e:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004020:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8004024:	f36f 030d 	bfc	r3, #0, #14
 8004028:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800402c:	e7cb      	b.n	8003fc6 <HAL_ADC_Init+0x16a>
        MODIFY_REG(hadc->Instance->CFGR2,
 800402e:	6911      	ldr	r1, [r2, #16]
 8004030:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004032:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8004034:	f36f 018a 	bfc	r1, #2, #9
 8004038:	432b      	orrs	r3, r5
 800403a:	430b      	orrs	r3, r1
 800403c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800403e:	430b      	orrs	r3, r1
 8004040:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8004042:	430b      	orrs	r3, r1
 8004044:	f043 0301 	orr.w	r3, r3, #1
 8004048:	6113      	str	r3, [r2, #16]
 800404a:	e7c4      	b.n	8003fd6 <HAL_ADC_Init+0x17a>
 800404c:	2000047c 	.word	0x2000047c
 8004050:	053e2d63 	.word	0x053e2d63
 8004054:	50000100 	.word	0x50000100
 8004058:	50000400 	.word	0x50000400
 800405c:	50000500 	.word	0x50000500
 8004060:	50000600 	.word	0x50000600
 8004064:	50000700 	.word	0x50000700
 8004068:	50000300 	.word	0x50000300
 800406c:	fff04007 	.word	0xfff04007

08004070 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004074:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
{
 8004078:	b082      	sub	sp, #8
 800407a:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800407c:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 800407e:	f04f 0000 	mov.w	r0, #0
 8004082:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8004084:	f000 8168 	beq.w	8004358 <HAL_ADC_ConfigChannel+0x2e8>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004088:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 800408a:	2001      	movs	r0, #1
 800408c:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004090:	6894      	ldr	r4, [r2, #8]
 8004092:	0767      	lsls	r7, r4, #29
 8004094:	d467      	bmi.n	8004166 <HAL_ADC_ConfigChannel+0xf6>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004096:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004098:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 800409c:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80040a0:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 80040a4:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80040a6:	f102 0430 	add.w	r4, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 80040aa:	261f      	movs	r6, #31
 80040ac:	f854 500e 	ldr.w	r5, [r4, lr]
 80040b0:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80040b4:	fa00 f00c 	lsl.w	r0, r0, ip
 80040b8:	fa06 fc0c 	lsl.w	ip, r6, ip
 80040bc:	ea25 0c0c 	bic.w	ip, r5, ip
 80040c0:	ea40 000c 	orr.w	r0, r0, ip
 80040c4:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040c8:	6890      	ldr	r0, [r2, #8]
 80040ca:	0746      	lsls	r6, r0, #29
 80040cc:	d555      	bpl.n	800417a <HAL_ADC_ConfigChannel+0x10a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040ce:	6890      	ldr	r0, [r2, #8]
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80040d0:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040d2:	6894      	ldr	r4, [r2, #8]
 80040d4:	07e4      	lsls	r4, r4, #31
 80040d6:	d412      	bmi.n	80040fe <HAL_ADC_ConfigChannel+0x8e>
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80040d8:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80040da:	4cb2      	ldr	r4, [pc, #712]	@ (80043a4 <HAL_ADC_ConfigChannel+0x334>)
 80040dc:	f8d2 50b0 	ldr.w	r5, [r2, #176]	@ 0xb0
 80040e0:	f006 0718 	and.w	r7, r6, #24
 80040e4:	40fc      	lsrs	r4, r7
 80040e6:	f3c0 0712 	ubfx	r7, r0, #0, #19
 80040ea:	4004      	ands	r4, r0
 80040ec:	ea25 0507 	bic.w	r5, r5, r7
 80040f0:	432c      	orrs	r4, r5
 80040f2:	f8c2 40b0 	str.w	r4, [r2, #176]	@ 0xb0

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80040f6:	4cac      	ldr	r4, [pc, #688]	@ (80043a8 <HAL_ADC_ConfigChannel+0x338>)
 80040f8:	42a6      	cmp	r6, r4
 80040fa:	f000 8091 	beq.w	8004220 <HAL_ADC_ConfigChannel+0x1b0>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80040fe:	49ab      	ldr	r1, [pc, #684]	@ (80043ac <HAL_ADC_ConfigChannel+0x33c>)
 8004100:	4208      	tst	r0, r1
 8004102:	d02e      	beq.n	8004162 <HAL_ADC_ConfigChannel+0xf2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004104:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8004108:	f000 80db 	beq.w	80042c2 <HAL_ADC_ConfigChannel+0x252>
 800410c:	49a8      	ldr	r1, [pc, #672]	@ (80043b0 <HAL_ADC_ConfigChannel+0x340>)
 800410e:	428a      	cmp	r2, r1
 8004110:	f000 80f0 	beq.w	80042f4 <HAL_ADC_ConfigChannel+0x284>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004114:	f501 61c0 	add.w	r1, r1, #1536	@ 0x600

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004118:	4ca6      	ldr	r4, [pc, #664]	@ (80043b4 <HAL_ADC_ConfigChannel+0x344>)
 800411a:	6889      	ldr	r1, [r1, #8]
 800411c:	42a0      	cmp	r0, r4
 800411e:	f001 75e0 	and.w	r5, r1, #29360128	@ 0x1c00000
 8004122:	f000 80f3 	beq.w	800430c <HAL_ADC_ConfigChannel+0x29c>
 8004126:	4ca4      	ldr	r4, [pc, #656]	@ (80043b8 <HAL_ADC_ConfigChannel+0x348>)
 8004128:	42a0      	cmp	r0, r4
 800412a:	f000 80ef 	beq.w	800430c <HAL_ADC_ConfigChannel+0x29c>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800412e:	4ca3      	ldr	r4, [pc, #652]	@ (80043bc <HAL_ADC_ConfigChannel+0x34c>)
 8004130:	42a0      	cmp	r0, r4
 8004132:	f000 812a 	beq.w	800438a <HAL_ADC_ConfigChannel+0x31a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004136:	4ca2      	ldr	r4, [pc, #648]	@ (80043c0 <HAL_ADC_ConfigChannel+0x350>)
 8004138:	42a0      	cmp	r0, r4
 800413a:	d112      	bne.n	8004162 <HAL_ADC_ConfigChannel+0xf2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800413c:	0249      	lsls	r1, r1, #9
 800413e:	d410      	bmi.n	8004162 <HAL_ADC_ConfigChannel+0xf2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004140:	499b      	ldr	r1, [pc, #620]	@ (80043b0 <HAL_ADC_ConfigChannel+0x340>)
 8004142:	428a      	cmp	r2, r1
 8004144:	d00d      	beq.n	8004162 <HAL_ADC_ConfigChannel+0xf2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004146:	489f      	ldr	r0, [pc, #636]	@ (80043c4 <HAL_ADC_ConfigChannel+0x354>)
 8004148:	f501 61c0 	add.w	r1, r1, #1536	@ 0x600
 800414c:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8004150:	bf08      	it	eq
 8004152:	4601      	moveq	r1, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004154:	688a      	ldr	r2, [r1, #8]
 8004156:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800415a:	432a      	orrs	r2, r5
 800415c:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8004160:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004162:	2000      	movs	r0, #0
 8004164:	e003      	b.n	800416e <HAL_ADC_ConfigChannel+0xfe>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004166:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004168:	f042 0220 	orr.w	r2, r2, #32
 800416c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004174:	b002      	add	sp, #8
 8004176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800417a:	6894      	ldr	r4, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800417c:	6808      	ldr	r0, [r1, #0]
 800417e:	0725      	lsls	r5, r4, #28
 8004180:	d4a7      	bmi.n	80040d2 <HAL_ADC_ConfigChannel+0x62>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004182:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 8004184:	f3c0 5604 	ubfx	r6, r0, #20, #5
 8004188:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800418a:	0dc0      	lsrs	r0, r0, #23
  MODIFY_REG(*preg,
 800418c:	40b4      	lsls	r4, r6
 800418e:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004192:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8004196:	ea6f 0404 	mvn.w	r4, r4
 800419a:	f000 814b 	beq.w	8004434 <HAL_ADC_ConfigChannel+0x3c4>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800419e:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 80041a2:	40b5      	lsls	r5, r6
 80041a4:	583e      	ldr	r6, [r7, r0]
 80041a6:	4034      	ands	r4, r6
 80041a8:	432c      	orrs	r4, r5
 80041aa:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80041ac:	6950      	ldr	r0, [r2, #20]
 80041ae:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80041b2:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80041b4:	e9d1 6404 	ldrd	r6, r4, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80041b8:	6808      	ldr	r0, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80041ba:	68d5      	ldr	r5, [r2, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80041bc:	2e04      	cmp	r6, #4
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80041be:	4607      	mov	r7, r0
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80041c0:	f000 810c 	beq.w	80043dc <HAL_ADC_ConfigChannel+0x36c>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80041c4:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 80041c8:	006d      	lsls	r5, r5, #1
  MODIFY_REG(*preg,
 80041ca:	f000 47f8 	and.w	r7, r0, #2080374784	@ 0x7c000000
 80041ce:	fa04 f005 	lsl.w	r0, r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041d2:	f102 0460 	add.w	r4, r2, #96	@ 0x60
  MODIFY_REG(*preg,
 80041d6:	4d7c      	ldr	r5, [pc, #496]	@ (80043c8 <HAL_ADC_ConfigChannel+0x358>)
 80041d8:	f854 c026 	ldr.w	ip, [r4, r6, lsl #2]
 80041dc:	ea0c 0505 	and.w	r5, ip, r5
 80041e0:	433d      	orrs	r5, r7
 80041e2:	4328      	orrs	r0, r5
 80041e4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80041e8:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041ec:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 80041ee:	698e      	ldr	r6, [r1, #24]
 80041f0:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 80041f4:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 80041f8:	4330      	orrs	r0, r6
 80041fa:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041fe:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004200:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8004202:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8004206:	f1a5 0501 	sub.w	r5, r5, #1
 800420a:	fab5 f585 	clz	r5, r5
 800420e:	096d      	lsrs	r5, r5, #5
 8004210:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8004214:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 8004218:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800421c:	6808      	ldr	r0, [r1, #0]
}
 800421e:	e758      	b.n	80040d2 <HAL_ADC_ConfigChannel+0x62>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004220:	2f00      	cmp	r7, #0
 8004222:	f000 809d 	beq.w	8004360 <HAL_ADC_ConfigChannel+0x2f0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004226:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800422a:	2c00      	cmp	r4, #0
 800422c:	f000 810c 	beq.w	8004448 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004230:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004234:	3401      	adds	r4, #1
 8004236:	f004 041f 	and.w	r4, r4, #31
 800423a:	2c09      	cmp	r4, #9
 800423c:	f240 8104 	bls.w	8004448 <HAL_ADC_ConfigChannel+0x3d8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004240:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8004244:	2c00      	cmp	r4, #0
 8004246:	f000 81a5 	beq.w	8004594 <HAL_ADC_ConfigChannel+0x524>
  return __builtin_clz(value);
 800424a:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800424e:	3401      	adds	r4, #1
 8004250:	06a4      	lsls	r4, r4, #26
 8004252:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004256:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800425a:	2d00      	cmp	r5, #0
 800425c:	f000 81a4 	beq.w	80045a8 <HAL_ADC_ConfigChannel+0x538>
  return __builtin_clz(value);
 8004260:	fab5 f585 	clz	r5, r5
 8004264:	3501      	adds	r5, #1
 8004266:	f005 051f 	and.w	r5, r5, #31
 800426a:	2601      	movs	r6, #1
 800426c:	fa06 f505 	lsl.w	r5, r6, r5
 8004270:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004272:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004276:	2800      	cmp	r0, #0
 8004278:	f000 8194 	beq.w	80045a4 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 800427c:	fab0 f080 	clz	r0, r0
 8004280:	1c45      	adds	r5, r0, #1
 8004282:	f005 051f 	and.w	r5, r5, #31
 8004286:	2003      	movs	r0, #3
 8004288:	f06f 061d 	mvn.w	r6, #29
 800428c:	fb10 6005 	smlabb	r0, r0, r5, r6
 8004290:	0500      	lsls	r0, r0, #20
 8004292:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004296:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004298:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 800429a:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800429c:	f005 0504 	and.w	r5, r5, #4
 80042a0:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 80042a4:	f3c0 5004 	ubfx	r0, r0, #20, #5
 80042a8:	fa04 f700 	lsl.w	r7, r4, r0
 80042ac:	f04f 0c07 	mov.w	ip, #7
 80042b0:	5974      	ldr	r4, [r6, r5]
 80042b2:	fa0c f000 	lsl.w	r0, ip, r0
 80042b6:	ea24 0000 	bic.w	r0, r4, r0
 80042ba:	4338      	orrs	r0, r7
 80042bc:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80042be:	6808      	ldr	r0, [r1, #0]
}
 80042c0:	e71d      	b.n	80040fe <HAL_ADC_ConfigChannel+0x8e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80042c2:	4c40      	ldr	r4, [pc, #256]	@ (80043c4 <HAL_ADC_ConfigChannel+0x354>)
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80042c4:	4e3b      	ldr	r6, [pc, #236]	@ (80043b4 <HAL_ADC_ConfigChannel+0x344>)
 80042c6:	68a1      	ldr	r1, [r4, #8]
 80042c8:	42b0      	cmp	r0, r6
 80042ca:	f001 75e0 	and.w	r5, r1, #29360128	@ 0x1c00000
 80042ce:	d066      	beq.n	800439e <HAL_ADC_ConfigChannel+0x32e>
 80042d0:	4e39      	ldr	r6, [pc, #228]	@ (80043b8 <HAL_ADC_ConfigChannel+0x348>)
 80042d2:	42b0      	cmp	r0, r6
 80042d4:	d063      	beq.n	800439e <HAL_ADC_ConfigChannel+0x32e>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80042d6:	4e39      	ldr	r6, [pc, #228]	@ (80043bc <HAL_ADC_ConfigChannel+0x34c>)
 80042d8:	42b0      	cmp	r0, r6
 80042da:	f47f af2c 	bne.w	8004136 <HAL_ADC_ConfigChannel+0xc6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80042de:	01ce      	lsls	r6, r1, #7
 80042e0:	f53f af3f 	bmi.w	8004162 <HAL_ADC_ConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80042e4:	68a2      	ldr	r2, [r4, #8]
 80042e6:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80042ea:	432a      	orrs	r2, r5
 80042ec:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80042f0:	60a2      	str	r2, [r4, #8]
}
 80042f2:	e736      	b.n	8004162 <HAL_ADC_ConfigChannel+0xf2>
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80042f4:	4c2f      	ldr	r4, [pc, #188]	@ (80043b4 <HAL_ADC_ConfigChannel+0x344>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80042f6:	4933      	ldr	r1, [pc, #204]	@ (80043c4 <HAL_ADC_ConfigChannel+0x354>)
 80042f8:	42a0      	cmp	r0, r4
 80042fa:	6889      	ldr	r1, [r1, #8]
 80042fc:	f43f af31 	beq.w	8004162 <HAL_ADC_ConfigChannel+0xf2>
 8004300:	4c2d      	ldr	r4, [pc, #180]	@ (80043b8 <HAL_ADC_ConfigChannel+0x348>)
 8004302:	42a0      	cmp	r0, r4
 8004304:	f001 75e0 	and.w	r5, r1, #29360128	@ 0x1c00000
 8004308:	f47f af11 	bne.w	800412e <HAL_ADC_ConfigChannel+0xbe>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800430c:	0209      	lsls	r1, r1, #8
 800430e:	f53f af28 	bmi.w	8004162 <HAL_ADC_ConfigChannel+0xf2>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004312:	492e      	ldr	r1, [pc, #184]	@ (80043cc <HAL_ADC_ConfigChannel+0x35c>)
 8004314:	428a      	cmp	r2, r1
 8004316:	f47f af24 	bne.w	8004162 <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800431a:	4c2d      	ldr	r4, [pc, #180]	@ (80043d0 <HAL_ADC_ConfigChannel+0x360>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800431c:	4a2d      	ldr	r2, [pc, #180]	@ (80043d4 <HAL_ADC_ConfigChannel+0x364>)
 800431e:	482e      	ldr	r0, [pc, #184]	@ (80043d8 <HAL_ADC_ConfigChannel+0x368>)
 8004320:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004322:	68a1      	ldr	r1, [r4, #8]
 8004324:	0992      	lsrs	r2, r2, #6
 8004326:	fba0 0202 	umull	r0, r2, r0, r2
 800432a:	0992      	lsrs	r2, r2, #6
 800432c:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 8004330:	3201      	adds	r2, #1
 8004332:	4329      	orrs	r1, r5
 8004334:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004338:	0092      	lsls	r2, r2, #2
 800433a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800433e:	60a1      	str	r1, [r4, #8]
 8004340:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004342:	9a01      	ldr	r2, [sp, #4]
 8004344:	2a00      	cmp	r2, #0
 8004346:	f43f af0c 	beq.w	8004162 <HAL_ADC_ConfigChannel+0xf2>
            wait_loop_index--;
 800434a:	9a01      	ldr	r2, [sp, #4]
 800434c:	3a01      	subs	r2, #1
 800434e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004350:	9a01      	ldr	r2, [sp, #4]
 8004352:	2a00      	cmp	r2, #0
 8004354:	d1f9      	bne.n	800434a <HAL_ADC_ConfigChannel+0x2da>
 8004356:	e704      	b.n	8004162 <HAL_ADC_ConfigChannel+0xf2>
  __HAL_LOCK(hadc);
 8004358:	2002      	movs	r0, #2
}
 800435a:	b002      	add	sp, #8
 800435c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004360:	0e80      	lsrs	r0, r0, #26
 8004362:	3001      	adds	r0, #1
 8004364:	f000 051f 	and.w	r5, r0, #31
 8004368:	2401      	movs	r4, #1
 800436a:	0680      	lsls	r0, r0, #26
 800436c:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8004370:	40ac      	lsls	r4, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004372:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004374:	ea44 0400 	orr.w	r4, r4, r0
 8004378:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800437c:	f240 8089 	bls.w	8004492 <HAL_ADC_ConfigChannel+0x422>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004380:	381e      	subs	r0, #30
 8004382:	0500      	lsls	r0, r0, #20
 8004384:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8004388:	e785      	b.n	8004296 <HAL_ADC_ConfigChannel+0x226>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800438a:	01c8      	lsls	r0, r1, #7
 800438c:	f53f aee9 	bmi.w	8004162 <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004390:	4807      	ldr	r0, [pc, #28]	@ (80043b0 <HAL_ADC_ConfigChannel+0x340>)
 8004392:	4c0c      	ldr	r4, [pc, #48]	@ (80043c4 <HAL_ADC_ConfigChannel+0x354>)
 8004394:	490e      	ldr	r1, [pc, #56]	@ (80043d0 <HAL_ADC_ConfigChannel+0x360>)
 8004396:	4282      	cmp	r2, r0
 8004398:	bf18      	it	ne
 800439a:	460c      	movne	r4, r1
 800439c:	e7a2      	b.n	80042e4 <HAL_ADC_ConfigChannel+0x274>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800439e:	020f      	lsls	r7, r1, #8
 80043a0:	d5bc      	bpl.n	800431c <HAL_ADC_ConfigChannel+0x2ac>
 80043a2:	e6de      	b.n	8004162 <HAL_ADC_ConfigChannel+0xf2>
 80043a4:	0007ffff 	.word	0x0007ffff
 80043a8:	407f0000 	.word	0x407f0000
 80043ac:	80080000 	.word	0x80080000
 80043b0:	50000100 	.word	0x50000100
 80043b4:	c3210000 	.word	0xc3210000
 80043b8:	90c00010 	.word	0x90c00010
 80043bc:	c7520000 	.word	0xc7520000
 80043c0:	cb840000 	.word	0xcb840000
 80043c4:	50000300 	.word	0x50000300
 80043c8:	03fff000 	.word	0x03fff000
 80043cc:	50000600 	.word	0x50000600
 80043d0:	50000700 	.word	0x50000700
 80043d4:	2000047c 	.word	0x2000047c
 80043d8:	053e2d63 	.word	0x053e2d63
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80043dc:	6e14      	ldr	r4, [r2, #96]	@ 0x60
 80043de:	6e14      	ldr	r4, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80043e0:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043e4:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80043e8:	2d00      	cmp	r5, #0
 80043ea:	d154      	bne.n	8004496 <HAL_ADC_ConfigChannel+0x426>
 80043ec:	f3c0 6084 	ubfx	r0, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043f0:	4284      	cmp	r4, r0
 80043f2:	f000 8088 	beq.w	8004506 <HAL_ADC_ConfigChannel+0x496>
 80043f6:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 80043f8:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043fa:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80043fe:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8004402:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
 8004406:	4285      	cmp	r5, r0
 8004408:	f000 80a8 	beq.w	800455c <HAL_ADC_ConfigChannel+0x4ec>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800440c:	68a5      	ldr	r5, [r4, #8]
 800440e:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004410:	f104 0c08 	add.w	ip, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004414:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8004418:	4285      	cmp	r5, r0
 800441a:	f000 8089 	beq.w	8004530 <HAL_ADC_ConfigChannel+0x4c0>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800441e:	68e5      	ldr	r5, [r4, #12]
 8004420:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004422:	f104 060c 	add.w	r6, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004426:	f3c5 6484 	ubfx	r4, r5, #26, #5
 800442a:	42a0      	cmp	r0, r4
 800442c:	f000 80ac 	beq.w	8004588 <HAL_ADC_ConfigChannel+0x518>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004430:	4638      	mov	r0, r7
 8004432:	e64e      	b.n	80040d2 <HAL_ADC_ConfigChannel+0x62>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004434:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8004438:	5835      	ldr	r5, [r6, r0]
 800443a:	402c      	ands	r4, r5
 800443c:	5034      	str	r4, [r6, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800443e:	6950      	ldr	r0, [r2, #20]
 8004440:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8004444:	6150      	str	r0, [r2, #20]
}
 8004446:	e6b5      	b.n	80041b4 <HAL_ADC_ConfigChannel+0x144>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004448:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800444c:	2c00      	cmp	r4, #0
 800444e:	f000 80b7 	beq.w	80045c0 <HAL_ADC_ConfigChannel+0x550>
  return __builtin_clz(value);
 8004452:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004456:	3401      	adds	r4, #1
 8004458:	06a4      	lsls	r4, r4, #26
 800445a:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004462:	2d00      	cmp	r5, #0
 8004464:	f000 80aa 	beq.w	80045bc <HAL_ADC_ConfigChannel+0x54c>
  return __builtin_clz(value);
 8004468:	fab5 f585 	clz	r5, r5
 800446c:	3501      	adds	r5, #1
 800446e:	f005 051f 	and.w	r5, r5, #31
 8004472:	2601      	movs	r6, #1
 8004474:	fa06 f505 	lsl.w	r5, r6, r5
 8004478:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447a:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800447e:	2800      	cmp	r0, #0
 8004480:	f000 8099 	beq.w	80045b6 <HAL_ADC_ConfigChannel+0x546>
  return __builtin_clz(value);
 8004484:	fab0 f080 	clz	r0, r0
 8004488:	3001      	adds	r0, #1
 800448a:	f000 001f 	and.w	r0, r0, #31
 800448e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004492:	0500      	lsls	r0, r0, #20
 8004494:	e6ff      	b.n	8004296 <HAL_ADC_ConfigChannel+0x226>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004496:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800449a:	b11d      	cbz	r5, 80044a4 <HAL_ADC_ConfigChannel+0x434>
  return __builtin_clz(value);
 800449c:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044a0:	42ac      	cmp	r4, r5
 80044a2:	d030      	beq.n	8004506 <HAL_ADC_ConfigChannel+0x496>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80044a4:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 80044a6:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044a8:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044ac:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80044b0:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b4:	fa97 f6a7 	rbit	r6, r7
 80044b8:	f104 0c08 	add.w	ip, r4, #8
 80044bc:	46e0      	mov	r8, ip
  if (value == 0U)
 80044be:	2e00      	cmp	r6, #0
 80044c0:	d074      	beq.n	80045ac <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 80044c2:	fab6 f686 	clz	r6, r6
 80044c6:	42ae      	cmp	r6, r5
 80044c8:	d04a      	beq.n	8004560 <HAL_ADC_ConfigChannel+0x4f0>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80044ca:	f8dc 5000 	ldr.w	r5, [ip]
 80044ce:	f8dc 5000 	ldr.w	r5, [ip]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80044d2:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d6:	fa97 fea7 	rbit	lr, r7
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044da:	f104 060c 	add.w	r6, r4, #12
 80044de:	46b0      	mov	r8, r6
  if (value == 0U)
 80044e0:	f1be 0f00 	cmp.w	lr, #0
 80044e4:	d059      	beq.n	800459a <HAL_ADC_ConfigChannel+0x52a>
  return __builtin_clz(value);
 80044e6:	fabe fe8e 	clz	lr, lr
 80044ea:	45ae      	cmp	lr, r5
 80044ec:	d022      	beq.n	8004534 <HAL_ADC_ConfigChannel+0x4c4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80044ee:	6834      	ldr	r4, [r6, #0]
 80044f0:	6834      	ldr	r4, [r6, #0]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044f2:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f6:	fa97 f5a7 	rbit	r5, r7
  if (value == 0U)
 80044fa:	2d00      	cmp	r5, #0
 80044fc:	f43f ade9 	beq.w	80040d2 <HAL_ADC_ConfigChannel+0x62>
  return __builtin_clz(value);
 8004500:	fab5 f085 	clz	r0, r5
 8004504:	e791      	b.n	800442a <HAL_ADC_ConfigChannel+0x3ba>
  MODIFY_REG(*preg,
 8004506:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8004508:	4614      	mov	r4, r2
 800450a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800450e:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004512:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004514:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8004516:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8004518:	f3c7 0612 	ubfx	r6, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800451c:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004520:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004524:	4638      	mov	r0, r7
 8004526:	2e00      	cmp	r6, #0
 8004528:	d1c4      	bne.n	80044b4 <HAL_ADC_ConfigChannel+0x444>
 800452a:	f3c7 6084 	ubfx	r0, r7, #26, #5
 800452e:	e76a      	b.n	8004406 <HAL_ADC_ConfigChannel+0x396>
 8004530:	f104 080c 	add.w	r8, r4, #12
  MODIFY_REG(*preg,
 8004534:	f8dc 0000 	ldr.w	r0, [ip]
 8004538:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800453c:	f8cc 0000 	str.w	r0, [ip]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004540:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004542:	68e0      	ldr	r0, [r4, #12]
 8004544:	68e4      	ldr	r4, [r4, #12]
 8004546:	f3c7 0512 	ubfx	r5, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800454a:	4646      	mov	r6, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800454c:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004550:	4638      	mov	r0, r7
 8004552:	2d00      	cmp	r5, #0
 8004554:	d1cf      	bne.n	80044f6 <HAL_ADC_ConfigChannel+0x486>
 8004556:	f3c7 6084 	ubfx	r0, r7, #26, #5
 800455a:	e766      	b.n	800442a <HAL_ADC_ConfigChannel+0x3ba>
 800455c:	f104 0808 	add.w	r8, r4, #8
  MODIFY_REG(*preg,
 8004560:	f8de 0000 	ldr.w	r0, [lr]
 8004564:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004568:	f8ce 0000 	str.w	r0, [lr]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800456c:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800456e:	68a0      	ldr	r0, [r4, #8]
 8004570:	68a5      	ldr	r5, [r4, #8]
 8004572:	f3c7 0612 	ubfx	r6, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004576:	46c4      	mov	ip, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004578:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800457c:	4638      	mov	r0, r7
 800457e:	2e00      	cmp	r6, #0
 8004580:	d1a9      	bne.n	80044d6 <HAL_ADC_ConfigChannel+0x466>
 8004582:	f3c7 6084 	ubfx	r0, r7, #26, #5
 8004586:	e747      	b.n	8004418 <HAL_ADC_ConfigChannel+0x3a8>
  MODIFY_REG(*preg,
 8004588:	6830      	ldr	r0, [r6, #0]
 800458a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800458e:	6030      	str	r0, [r6, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004590:	6808      	ldr	r0, [r1, #0]
}
 8004592:	e59e      	b.n	80040d2 <HAL_ADC_ConfigChannel+0x62>
 8004594:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8004598:	e65d      	b.n	8004256 <HAL_ADC_ConfigChannel+0x1e6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800459a:	68e5      	ldr	r5, [r4, #12]
 800459c:	68e4      	ldr	r4, [r4, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800459e:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80045a2:	e7a8      	b.n	80044f6 <HAL_ADC_ConfigChannel+0x486>
 80045a4:	4808      	ldr	r0, [pc, #32]	@ (80045c8 <HAL_ADC_ConfigChannel+0x558>)
 80045a6:	e676      	b.n	8004296 <HAL_ADC_ConfigChannel+0x226>
 80045a8:	2502      	movs	r5, #2
 80045aa:	e661      	b.n	8004270 <HAL_ADC_ConfigChannel+0x200>
 80045ac:	68a5      	ldr	r5, [r4, #8]
 80045ae:	68a5      	ldr	r5, [r4, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80045b0:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80045b4:	e78f      	b.n	80044d6 <HAL_ADC_ConfigChannel+0x466>
 80045b6:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 80045ba:	e66c      	b.n	8004296 <HAL_ADC_ConfigChannel+0x226>
 80045bc:	2502      	movs	r5, #2
 80045be:	e75b      	b.n	8004478 <HAL_ADC_ConfigChannel+0x408>
 80045c0:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 80045c4:	e74b      	b.n	800445e <HAL_ADC_ConfigChannel+0x3ee>
 80045c6:	bf00      	nop
 80045c8:	fe500000 	.word	0xfe500000

080045cc <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param pAnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, const ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig)
{
 80045cc:	b530      	push	{r4, r5, lr}
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pAnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80045ce:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
  if ((pAnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80045d2:	684c      	ldr	r4, [r1, #4]
  __HAL_LOCK(hadc);
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	f000 80b4 	beq.w	8004742 <HAL_ADC_AnalogWDGConfig+0x176>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045da:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hadc);
 80045dc:	2301      	movs	r3, #1
 80045de:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045e2:	6893      	ldr	r3, [r2, #8]
 80045e4:	f013 0f04 	tst.w	r3, #4
 80045e8:	4684      	mov	ip, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80045ea:	6893      	ldr	r3, [r2, #8]
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
     )
  {
    /* Analog watchdog configuration */
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80045ec:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045ee:	d033      	beq.n	8004658 <HAL_ADC_AnalogWDGConfig+0x8c>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80045f0:	4bb3      	ldr	r3, [pc, #716]	@ (80048c0 <HAL_ADC_AnalogWDGConfig+0x2f4>)
 80045f2:	4298      	cmp	r0, r3
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 80045f4:	e9d1 4104 	ldrd	r4, r1, [r1, #16]
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80045f8:	d05b      	beq.n	80046b2 <HAL_ADC_AnalogWDGConfig+0xe6>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmp_awd_high_threshold_shifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 80045fa:	68d3      	ldr	r3, [r2, #12]
 80045fc:	f003 0318 	and.w	r3, r3, #24
 8004600:	2b18      	cmp	r3, #24
 8004602:	d063      	beq.n	80046cc <HAL_ADC_AnalogWDGConfig+0x100>
 8004604:	68d3      	ldr	r3, [r2, #12]
 8004606:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800460a:	f1c3 0302 	rsb	r3, r3, #2
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	f003 031e 	and.w	r3, r3, #30
 8004614:	fa24 fe03 	lsr.w	lr, r4, r3
    tmp_awd_low_threshold_shifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 8004618:	68d3      	ldr	r3, [r2, #12]
 800461a:	f003 0318 	and.w	r3, r3, #24
 800461e:	2b18      	cmp	r3, #24
 8004620:	d05b      	beq.n	80046da <HAL_ADC_AnalogWDGConfig+0x10e>
 8004622:	68d3      	ldr	r3, [r2, #12]
 8004624:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004628:	f1c3 0302 	rsb	r3, r3, #2
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	f003 031e 	and.w	r3, r3, #30
 8004632:	fa21 f303 	lsr.w	r3, r1, r3
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1,
 8004636:	0c80      	lsrs	r0, r0, #18
 8004638:	f000 000c 	and.w	r0, r0, #12
 800463c:	3220      	adds	r2, #32
  MODIFY_REG(*preg,
 800463e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8004642:	5811      	ldr	r1, [r2, r0]
 8004644:	f001 21f0 	and.w	r1, r1, #4026593280	@ 0xf000f000
  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, pAnalogWDGConfig->WatchdogNumber, tmp_awd_high_threshold_shifted,
                                  tmp_awd_low_threshold_shifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004648:	f04f 0e00 	mov.w	lr, #0
 800464c:	430b      	orrs	r3, r1
 800464e:	5013      	str	r3, [r2, r0]
 8004650:	f88c e058 	strb.w	lr, [ip, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004654:	4670      	mov	r0, lr
}
 8004656:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004658:	071b      	lsls	r3, r3, #28
 800465a:	d4c9      	bmi.n	80045f0 <HAL_ADC_AnalogWDGConfig+0x24>
    if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800465c:	4b98      	ldr	r3, [pc, #608]	@ (80048c0 <HAL_ADC_AnalogWDGConfig+0x2f4>)
 800465e:	4298      	cmp	r0, r3
 8004660:	d03d      	beq.n	80046de <HAL_ADC_AnalogWDGConfig+0x112>
      switch (pAnalogWDGConfig->WatchdogMode)
 8004662:	f1b4 7fa0 	cmp.w	r4, #20971520	@ 0x1400000
 8004666:	f000 80d1 	beq.w	800480c <HAL_ADC_AnalogWDGConfig+0x240>
 800466a:	d86c      	bhi.n	8004746 <HAL_ADC_AnalogWDGConfig+0x17a>
 800466c:	f5b4 0f40 	cmp.w	r4, #12582912	@ 0xc00000
 8004670:	f000 80cc 	beq.w	800480c <HAL_ADC_AnalogWDGConfig+0x240>
 8004674:	f1b4 7f80 	cmp.w	r4, #16777216	@ 0x1000000
 8004678:	d002      	beq.n	8004680 <HAL_ADC_AnalogWDGConfig+0xb4>
 800467a:	f5b4 0f00 	cmp.w	r4, #8388608	@ 0x800000
 800467e:	d168      	bne.n	8004752 <HAL_ADC_AnalogWDGConfig+0x186>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR,
 8004680:	f340 0300 	sbfx	r3, r0, #0, #1
 8004684:	f3c0 5e01 	ubfx	lr, r0, #20, #2
 8004688:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 800468c:	449e      	add	lr, r3
 800468e:	f102 040c 	add.w	r4, r2, #12
  MODIFY_REG(*preg,
 8004692:	f020 4502 	bic.w	r5, r0, #2181038080	@ 0x82000000
 8004696:	f854 302e 	ldr.w	r3, [r4, lr, lsl #2]
 800469a:	f425 1560 	bic.w	r5, r5, #3670016	@ 0x380000
 800469e:	f020 407e 	bic.w	r0, r0, #4261412864	@ 0xfe000000
 80046a2:	f420 00f0 	bic.w	r0, r0, #7864320	@ 0x780000
 80046a6:	ea23 0305 	bic.w	r3, r3, r5
 80046aa:	4303      	orrs	r3, r0
 80046ac:	f844 302e 	str.w	r3, [r4, lr, lsl #2]
}
 80046b0:	e062      	b.n	8004778 <HAL_ADC_AnalogWDGConfig+0x1ac>
    tmp_awd_high_threshold_shifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 80046b2:	68d3      	ldr	r3, [r2, #12]
 80046b4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	fa04 fe03 	lsl.w	lr, r4, r3
    tmp_awd_low_threshold_shifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 80046be:	68d3      	ldr	r3, [r2, #12]
 80046c0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ca:	e7b4      	b.n	8004636 <HAL_ADC_AnalogWDGConfig+0x6a>
    tmp_awd_low_threshold_shifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 80046cc:	68d3      	ldr	r3, [r2, #12]
 80046ce:	f003 0318 	and.w	r3, r3, #24
 80046d2:	2b18      	cmp	r3, #24
    tmp_awd_high_threshold_shifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->HighThreshold);
 80046d4:	ea4f 0e84 	mov.w	lr, r4, lsl #2
    tmp_awd_low_threshold_shifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, pAnalogWDGConfig->LowThreshold);
 80046d8:	d1a3      	bne.n	8004622 <HAL_ADC_AnalogWDGConfig+0x56>
 80046da:	008b      	lsls	r3, r1, #2
 80046dc:	e7ab      	b.n	8004636 <HAL_ADC_AnalogWDGConfig+0x6a>
      switch (pAnalogWDGConfig->WatchdogMode)
 80046de:	f1b4 7fa0 	cmp.w	r4, #20971520	@ 0x1400000
 80046e2:	f000 80b6 	beq.w	8004852 <HAL_ADC_AnalogWDGConfig+0x286>
 80046e6:	d85e      	bhi.n	80047a6 <HAL_ADC_AnalogWDGConfig+0x1da>
 80046e8:	f5b4 0f40 	cmp.w	r4, #12582912	@ 0xc00000
 80046ec:	f000 80ce 	beq.w	800488c <HAL_ADC_AnalogWDGConfig+0x2c0>
 80046f0:	f1b4 7f80 	cmp.w	r4, #16777216	@ 0x1000000
 80046f4:	f000 80c1 	beq.w	800487a <HAL_ADC_AnalogWDGConfig+0x2ae>
 80046f8:	f5b4 0f00 	cmp.w	r4, #8388608	@ 0x800000
 80046fc:	f040 80b6 	bne.w	800486c <HAL_ADC_AnalogWDGConfig+0x2a0>
  MODIFY_REG(*preg,
 8004700:	68d3      	ldr	r3, [r2, #12]
 8004702:	f023 43fb 	bic.w	r3, r3, #2105540608	@ 0x7d800000
 8004706:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800470a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800470e:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->TR1,
 8004710:	6a13      	ldr	r3, [r2, #32]
 8004712:	6988      	ldr	r0, [r1, #24]
 8004714:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004718:	4303      	orrs	r3, r0
 800471a:	6213      	str	r3, [r2, #32]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800471c:	f8dc 305c 	ldr.w	r3, [ip, #92]	@ 0x5c
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8004720:	2080      	movs	r0, #128	@ 0x80
 8004722:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004726:	f8cc 305c 	str.w	r3, [ip, #92]	@ 0x5c
 800472a:	6010      	str	r0, [r2, #0]
      if (pAnalogWDGConfig->ITMode == ENABLE)
 800472c:	7b0b      	ldrb	r3, [r1, #12]
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800472e:	6808      	ldr	r0, [r1, #0]
      if (pAnalogWDGConfig->ITMode == ENABLE)
 8004730:	2b01      	cmp	r3, #1
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004732:	6853      	ldr	r3, [r2, #4]
 8004734:	bf0c      	ite	eq
 8004736:	f043 0380 	orreq.w	r3, r3, #128	@ 0x80
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800473a:	f023 0380 	bicne.w	r3, r3, #128	@ 0x80
 800473e:	6053      	str	r3, [r2, #4]
}
 8004740:	e756      	b.n	80045f0 <HAL_ADC_AnalogWDGConfig+0x24>
  __HAL_LOCK(hadc);
 8004742:	2002      	movs	r0, #2
}
 8004744:	bd30      	pop	{r4, r5, pc}
      switch (pAnalogWDGConfig->WatchdogMode)
 8004746:	f1b4 7fc0 	cmp.w	r4, #25165824	@ 0x1800000
 800474a:	d099      	beq.n	8004680 <HAL_ADC_AnalogWDGConfig+0xb4>
 800474c:	f1b4 7fe0 	cmp.w	r4, #29360128	@ 0x1c00000
 8004750:	d05c      	beq.n	800480c <HAL_ADC_AnalogWDGConfig+0x240>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR,
 8004752:	f340 0400 	sbfx	r4, r0, #0, #1
 8004756:	f3c0 5301 	ubfx	r3, r0, #20, #2
 800475a:	f004 0424 	and.w	r4, r4, #36	@ 0x24
 800475e:	4423      	add	r3, r4
 8004760:	f102 050c 	add.w	r5, r2, #12
  MODIFY_REG(*preg,
 8004764:	f020 4402 	bic.w	r4, r0, #2181038080	@ 0x82000000
 8004768:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800476c:	f424 1460 	bic.w	r4, r4, #3670016	@ 0x380000
 8004770:	ea20 0004 	bic.w	r0, r0, r4
 8004774:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8004778:	6808      	ldr	r0, [r1, #0]
 800477a:	4b52      	ldr	r3, [pc, #328]	@ (80048c4 <HAL_ADC_AnalogWDGConfig+0x2f8>)
 800477c:	4298      	cmp	r0, r3
 800477e:	d030      	beq.n	80047e2 <HAL_ADC_AnalogWDGConfig+0x216>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004780:	f8dc 305c 	ldr.w	r3, [ip, #92]	@ 0x5c
 8004784:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004788:	f8cc 305c 	str.w	r3, [ip, #92]	@ 0x5c
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 800478c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004790:	6013      	str	r3, [r2, #0]
        if (pAnalogWDGConfig->ITMode == ENABLE)
 8004792:	7b0b      	ldrb	r3, [r1, #12]
 8004794:	2b01      	cmp	r3, #1
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004796:	6853      	ldr	r3, [r2, #4]
 8004798:	bf0c      	ite	eq
 800479a:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 800479e:	f423 7300 	bicne.w	r3, r3, #512	@ 0x200
 80047a2:	6053      	str	r3, [r2, #4]
}
 80047a4:	e724      	b.n	80045f0 <HAL_ADC_AnalogWDGConfig+0x24>
      switch (pAnalogWDGConfig->WatchdogMode)
 80047a6:	f1b4 7fc0 	cmp.w	r4, #25165824	@ 0x1800000
 80047aa:	d049      	beq.n	8004840 <HAL_ADC_AnalogWDGConfig+0x274>
 80047ac:	f1b4 7fe0 	cmp.w	r4, #29360128	@ 0x1c00000
 80047b0:	d15c      	bne.n	800486c <HAL_ADC_AnalogWDGConfig+0x2a0>
  MODIFY_REG(*preg,
 80047b2:	68d0      	ldr	r0, [r2, #12]
 80047b4:	688b      	ldr	r3, [r1, #8]
 80047b6:	f020 40fb 	bic.w	r0, r0, #2105540608	@ 0x7d800000
 80047ba:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 80047be:	f420 0080 	bic.w	r0, r0, #4194304	@ 0x400000
 80047c2:	4303      	orrs	r3, r0
 80047c4:	f043 73e0 	orr.w	r3, r3, #29360128	@ 0x1c00000
 80047c8:	60d3      	str	r3, [r2, #12]
}
 80047ca:	e7a1      	b.n	8004710 <HAL_ADC_AnalogWDGConfig+0x144>
            SET_BIT(hadc->Instance->AWD2CR,
 80047cc:	2d00      	cmp	r5, #0
 80047ce:	d16a      	bne.n	80048a6 <HAL_ADC_AnalogWDGConfig+0x2da>
 80047d0:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80047d4:	2001      	movs	r0, #1
 80047d6:	4098      	lsls	r0, r3
 80047d8:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80047dc:	4303      	orrs	r3, r0
 80047de:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80047e2:	f8dc 305c 	ldr.w	r3, [ip, #92]	@ 0x5c
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80047e6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80047ea:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80047ee:	f8cc 305c 	str.w	r3, [ip, #92]	@ 0x5c
 80047f2:	6010      	str	r0, [r2, #0]
        if (pAnalogWDGConfig->ITMode == ENABLE)
 80047f4:	7b0b      	ldrb	r3, [r1, #12]
 80047f6:	2b01      	cmp	r3, #1
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80047f8:	6853      	ldr	r3, [r2, #4]
 80047fa:	bf0c      	ite	eq
 80047fc:	4303      	orreq	r3, r0
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80047fe:	f423 7380 	bicne.w	r3, r3, #256	@ 0x100
 8004802:	6053      	str	r3, [r2, #4]
  if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8004804:	e9d1 4104 	ldrd	r4, r1, [r1, #16]
 8004808:	482e      	ldr	r0, [pc, #184]	@ (80048c4 <HAL_ADC_AnalogWDGConfig+0x2f8>)
 800480a:	e6f6      	b.n	80045fa <HAL_ADC_AnalogWDGConfig+0x2e>
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800480c:	4c2d      	ldr	r4, [pc, #180]	@ (80048c4 <HAL_ADC_AnalogWDGConfig+0x2f8>)
                                          __LL_ADC_ANALOGWD_CHANNEL_GROUP(pAnalogWDGConfig->Channel,
 800480e:	688b      	ldr	r3, [r1, #8]
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8004810:	42a0      	cmp	r0, r4
            SET_BIT(hadc->Instance->AWD2CR,
 8004812:	f3c3 0512 	ubfx	r5, r3, #0, #19
          if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8004816:	d0d9      	beq.n	80047cc <HAL_ADC_AnalogWDGConfig+0x200>
            SET_BIT(hadc->Instance->AWD3CR,
 8004818:	b94d      	cbnz	r5, 800482e <HAL_ADC_AnalogWDGConfig+0x262>
 800481a:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800481e:	2401      	movs	r4, #1
 8004820:	409c      	lsls	r4, r3
 8004822:	f8d2 30a4 	ldr.w	r3, [r2, #164]	@ 0xa4
 8004826:	4323      	orrs	r3, r4
 8004828:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
      if (pAnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800482c:	e7a8      	b.n	8004780 <HAL_ADC_AnalogWDGConfig+0x1b4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8004832:	2b00      	cmp	r3, #0
 8004834:	d03f      	beq.n	80048b6 <HAL_ADC_AnalogWDGConfig+0x2ea>
  return __builtin_clz(value);
 8004836:	fab3 f383 	clz	r3, r3
            SET_BIT(hadc->Instance->AWD3CR,
 800483a:	2401      	movs	r4, #1
 800483c:	409c      	lsls	r4, r3
 800483e:	e7f0      	b.n	8004822 <HAL_ADC_AnalogWDGConfig+0x256>
  MODIFY_REG(*preg,
 8004840:	68d3      	ldr	r3, [r2, #12]
 8004842:	f023 43fb 	bic.w	r3, r3, #2105540608	@ 0x7d800000
 8004846:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800484a:	f043 73c0 	orr.w	r3, r3, #25165824	@ 0x1800000
 800484e:	60d3      	str	r3, [r2, #12]
}
 8004850:	e75e      	b.n	8004710 <HAL_ADC_AnalogWDGConfig+0x144>
  MODIFY_REG(*preg,
 8004852:	68d0      	ldr	r0, [r2, #12]
 8004854:	688b      	ldr	r3, [r1, #8]
 8004856:	f020 40fb 	bic.w	r0, r0, #2105540608	@ 0x7d800000
 800485a:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 800485e:	f420 0080 	bic.w	r0, r0, #4194304	@ 0x400000
 8004862:	4303      	orrs	r3, r0
 8004864:	f043 73a0 	orr.w	r3, r3, #20971520	@ 0x1400000
 8004868:	60d3      	str	r3, [r2, #12]
}
 800486a:	e751      	b.n	8004710 <HAL_ADC_AnalogWDGConfig+0x144>
  MODIFY_REG(*preg,
 800486c:	68d3      	ldr	r3, [r2, #12]
 800486e:	f023 43fb 	bic.w	r3, r3, #2105540608	@ 0x7d800000
 8004872:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004876:	60d3      	str	r3, [r2, #12]
}
 8004878:	e74a      	b.n	8004710 <HAL_ADC_AnalogWDGConfig+0x144>
  MODIFY_REG(*preg,
 800487a:	68d3      	ldr	r3, [r2, #12]
 800487c:	f023 43fb 	bic.w	r3, r3, #2105540608	@ 0x7d800000
 8004880:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004884:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004888:	60d3      	str	r3, [r2, #12]
}
 800488a:	e741      	b.n	8004710 <HAL_ADC_AnalogWDGConfig+0x144>
  MODIFY_REG(*preg,
 800488c:	68d0      	ldr	r0, [r2, #12]
 800488e:	688b      	ldr	r3, [r1, #8]
 8004890:	f020 40fb 	bic.w	r0, r0, #2105540608	@ 0x7d800000
 8004894:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
 8004898:	f420 0080 	bic.w	r0, r0, #4194304	@ 0x400000
 800489c:	4303      	orrs	r3, r0
 800489e:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 80048a2:	60d3      	str	r3, [r2, #12]
}
 80048a4:	e734      	b.n	8004710 <HAL_ADC_AnalogWDGConfig+0x144>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a6:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 80048aa:	b133      	cbz	r3, 80048ba <HAL_ADC_AnalogWDGConfig+0x2ee>
  return __builtin_clz(value);
 80048ac:	fab3 f383 	clz	r3, r3
            SET_BIT(hadc->Instance->AWD2CR,
 80048b0:	2001      	movs	r0, #1
 80048b2:	4098      	lsls	r0, r3
 80048b4:	e790      	b.n	80047d8 <HAL_ADC_AnalogWDGConfig+0x20c>
 80048b6:	2401      	movs	r4, #1
 80048b8:	e7b3      	b.n	8004822 <HAL_ADC_AnalogWDGConfig+0x256>
 80048ba:	2001      	movs	r0, #1
 80048bc:	e78c      	b.n	80047d8 <HAL_ADC_AnalogWDGConfig+0x20c>
 80048be:	bf00      	nop
 80048c0:	7dc00000 	.word	0x7dc00000
 80048c4:	0017ffff 	.word	0x0017ffff

080048c8 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 80048c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048cc:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
{
 80048d0:	b083      	sub	sp, #12
 80048d2:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 80048d4:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 80048d6:	f04f 0000 	mov.w	r0, #0
 80048da:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80048dc:	f000 81ca 	beq.w	8004c74 <HAL_ADCEx_InjectedConfigChannel+0x3ac>
 80048e0:	2301      	movs	r3, #1
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80048e2:	6955      	ldr	r5, [r2, #20]
  __HAL_LOCK(hadc);
 80048e4:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 80048e8:	e9d1 4000 	ldrd	r4, r0, [r1]

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80048ec:	6813      	ldr	r3, [r2, #0]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80048ee:	2d00      	cmp	r5, #0
 80048f0:	f000 8083 	beq.w	80049fa <HAL_ADCEx_InjectedConfigChannel+0x132>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 80048f4:	6a0d      	ldr	r5, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80048f6:	2d01      	cmp	r5, #1
 80048f8:	d07f      	beq.n	80049fa <HAL_ADCEx_InjectedConfigChannel+0x132>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80048fa:	6e97      	ldr	r7, [r2, #104]	@ 0x68
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 80048fc:	f000 001f 	and.w	r0, r0, #31
 8004900:	f3c4 6684 	ubfx	r6, r4, #26, #5
 8004904:	4086      	lsls	r6, r0
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004906:	2f00      	cmp	r7, #0
 8004908:	f040 8102 	bne.w	8004b10 <HAL_ADCEx_InjectedConfigChannel+0x248>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800490c:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 800490e:	3d01      	subs	r5, #1
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004910:	2800      	cmp	r0, #0
 8004912:	f000 824a 	beq.w	8004daa <HAL_ADCEx_InjectedConfigChannel+0x4e2>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004916:	6acf      	ldr	r7, [r1, #44]	@ 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004918:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
 800491c:	4328      	orrs	r0, r5
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 800491e:	4338      	orrs	r0, r7
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004920:	4330      	orrs	r0, r6
 8004922:	e9c2 0519 	strd	r0, r5, [r2, #100]	@ 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004926:	6898      	ldr	r0, [r3, #8]
 8004928:	0707      	lsls	r7, r0, #28
 800492a:	d410      	bmi.n	800494e <HAL_ADCEx_InjectedConfigChannel+0x86>
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800492c:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8004930:	f891 5025 	ldrb.w	r5, [r1, #37]	@ 0x25
      MODIFY_REG(hadc->Instance->CFGR,
 8004934:	0540      	lsls	r0, r0, #21
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8004936:	2d00      	cmp	r5, #0
 8004938:	f040 80e0 	bne.w	8004afc <HAL_ADCEx_InjectedConfigChannel+0x234>
      MODIFY_REG(hadc->Instance->CFGR,
 800493c:	68dd      	ldr	r5, [r3, #12]
 800493e:	f891 6024 	ldrb.w	r6, [r1, #36]	@ 0x24
 8004942:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 8004946:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
 800494a:	4328      	orrs	r0, r5
 800494c:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800494e:	6898      	ldr	r0, [r3, #8]
 8004950:	f010 0004 	ands.w	r0, r0, #4
 8004954:	d067      	beq.n	8004a26 <HAL_ADCEx_InjectedConfigChannel+0x15e>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004956:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004958:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800495a:	689d      	ldr	r5, [r3, #8]
 800495c:	07ed      	lsls	r5, r5, #31
 800495e:	d414      	bmi.n	800498a <HAL_ADCEx_InjectedConfigChannel+0xc2>
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004960:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8004962:	4db5      	ldr	r5, [pc, #724]	@ (8004c38 <HAL_ADCEx_InjectedConfigChannel+0x370>)
 8004964:	f8d3 60b0 	ldr.w	r6, [r3, #176]	@ 0xb0
 8004968:	f007 0c18 	and.w	ip, r7, #24
 800496c:	fa25 f50c 	lsr.w	r5, r5, ip
 8004970:	f3c4 0e12 	ubfx	lr, r4, #0, #19
 8004974:	4025      	ands	r5, r4
 8004976:	ea26 0c0e 	bic.w	ip, r6, lr
 800497a:	ea45 050c 	orr.w	r5, r5, ip
 800497e:	f8c3 50b0 	str.w	r5, [r3, #176]	@ 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004982:	4dae      	ldr	r5, [pc, #696]	@ (8004c3c <HAL_ADCEx_InjectedConfigChannel+0x374>)
 8004984:	42af      	cmp	r7, r5
 8004986:	f000 8110 	beq.w	8004baa <HAL_ADCEx_InjectedConfigChannel+0x2e2>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 800498a:	49ad      	ldr	r1, [pc, #692]	@ (8004c40 <HAL_ADCEx_InjectedConfigChannel+0x378>)
 800498c:	420c      	tst	r4, r1
 800498e:	d02e      	beq.n	80049ee <HAL_ADCEx_InjectedConfigChannel+0x126>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004990:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004994:	f000 8134 	beq.w	8004c00 <HAL_ADCEx_InjectedConfigChannel+0x338>
 8004998:	49aa      	ldr	r1, [pc, #680]	@ (8004c44 <HAL_ADCEx_InjectedConfigChannel+0x37c>)
 800499a:	428b      	cmp	r3, r1
 800499c:	f000 80d3 	beq.w	8004b46 <HAL_ADCEx_InjectedConfigChannel+0x27e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80049a0:	f501 61c0 	add.w	r1, r1, #1536	@ 0x600

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80049a4:	4da8      	ldr	r5, [pc, #672]	@ (8004c48 <HAL_ADCEx_InjectedConfigChannel+0x380>)
 80049a6:	6889      	ldr	r1, [r1, #8]
 80049a8:	42ac      	cmp	r4, r5
 80049aa:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 80049ae:	f000 80d6 	beq.w	8004b5e <HAL_ADCEx_InjectedConfigChannel+0x296>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80049b2:	4da6      	ldr	r5, [pc, #664]	@ (8004c4c <HAL_ADCEx_InjectedConfigChannel+0x384>)
 80049b4:	42ac      	cmp	r4, r5
 80049b6:	f000 80d2 	beq.w	8004b5e <HAL_ADCEx_InjectedConfigChannel+0x296>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80049ba:	4da5      	ldr	r5, [pc, #660]	@ (8004c50 <HAL_ADCEx_InjectedConfigChannel+0x388>)
 80049bc:	42ac      	cmp	r4, r5
 80049be:	f000 8249 	beq.w	8004e54 <HAL_ADCEx_InjectedConfigChannel+0x58c>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80049c2:	4da4      	ldr	r5, [pc, #656]	@ (8004c54 <HAL_ADCEx_InjectedConfigChannel+0x38c>)
 80049c4:	42ac      	cmp	r4, r5
 80049c6:	d112      	bne.n	80049ee <HAL_ADCEx_InjectedConfigChannel+0x126>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80049c8:	0249      	lsls	r1, r1, #9
 80049ca:	d410      	bmi.n	80049ee <HAL_ADCEx_InjectedConfigChannel+0x126>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80049cc:	499d      	ldr	r1, [pc, #628]	@ (8004c44 <HAL_ADCEx_InjectedConfigChannel+0x37c>)
 80049ce:	428b      	cmp	r3, r1
 80049d0:	d00d      	beq.n	80049ee <HAL_ADCEx_InjectedConfigChannel+0x126>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049d2:	4ca1      	ldr	r4, [pc, #644]	@ (8004c58 <HAL_ADCEx_InjectedConfigChannel+0x390>)
 80049d4:	f501 61c0 	add.w	r1, r1, #1536	@ 0x600
 80049d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049dc:	bf08      	it	eq
 80049de:	4621      	moveq	r1, r4
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80049e0:	688b      	ldr	r3, [r1, #8]
 80049e2:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80049e6:	4333      	orrs	r3, r6
 80049e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80049ec:	608b      	str	r3, [r1, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049ee:	2300      	movs	r3, #0
 80049f0:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80049f4:	b003      	add	sp, #12
 80049f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80049fa:	2809      	cmp	r0, #9
 80049fc:	d193      	bne.n	8004926 <HAL_ADCEx_InjectedConfigChannel+0x5e>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80049fe:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004a00:	0c65      	lsrs	r5, r4, #17
 8004a02:	f405 5578 	and.w	r5, r5, #15872	@ 0x3e00
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004a06:	b120      	cbz	r0, 8004a12 <HAL_ADCEx_InjectedConfigChannel+0x14a>
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004a08:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004a0a:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004a0e:	4330      	orrs	r0, r6
 8004a10:	4305      	orrs	r5, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8004a12:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004a14:	4e91      	ldr	r6, [pc, #580]	@ (8004c5c <HAL_ADCEx_InjectedConfigChannel+0x394>)
 8004a16:	4030      	ands	r0, r6
 8004a18:	4328      	orrs	r0, r5
 8004a1a:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004a1c:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8004a1e:	6655      	str	r5, [r2, #100]	@ 0x64
 8004a20:	0707      	lsls	r7, r0, #28
 8004a22:	d494      	bmi.n	800494e <HAL_ADCEx_InjectedConfigChannel+0x86>
 8004a24:	e782      	b.n	800492c <HAL_ADCEx_InjectedConfigChannel+0x64>
 8004a26:	689d      	ldr	r5, [r3, #8]
 8004a28:	072e      	lsls	r6, r5, #28
 8004a2a:	d496      	bmi.n	800495a <HAL_ADCEx_InjectedConfigChannel+0x92>
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004a2c:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8004a2e:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004a32:	2d00      	cmp	r5, #0
 8004a34:	d17e      	bne.n	8004b34 <HAL_ADCEx_InjectedConfigChannel+0x26c>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004a36:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004a38:	68d8      	ldr	r0, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004a3a:	f000 81b8 	beq.w	8004dae <HAL_ADCEx_InjectedConfigChannel+0x4e6>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004a3e:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8004a42:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a44:	2000      	movs	r0, #0
    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8004a46:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8004a4a:	2d01      	cmp	r5, #1
 8004a4c:	f000 8159 	beq.w	8004d02 <HAL_ADCEx_InjectedConfigChannel+0x43a>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004a50:	691d      	ldr	r5, [r3, #16]
 8004a52:	f025 0502 	bic.w	r5, r5, #2
 8004a56:	611d      	str	r5, [r3, #16]
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004a58:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(*preg,
 8004a5a:	f3c4 5704 	ubfx	r7, r4, #20, #5
 8004a5e:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004a60:	0de4      	lsrs	r4, r4, #23
  MODIFY_REG(*preg,
 8004a62:	40bd      	lsls	r5, r7
 8004a64:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004a68:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 8004a6c:	ea6f 0505 	mvn.w	r5, r5
 8004a70:	f000 813d 	beq.w	8004cee <HAL_ADCEx_InjectedConfigChannel+0x426>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004a74:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8004a78:	40be      	lsls	r6, r7
 8004a7a:	f85c 7004 	ldr.w	r7, [ip, r4]
 8004a7e:	403d      	ands	r5, r7
 8004a80:	4335      	orrs	r5, r6
 8004a82:	f84c 5004 	str.w	r5, [ip, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004a86:	695c      	ldr	r4, [r3, #20]
 8004a88:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004a8c:	615c      	str	r4, [r3, #20]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004a8e:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8004a90:	680c      	ldr	r4, [r1, #0]
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8004a92:	694d      	ldr	r5, [r1, #20]
 8004a94:	68de      	ldr	r6, [r3, #12]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004a96:	2f04      	cmp	r7, #4
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8004a98:	46a4      	mov	ip, r4
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004a9a:	f000 813d 	beq.w	8004d18 <HAL_ADCEx_InjectedConfigChannel+0x450>
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8004a9e:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8004aa2:	0076      	lsls	r6, r6, #1
  MODIFY_REG(*preg,
 8004aa4:	f004 4cf8 	and.w	ip, r4, #2080374784	@ 0x7c000000
 8004aa8:	fa05 f406 	lsl.w	r4, r5, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004aac:	f103 0560 	add.w	r5, r3, #96	@ 0x60
  MODIFY_REG(*preg,
 8004ab0:	4e6b      	ldr	r6, [pc, #428]	@ (8004c60 <HAL_ADCEx_InjectedConfigChannel+0x398>)
 8004ab2:	f855 e027 	ldr.w	lr, [r5, r7, lsl #2]
 8004ab6:	ea0e 0606 	and.w	r6, lr, r6
 8004aba:	ea46 060c 	orr.w	r6, r6, ip
 8004abe:	4334      	orrs	r4, r6
 8004ac0:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8004ac4:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ac8:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8004aca:	698e      	ldr	r6, [r1, #24]
 8004acc:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8004ad0:	f024 7480 	bic.w	r4, r4, #16777216	@ 0x1000000
 8004ad4:	4334      	orrs	r4, r6
 8004ad6:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ada:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004adc:	7f0e      	ldrb	r6, [r1, #28]
  MODIFY_REG(*preg,
 8004ade:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8004ae2:	f1a6 0601 	sub.w	r6, r6, #1
 8004ae6:	fab6 f686 	clz	r6, r6
 8004aea:	0976      	lsrs	r6, r6, #5
 8004aec:	f024 7400 	bic.w	r4, r4, #33554432	@ 0x2000000
 8004af0:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 8004af4:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004af8:	680c      	ldr	r4, [r1, #0]
}
 8004afa:	e72e      	b.n	800495a <HAL_ADCEx_InjectedConfigChannel+0x92>
      MODIFY_REG(hadc->Instance->CFGR,
 8004afc:	68dd      	ldr	r5, [r3, #12]
 8004afe:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 8004b02:	4328      	orrs	r0, r5
 8004b04:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b06:	6898      	ldr	r0, [r3, #8]
 8004b08:	f010 0004 	ands.w	r0, r0, #4
 8004b0c:	d08b      	beq.n	8004a26 <HAL_ADCEx_InjectedConfigChannel+0x15e>
 8004b0e:	e722      	b.n	8004956 <HAL_ADCEx_InjectedConfigChannel+0x8e>
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004b10:	6e55      	ldr	r5, [r2, #100]	@ 0x64
    hadc->InjectionConfig.ChannelCount--;
 8004b12:	3f01      	subs	r7, #1
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004b14:	4335      	orrs	r5, r6
    hadc->InjectionConfig.ChannelCount--;
 8004b16:	6697      	str	r7, [r2, #104]	@ 0x68
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004b18:	6655      	str	r5, [r2, #100]	@ 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004b1a:	2f00      	cmp	r7, #0
 8004b1c:	f47f af03 	bne.w	8004926 <HAL_ADCEx_InjectedConfigChannel+0x5e>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004b20:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004b22:	4e4e      	ldr	r6, [pc, #312]	@ (8004c5c <HAL_ADCEx_InjectedConfigChannel+0x394>)
 8004b24:	4030      	ands	r0, r6
 8004b26:	4328      	orrs	r0, r5
 8004b28:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b2a:	6898      	ldr	r0, [r3, #8]
 8004b2c:	0707      	lsls	r7, r0, #28
 8004b2e:	f53f af0e 	bmi.w	800494e <HAL_ADCEx_InjectedConfigChannel+0x86>
 8004b32:	e6fb      	b.n	800492c <HAL_ADCEx_InjectedConfigChannel+0x64>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004b34:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 8004b36:	2d00      	cmp	r5, #0
 8004b38:	f43f af7d 	beq.w	8004a36 <HAL_ADCEx_InjectedConfigChannel+0x16e>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004b3c:	2801      	cmp	r0, #1
 8004b3e:	f000 8160 	beq.w	8004e02 <HAL_ADCEx_InjectedConfigChannel+0x53a>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004b42:	68d8      	ldr	r0, [r3, #12]
 8004b44:	e77b      	b.n	8004a3e <HAL_ADCEx_InjectedConfigChannel+0x176>
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004b46:	4d40      	ldr	r5, [pc, #256]	@ (8004c48 <HAL_ADCEx_InjectedConfigChannel+0x380>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004b48:	4943      	ldr	r1, [pc, #268]	@ (8004c58 <HAL_ADCEx_InjectedConfigChannel+0x390>)
 8004b4a:	42ac      	cmp	r4, r5
 8004b4c:	6889      	ldr	r1, [r1, #8]
 8004b4e:	f43f af4e 	beq.w	80049ee <HAL_ADCEx_InjectedConfigChannel+0x126>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004b52:	4d3e      	ldr	r5, [pc, #248]	@ (8004c4c <HAL_ADCEx_InjectedConfigChannel+0x384>)
 8004b54:	42ac      	cmp	r4, r5
 8004b56:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8004b5a:	f47f af2e 	bne.w	80049ba <HAL_ADCEx_InjectedConfigChannel+0xf2>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b5e:	0209      	lsls	r1, r1, #8
 8004b60:	f53f af45 	bmi.w	80049ee <HAL_ADCEx_InjectedConfigChannel+0x126>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b64:	493f      	ldr	r1, [pc, #252]	@ (8004c64 <HAL_ADCEx_InjectedConfigChannel+0x39c>)
 8004b66:	428b      	cmp	r3, r1
 8004b68:	f47f af41 	bne.w	80049ee <HAL_ADCEx_InjectedConfigChannel+0x126>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b6c:	4d3e      	ldr	r5, [pc, #248]	@ (8004c68 <HAL_ADCEx_InjectedConfigChannel+0x3a0>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004b6e:	68a9      	ldr	r1, [r5, #8]
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004b70:	4b3e      	ldr	r3, [pc, #248]	@ (8004c6c <HAL_ADCEx_InjectedConfigChannel+0x3a4>)
 8004b72:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 8004b76:	4331      	orrs	r1, r6
 8004b78:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	60a9      	str	r1, [r5, #8]
 8004b80:	493b      	ldr	r1, [pc, #236]	@ (8004c70 <HAL_ADCEx_InjectedConfigChannel+0x3a8>)
 8004b82:	099b      	lsrs	r3, r3, #6
 8004b84:	fba1 1303 	umull	r1, r3, r1, r3
 8004b88:	099b      	lsrs	r3, r3, #6
 8004b8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004b92:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8004b94:	9b01      	ldr	r3, [sp, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f43f af29 	beq.w	80049ee <HAL_ADCEx_InjectedConfigChannel+0x126>
          wait_loop_index--;
 8004b9c:	9b01      	ldr	r3, [sp, #4]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8004ba2:	9b01      	ldr	r3, [sp, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1f9      	bne.n	8004b9c <HAL_ADCEx_InjectedConfigChannel+0x2d4>
 8004ba8:	e721      	b.n	80049ee <HAL_ADCEx_InjectedConfigChannel+0x126>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004baa:	f1be 0f00 	cmp.w	lr, #0
 8004bae:	d165      	bne.n	8004c7c <HAL_ADCEx_InjectedConfigChannel+0x3b4>
 8004bb0:	0ea4      	lsrs	r4, r4, #26
 8004bb2:	3401      	adds	r4, #1
 8004bb4:	f004 061f 	and.w	r6, r4, #31
 8004bb8:	2501      	movs	r5, #1
 8004bba:	06a4      	lsls	r4, r4, #26
 8004bbc:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8004bc0:	40b5      	lsls	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bc2:	2e09      	cmp	r6, #9
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004bc4:	ea45 0504 	orr.w	r5, r5, r4
 8004bc8:	eb06 0446 	add.w	r4, r6, r6, lsl #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bcc:	f200 8114 	bhi.w	8004df8 <HAL_ADCEx_InjectedConfigChannel+0x530>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004bd0:	0524      	lsls	r4, r4, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bd2:	432c      	orrs	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004bd4:	0de6      	lsrs	r6, r4, #23
  MODIFY_REG(*preg,
 8004bd6:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004bd8:	f006 0604 	and.w	r6, r6, #4
 8004bdc:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8004be0:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8004be4:	fa05 fc04 	lsl.w	ip, r5, r4
 8004be8:	f04f 0e07 	mov.w	lr, #7
 8004bec:	59bd      	ldr	r5, [r7, r6]
 8004bee:	fa0e f404 	lsl.w	r4, lr, r4
 8004bf2:	ea25 0404 	bic.w	r4, r5, r4
 8004bf6:	ea44 040c 	orr.w	r4, r4, ip
 8004bfa:	51bc      	str	r4, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8004bfc:	680c      	ldr	r4, [r1, #0]
}
 8004bfe:	e6c4      	b.n	800498a <HAL_ADCEx_InjectedConfigChannel+0xc2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004c00:	4d15      	ldr	r5, [pc, #84]	@ (8004c58 <HAL_ADCEx_InjectedConfigChannel+0x390>)
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004c02:	4f11      	ldr	r7, [pc, #68]	@ (8004c48 <HAL_ADCEx_InjectedConfigChannel+0x380>)
 8004c04:	68a9      	ldr	r1, [r5, #8]
 8004c06:	42bc      	cmp	r4, r7
 8004c08:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8004c0c:	f000 80c9 	beq.w	8004da2 <HAL_ADCEx_InjectedConfigChannel+0x4da>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004c10:	4f0e      	ldr	r7, [pc, #56]	@ (8004c4c <HAL_ADCEx_InjectedConfigChannel+0x384>)
 8004c12:	42bc      	cmp	r4, r7
 8004c14:	f000 80c5 	beq.w	8004da2 <HAL_ADCEx_InjectedConfigChannel+0x4da>
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004c18:	4f0d      	ldr	r7, [pc, #52]	@ (8004c50 <HAL_ADCEx_InjectedConfigChannel+0x388>)
 8004c1a:	42bc      	cmp	r4, r7
 8004c1c:	f47f aed1 	bne.w	80049c2 <HAL_ADCEx_InjectedConfigChannel+0xfa>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c20:	01cf      	lsls	r7, r1, #7
 8004c22:	f53f aee4 	bmi.w	80049ee <HAL_ADCEx_InjectedConfigChannel+0x126>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004c26:	68ab      	ldr	r3, [r5, #8]
 8004c28:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8004c2c:	4333      	orrs	r3, r6
 8004c2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c32:	60ab      	str	r3, [r5, #8]
}
 8004c34:	e6db      	b.n	80049ee <HAL_ADCEx_InjectedConfigChannel+0x126>
 8004c36:	bf00      	nop
 8004c38:	0007ffff 	.word	0x0007ffff
 8004c3c:	407f0000 	.word	0x407f0000
 8004c40:	80080000 	.word	0x80080000
 8004c44:	50000100 	.word	0x50000100
 8004c48:	c3210000 	.word	0xc3210000
 8004c4c:	90c00010 	.word	0x90c00010
 8004c50:	c7520000 	.word	0xc7520000
 8004c54:	cb840000 	.word	0xcb840000
 8004c58:	50000300 	.word	0x50000300
 8004c5c:	04104000 	.word	0x04104000
 8004c60:	03fff000 	.word	0x03fff000
 8004c64:	50000600 	.word	0x50000600
 8004c68:	50000700 	.word	0x50000700
 8004c6c:	2000047c 	.word	0x2000047c
 8004c70:	053e2d63 	.word	0x053e2d63
  __HAL_LOCK(hadc);
 8004c74:	2002      	movs	r0, #2
}
 8004c76:	b003      	add	sp, #12
 8004c78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7c:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8004c80:	2d00      	cmp	r5, #0
 8004c82:	f000 80c3 	beq.w	8004e0c <HAL_ADCEx_InjectedConfigChannel+0x544>
  return __builtin_clz(value);
 8004c86:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c8a:	3501      	adds	r5, #1
 8004c8c:	f005 051f 	and.w	r5, r5, #31
 8004c90:	2d09      	cmp	r5, #9
 8004c92:	f240 80bb 	bls.w	8004e0c <HAL_ADCEx_InjectedConfigChannel+0x544>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c96:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8004c9a:	2d00      	cmp	r5, #0
 8004c9c:	f000 813d 	beq.w	8004f1a <HAL_ADCEx_InjectedConfigChannel+0x652>
  return __builtin_clz(value);
 8004ca0:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004ca4:	3501      	adds	r5, #1
 8004ca6:	06ad      	lsls	r5, r5, #26
 8004ca8:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cac:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004cb0:	2e00      	cmp	r6, #0
 8004cb2:	f000 8130 	beq.w	8004f16 <HAL_ADCEx_InjectedConfigChannel+0x64e>
  return __builtin_clz(value);
 8004cb6:	fab6 f686 	clz	r6, r6
 8004cba:	3601      	adds	r6, #1
 8004cbc:	f006 061f 	and.w	r6, r6, #31
 8004cc0:	2701      	movs	r7, #1
 8004cc2:	fa07 f606 	lsl.w	r6, r7, r6
 8004cc6:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc8:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8004ccc:	2c00      	cmp	r4, #0
 8004cce:	f000 8127 	beq.w	8004f20 <HAL_ADCEx_InjectedConfigChannel+0x658>
  return __builtin_clz(value);
 8004cd2:	fab4 f484 	clz	r4, r4
 8004cd6:	1c66      	adds	r6, r4, #1
 8004cd8:	f006 061f 	and.w	r6, r6, #31
 8004cdc:	2403      	movs	r4, #3
 8004cde:	f06f 071d 	mvn.w	r7, #29
 8004ce2:	fb14 7406 	smlabb	r4, r4, r6, r7
 8004ce6:	0524      	lsls	r4, r4, #20
 8004ce8:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8004cec:	e771      	b.n	8004bd2 <HAL_ADCEx_InjectedConfigChannel+0x30a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004cee:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8004cf2:	593e      	ldr	r6, [r7, r4]
 8004cf4:	4035      	ands	r5, r6
 8004cf6:	513d      	str	r5, [r7, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004cf8:	695c      	ldr	r4, [r3, #20]
 8004cfa:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8004cfe:	615c      	str	r4, [r3, #20]
}
 8004d00:	e6c5      	b.n	8004a8e <HAL_ADCEx_InjectedConfigChannel+0x1c6>
      MODIFY_REG(hadc->Instance->CFGR2,
 8004d02:	e9d1 570d 	ldrd	r5, r7, [r1, #52]	@ 0x34
 8004d06:	691e      	ldr	r6, [r3, #16]
 8004d08:	433d      	orrs	r5, r7
 8004d0a:	f426 76ff 	bic.w	r6, r6, #510	@ 0x1fe
 8004d0e:	4335      	orrs	r5, r6
 8004d10:	f045 0502 	orr.w	r5, r5, #2
 8004d14:	611d      	str	r5, [r3, #16]
 8004d16:	e69f      	b.n	8004a58 <HAL_ADCEx_InjectedConfigChannel+0x190>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004d18:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 8004d1a:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004d1c:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d20:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004d24:	2e00      	cmp	r6, #0
 8004d26:	d046      	beq.n	8004db6 <HAL_ADCEx_InjectedConfigChannel+0x4ee>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d28:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004d2c:	b126      	cbz	r6, 8004d38 <HAL_ADCEx_InjectedConfigChannel+0x470>
  return __builtin_clz(value);
 8004d2e:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d32:	42b5      	cmp	r5, r6
 8004d34:	f000 8098 	beq.w	8004e68 <HAL_ADCEx_InjectedConfigChannel+0x5a0>
 8004d38:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8004d3a:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d3c:	f103 0560 	add.w	r5, r3, #96	@ 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d40:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004d44:	f103 0864 	add.w	r8, r3, #100	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d48:	fa9c f7ac 	rbit	r7, ip
 8004d4c:	f105 0e08 	add.w	lr, r5, #8
 8004d50:	46f1      	mov	r9, lr
  if (value == 0U)
 8004d52:	2f00      	cmp	r7, #0
 8004d54:	f000 80da 	beq.w	8004f0c <HAL_ADCEx_InjectedConfigChannel+0x644>
  return __builtin_clz(value);
 8004d58:	fab7 f787 	clz	r7, r7
 8004d5c:	42b7      	cmp	r7, r6
 8004d5e:	f000 80b4 	beq.w	8004eca <HAL_ADCEx_InjectedConfigChannel+0x602>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004d62:	f8de 6000 	ldr.w	r6, [lr]
 8004d66:	f8de 6000 	ldr.w	r6, [lr]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d6a:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6e:	fa9c f8ac 	rbit	r8, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d72:	f105 070c 	add.w	r7, r5, #12
 8004d76:	46b9      	mov	r9, r7
  if (value == 0U)
 8004d78:	f1b8 0f00 	cmp.w	r8, #0
 8004d7c:	f000 80c1 	beq.w	8004f02 <HAL_ADCEx_InjectedConfigChannel+0x63a>
  return __builtin_clz(value);
 8004d80:	fab8 f888 	clz	r8, r8
 8004d84:	45b0      	cmp	r8, r6
 8004d86:	f000 8088 	beq.w	8004e9a <HAL_ADCEx_InjectedConfigChannel+0x5d2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004d8a:	683d      	ldr	r5, [r7, #0]
 8004d8c:	683d      	ldr	r5, [r7, #0]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d8e:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d92:	fa9c f6ac 	rbit	r6, ip
  if (value == 0U)
 8004d96:	2e00      	cmp	r6, #0
 8004d98:	f43f addf 	beq.w	800495a <HAL_ADCEx_InjectedConfigChannel+0x92>
  return __builtin_clz(value);
 8004d9c:	fab6 f486 	clz	r4, r6
 8004da0:	e025      	b.n	8004dee <HAL_ADCEx_InjectedConfigChannel+0x526>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004da2:	020b      	lsls	r3, r1, #8
 8004da4:	f57f aee3 	bpl.w	8004b6e <HAL_ADCEx_InjectedConfigChannel+0x2a6>
 8004da8:	e621      	b.n	80049ee <HAL_ADCEx_InjectedConfigChannel+0x126>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8004daa:	4628      	mov	r0, r5
 8004dac:	e5b8      	b.n	8004920 <HAL_ADCEx_InjectedConfigChannel+0x58>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004dae:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8004db2:	60d8      	str	r0, [r3, #12]
 8004db4:	e646      	b.n	8004a44 <HAL_ADCEx_InjectedConfigChannel+0x17c>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004db6:	f3c4 6484 	ubfx	r4, r4, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004dba:	42a5      	cmp	r5, r4
 8004dbc:	d054      	beq.n	8004e68 <HAL_ADCEx_InjectedConfigChannel+0x5a0>
 8004dbe:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8004dc0:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004dc2:	f103 0560 	add.w	r5, r3, #96	@ 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004dc6:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004dca:	f103 0864 	add.w	r8, r3, #100	@ 0x64
 8004dce:	42a6      	cmp	r6, r4
 8004dd0:	d079      	beq.n	8004ec6 <HAL_ADCEx_InjectedConfigChannel+0x5fe>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004dd2:	68ae      	ldr	r6, [r5, #8]
 8004dd4:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004dd6:	f105 0e08 	add.w	lr, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004dda:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004dde:	42a6      	cmp	r6, r4
 8004de0:	d059      	beq.n	8004e96 <HAL_ADCEx_InjectedConfigChannel+0x5ce>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004de2:	68ee      	ldr	r6, [r5, #12]
 8004de4:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004de6:	f105 070c 	add.w	r7, r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004dea:	f3c6 6584 	ubfx	r5, r6, #26, #5
 8004dee:	42ac      	cmp	r4, r5
 8004df0:	f000 8081 	beq.w	8004ef6 <HAL_ADCEx_InjectedConfigChannel+0x62e>
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004df4:	4664      	mov	r4, ip
 8004df6:	e5b0      	b.n	800495a <HAL_ADCEx_InjectedConfigChannel+0x92>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004df8:	3c1e      	subs	r4, #30
 8004dfa:	0524      	lsls	r4, r4, #20
 8004dfc:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8004e00:	e6e7      	b.n	8004bd2 <HAL_ADCEx_InjectedConfigChannel+0x30a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e02:	6dd5      	ldr	r5, [r2, #92]	@ 0x5c
 8004e04:	f045 0520 	orr.w	r5, r5, #32
 8004e08:	65d5      	str	r5, [r2, #92]	@ 0x5c
        tmp_hal_status = HAL_ERROR;
 8004e0a:	e61c      	b.n	8004a46 <HAL_ADCEx_InjectedConfigChannel+0x17e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e0c:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8004e10:	2d00      	cmp	r5, #0
 8004e12:	f000 808c 	beq.w	8004f2e <HAL_ADCEx_InjectedConfigChannel+0x666>
  return __builtin_clz(value);
 8004e16:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e1a:	3501      	adds	r5, #1
 8004e1c:	06ad      	lsls	r5, r5, #26
 8004e1e:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e22:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004e26:	2e00      	cmp	r6, #0
 8004e28:	d07f      	beq.n	8004f2a <HAL_ADCEx_InjectedConfigChannel+0x662>
  return __builtin_clz(value);
 8004e2a:	fab6 f686 	clz	r6, r6
 8004e2e:	3601      	adds	r6, #1
 8004e30:	f006 061f 	and.w	r6, r6, #31
 8004e34:	2701      	movs	r7, #1
 8004e36:	fa07 f606 	lsl.w	r6, r7, r6
 8004e3a:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3c:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8004e40:	2c00      	cmp	r4, #0
 8004e42:	d06f      	beq.n	8004f24 <HAL_ADCEx_InjectedConfigChannel+0x65c>
  return __builtin_clz(value);
 8004e44:	fab4 f484 	clz	r4, r4
 8004e48:	3401      	adds	r4, #1
 8004e4a:	f004 041f 	and.w	r4, r4, #31
 8004e4e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8004e52:	e6bd      	b.n	8004bd0 <HAL_ADCEx_InjectedConfigChannel+0x308>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e54:	01cc      	lsls	r4, r1, #7
 8004e56:	f53f adca 	bmi.w	80049ee <HAL_ADCEx_InjectedConfigChannel+0x126>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e5a:	4c36      	ldr	r4, [pc, #216]	@ (8004f34 <HAL_ADCEx_InjectedConfigChannel+0x66c>)
 8004e5c:	4d36      	ldr	r5, [pc, #216]	@ (8004f38 <HAL_ADCEx_InjectedConfigChannel+0x670>)
 8004e5e:	4937      	ldr	r1, [pc, #220]	@ (8004f3c <HAL_ADCEx_InjectedConfigChannel+0x674>)
 8004e60:	42a3      	cmp	r3, r4
 8004e62:	bf18      	it	ne
 8004e64:	460d      	movne	r5, r1
 8004e66:	e6de      	b.n	8004c26 <HAL_ADCEx_InjectedConfigChannel+0x35e>
  MODIFY_REG(*preg,
 8004e68:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8004e6a:	461d      	mov	r5, r3
 8004e6c:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004e70:	f845 4f60 	str.w	r4, [r5, #96]!
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004e74:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e78:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 8004e7a:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8004e7c:	f3cc 0712 	ubfx	r7, ip, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004e80:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e84:	f103 0864 	add.w	r8, r3, #100	@ 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004e88:	4664      	mov	r4, ip
 8004e8a:	2f00      	cmp	r7, #0
 8004e8c:	f47f af5c 	bne.w	8004d48 <HAL_ADCEx_InjectedConfigChannel+0x480>
 8004e90:	f3cc 6484 	ubfx	r4, ip, #26, #5
 8004e94:	e79b      	b.n	8004dce <HAL_ADCEx_InjectedConfigChannel+0x506>
 8004e96:	f105 090c 	add.w	r9, r5, #12
  MODIFY_REG(*preg,
 8004e9a:	f8de 4000 	ldr.w	r4, [lr]
 8004e9e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004ea2:	f8ce 4000 	str.w	r4, [lr]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004ea6:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004eaa:	68ec      	ldr	r4, [r5, #12]
 8004eac:	68ed      	ldr	r5, [r5, #12]
 8004eae:	f3cc 0612 	ubfx	r6, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004eb2:	464f      	mov	r7, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004eb4:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004eb8:	4664      	mov	r4, ip
 8004eba:	2e00      	cmp	r6, #0
 8004ebc:	f47f af69 	bne.w	8004d92 <HAL_ADCEx_InjectedConfigChannel+0x4ca>
 8004ec0:	f3cc 6484 	ubfx	r4, ip, #26, #5
 8004ec4:	e793      	b.n	8004dee <HAL_ADCEx_InjectedConfigChannel+0x526>
 8004ec6:	f105 0908 	add.w	r9, r5, #8
  MODIFY_REG(*preg,
 8004eca:	f8d8 4000 	ldr.w	r4, [r8]
 8004ece:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004ed2:	f8c8 4000 	str.w	r4, [r8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004ed6:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004eda:	68ac      	ldr	r4, [r5, #8]
 8004edc:	68ae      	ldr	r6, [r5, #8]
 8004ede:	f3cc 0712 	ubfx	r7, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ee2:	46ce      	mov	lr, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ee4:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004ee8:	4664      	mov	r4, ip
 8004eea:	2f00      	cmp	r7, #0
 8004eec:	f47f af3f 	bne.w	8004d6e <HAL_ADCEx_InjectedConfigChannel+0x4a6>
 8004ef0:	f3cc 6484 	ubfx	r4, ip, #26, #5
 8004ef4:	e773      	b.n	8004dde <HAL_ADCEx_InjectedConfigChannel+0x516>
  MODIFY_REG(*preg,
 8004ef6:	683c      	ldr	r4, [r7, #0]
 8004ef8:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004efc:	603c      	str	r4, [r7, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004efe:	680c      	ldr	r4, [r1, #0]
}
 8004f00:	e52b      	b.n	800495a <HAL_ADCEx_InjectedConfigChannel+0x92>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f02:	68ee      	ldr	r6, [r5, #12]
 8004f04:	68ed      	ldr	r5, [r5, #12]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f06:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8004f0a:	e742      	b.n	8004d92 <HAL_ADCEx_InjectedConfigChannel+0x4ca>
 8004f0c:	68ae      	ldr	r6, [r5, #8]
 8004f0e:	68ae      	ldr	r6, [r5, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004f10:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004f14:	e72b      	b.n	8004d6e <HAL_ADCEx_InjectedConfigChannel+0x4a6>
 8004f16:	2602      	movs	r6, #2
 8004f18:	e6d5      	b.n	8004cc6 <HAL_ADCEx_InjectedConfigChannel+0x3fe>
 8004f1a:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 8004f1e:	e6c5      	b.n	8004cac <HAL_ADCEx_InjectedConfigChannel+0x3e4>
 8004f20:	4c07      	ldr	r4, [pc, #28]	@ (8004f40 <HAL_ADCEx_InjectedConfigChannel+0x678>)
 8004f22:	e656      	b.n	8004bd2 <HAL_ADCEx_InjectedConfigChannel+0x30a>
 8004f24:	f44f 1440 	mov.w	r4, #3145728	@ 0x300000
 8004f28:	e653      	b.n	8004bd2 <HAL_ADCEx_InjectedConfigChannel+0x30a>
 8004f2a:	2602      	movs	r6, #2
 8004f2c:	e785      	b.n	8004e3a <HAL_ADCEx_InjectedConfigChannel+0x572>
 8004f2e:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 8004f32:	e776      	b.n	8004e22 <HAL_ADCEx_InjectedConfigChannel+0x55a>
 8004f34:	50000100 	.word	0x50000100
 8004f38:	50000300 	.word	0x50000300
 8004f3c:	50000700 	.word	0x50000700
 8004f40:	fe500000 	.word	0xfe500000

08004f44 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f44:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 8004f48:	2a01      	cmp	r2, #1
 8004f4a:	d04c      	beq.n	8004fe6 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
{
 8004f4c:	b470      	push	{r4, r5, r6}

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004f4e:	6802      	ldr	r2, [r0, #0]
{
 8004f50:	b09d      	sub	sp, #116	@ 0x74
 8004f52:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004f54:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8004f56:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004f58:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004f5c:	9418      	str	r4, [sp, #96]	@ 0x60
  __HAL_LOCK(hadc);
 8004f5e:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004f62:	9419      	str	r4, [sp, #100]	@ 0x64
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004f64:	d00b      	beq.n	8004f7e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8004f66:	4d46      	ldr	r5, [pc, #280]	@ (8005080 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004f68:	42aa      	cmp	r2, r5
 8004f6a:	d03a      	beq.n	8004fe2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f6e:	f883 4058 	strb.w	r4, [r3, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f72:	f042 0220 	orr.w	r2, r2, #32
 8004f76:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8004f78:	b01d      	add	sp, #116	@ 0x74
 8004f7a:	bc70      	pop	{r4, r5, r6}
 8004f7c:	4770      	bx	lr
 8004f7e:	4841      	ldr	r0, [pc, #260]	@ (8005084 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f80:	6880      	ldr	r0, [r0, #8]
 8004f82:	0740      	lsls	r0, r0, #29
 8004f84:	d50b      	bpl.n	8004f9e <HAL_ADCEx_MultiModeConfigChannel+0x5a>
 8004f86:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004f8a:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8004f8e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f90:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 8004f98:	b01d      	add	sp, #116	@ 0x74
 8004f9a:	bc70      	pop	{r4, r5, r6}
 8004f9c:	4770      	bx	lr
 8004f9e:	6890      	ldr	r0, [r2, #8]
 8004fa0:	0740      	lsls	r0, r0, #29
 8004fa2:	d4f1      	bmi.n	8004f88 <HAL_ADCEx_MultiModeConfigChannel+0x44>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004fa4:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004fa8:	6808      	ldr	r0, [r1, #0]
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004faa:	d01e      	beq.n	8004fea <HAL_ADCEx_MultiModeConfigChannel+0xa6>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004fac:	2800      	cmp	r0, #0
 8004fae:	d131      	bne.n	8005014 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004fb0:	4935      	ldr	r1, [pc, #212]	@ (8005088 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004fb2:	4c33      	ldr	r4, [pc, #204]	@ (8005080 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004fb4:	688a      	ldr	r2, [r1, #8]
 8004fb6:	4835      	ldr	r0, [pc, #212]	@ (800508c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8004fb8:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004fbc:	608a      	str	r2, [r1, #8]
 8004fbe:	68a4      	ldr	r4, [r4, #8]
 8004fc0:	6882      	ldr	r2, [r0, #8]
 8004fc2:	07d6      	lsls	r6, r2, #31
 8004fc4:	d458      	bmi.n	8005078 <HAL_ADCEx_MultiModeConfigChannel+0x134>
 8004fc6:	4a32      	ldr	r2, [pc, #200]	@ (8005090 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8004fc8:	6892      	ldr	r2, [r2, #8]
 8004fca:	07d0      	lsls	r0, r2, #31
 8004fcc:	d407      	bmi.n	8004fde <HAL_ADCEx_MultiModeConfigChannel+0x9a>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fce:	07e2      	lsls	r2, r4, #31
 8004fd0:	d405      	bmi.n	8004fde <HAL_ADCEx_MultiModeConfigChannel+0x9a>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004fd2:	688a      	ldr	r2, [r1, #8]
 8004fd4:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8004fd8:	f022 020f 	bic.w	r2, r2, #15
 8004fdc:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fde:	2000      	movs	r0, #0
 8004fe0:	e7d7      	b.n	8004f92 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004fe2:	482a      	ldr	r0, [pc, #168]	@ (800508c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8004fe4:	e7cc      	b.n	8004f80 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
  __HAL_LOCK(hadc);
 8004fe6:	2002      	movs	r0, #2
}
 8004fe8:	4770      	bx	lr
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004fea:	2800      	cmp	r0, #0
 8004fec:	d034      	beq.n	8005058 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004fee:	4d29      	ldr	r5, [pc, #164]	@ (8005094 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004ff0:	684e      	ldr	r6, [r1, #4]
 8004ff2:	68ac      	ldr	r4, [r5, #8]
 8004ff4:	f893 c038 	ldrb.w	ip, [r3, #56]	@ 0x38
 8004ff8:	f424 4460 	bic.w	r4, r4, #57344	@ 0xe000
 8004ffc:	4334      	orrs	r4, r6
 8004ffe:	ea44 344c 	orr.w	r4, r4, ip, lsl #13
 8005002:	60ac      	str	r4, [r5, #8]
 8005004:	6892      	ldr	r2, [r2, #8]
 8005006:	07d4      	lsls	r4, r2, #31
 8005008:	d433      	bmi.n	8005072 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800500a:	4a1e      	ldr	r2, [pc, #120]	@ (8005084 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800500c:	6892      	ldr	r2, [r2, #8]
 800500e:	07d4      	lsls	r4, r2, #31
 8005010:	d518      	bpl.n	8005044 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005012:	e7e4      	b.n	8004fde <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005014:	4d1c      	ldr	r5, [pc, #112]	@ (8005088 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005016:	684c      	ldr	r4, [r1, #4]
 8005018:	68aa      	ldr	r2, [r5, #8]
 800501a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800501e:	4322      	orrs	r2, r4
 8005020:	f893 4038 	ldrb.w	r4, [r3, #56]	@ 0x38
 8005024:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8005028:	60aa      	str	r2, [r5, #8]
 800502a:	4a15      	ldr	r2, [pc, #84]	@ (8005080 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800502c:	6894      	ldr	r4, [r2, #8]
 800502e:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8005032:	6892      	ldr	r2, [r2, #8]
 8005034:	07d6      	lsls	r6, r2, #31
 8005036:	d41f      	bmi.n	8005078 <HAL_ADCEx_MultiModeConfigChannel+0x134>
 8005038:	4a15      	ldr	r2, [pc, #84]	@ (8005090 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800503a:	6892      	ldr	r2, [r2, #8]
 800503c:	07d2      	lsls	r2, r2, #31
 800503e:	d4ce      	bmi.n	8004fde <HAL_ADCEx_MultiModeConfigChannel+0x9a>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005040:	07e6      	lsls	r6, r4, #31
 8005042:	d4cc      	bmi.n	8004fde <HAL_ADCEx_MultiModeConfigChannel+0x9a>
        MODIFY_REG(tmpADC_Common->CCR,
 8005044:	68ac      	ldr	r4, [r5, #8]
 8005046:	688a      	ldr	r2, [r1, #8]
 8005048:	f424 6171 	bic.w	r1, r4, #3856	@ 0xf10
 800504c:	4302      	orrs	r2, r0
 800504e:	f021 010f 	bic.w	r1, r1, #15
 8005052:	430a      	orrs	r2, r1
 8005054:	60aa      	str	r2, [r5, #8]
 8005056:	e7c2      	b.n	8004fde <HAL_ADCEx_MultiModeConfigChannel+0x9a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005058:	490e      	ldr	r1, [pc, #56]	@ (8005094 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800505a:	6888      	ldr	r0, [r1, #8]
 800505c:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 8005060:	6088      	str	r0, [r1, #8]
 8005062:	6892      	ldr	r2, [r2, #8]
 8005064:	07d5      	lsls	r5, r2, #31
 8005066:	d404      	bmi.n	8005072 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005068:	4a06      	ldr	r2, [pc, #24]	@ (8005084 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800506a:	6892      	ldr	r2, [r2, #8]
 800506c:	07d4      	lsls	r4, r2, #31
 800506e:	d4b6      	bmi.n	8004fde <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005070:	e7af      	b.n	8004fd2 <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 8005072:	4a04      	ldr	r2, [pc, #16]	@ (8005084 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005074:	6892      	ldr	r2, [r2, #8]
 8005076:	e7b2      	b.n	8004fde <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005078:	4a05      	ldr	r2, [pc, #20]	@ (8005090 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800507a:	6892      	ldr	r2, [r2, #8]
 800507c:	e7af      	b.n	8004fde <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800507e:	bf00      	nop
 8005080:	50000400 	.word	0x50000400
 8005084:	50000100 	.word	0x50000100
 8005088:	50000700 	.word	0x50000700
 800508c:	50000500 	.word	0x50000500
 8005090:	50000600 	.word	0x50000600
 8005094:	50000300 	.word	0x50000300

08005098 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005098:	4907      	ldr	r1, [pc, #28]	@ (80050b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800509a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800509c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800509e:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050a2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050a6:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050a8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050aa:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80050ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80050b2:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	e000ed00 	.word	0xe000ed00

080050bc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050bc:	4b1b      	ldr	r3, [pc, #108]	@ (800512c <HAL_NVIC_SetPriority+0x70>)
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050c4:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050c6:	f1c3 0e07 	rsb	lr, r3, #7
 80050ca:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050ce:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050d2:	bf28      	it	cs
 80050d4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050d8:	f1bc 0f06 	cmp.w	ip, #6
 80050dc:	d91c      	bls.n	8005118 <HAL_NVIC_SetPriority+0x5c>
 80050de:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050e2:	f04f 33ff 	mov.w	r3, #4294967295
 80050e6:	fa03 f30c 	lsl.w	r3, r3, ip
 80050ea:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050ee:	f04f 33ff 	mov.w	r3, #4294967295
 80050f2:	fa03 f30e 	lsl.w	r3, r3, lr
 80050f6:	ea21 0303 	bic.w	r3, r1, r3
 80050fa:	fa03 f30c 	lsl.w	r3, r3, ip
 80050fe:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005100:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8005102:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005104:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8005106:	db0a      	blt.n	800511e <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005108:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800510c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8005110:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005114:	f85d fb04 	ldr.w	pc, [sp], #4
 8005118:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800511a:	4694      	mov	ip, r2
 800511c:	e7e7      	b.n	80050ee <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800511e:	4a04      	ldr	r2, [pc, #16]	@ (8005130 <HAL_NVIC_SetPriority+0x74>)
 8005120:	f000 000f 	and.w	r0, r0, #15
 8005124:	4402      	add	r2, r0
 8005126:	7613      	strb	r3, [r2, #24]
 8005128:	f85d fb04 	ldr.w	pc, [sp], #4
 800512c:	e000ed00 	.word	0xe000ed00
 8005130:	e000ecfc 	.word	0xe000ecfc

08005134 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005134:	2800      	cmp	r0, #0
 8005136:	db07      	blt.n	8005148 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005138:	4a04      	ldr	r2, [pc, #16]	@ (800514c <HAL_NVIC_EnableIRQ+0x18>)
 800513a:	0941      	lsrs	r1, r0, #5
 800513c:	2301      	movs	r3, #1
 800513e:	f000 001f 	and.w	r0, r0, #31
 8005142:	4083      	lsls	r3, r0
 8005144:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	e000e100 	.word	0xe000e100

08005150 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8005150:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005154:	4905      	ldr	r1, [pc, #20]	@ (800516c <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005156:	4b06      	ldr	r3, [pc, #24]	@ (8005170 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005158:	68ca      	ldr	r2, [r1, #12]
 800515a:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800515e:	4313      	orrs	r3, r2
 8005160:	60cb      	str	r3, [r1, #12]
 8005162:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005166:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8005168:	e7fd      	b.n	8005166 <HAL_NVIC_SystemReset+0x16>
 800516a:	bf00      	nop
 800516c:	e000ed00 	.word	0xe000ed00
 8005170:	05fa0004 	.word	0x05fa0004

08005174 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005174:	3801      	subs	r0, #1
 8005176:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800517a:	d301      	bcc.n	8005180 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 800517c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800517e:	4770      	bx	lr
{
 8005180:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005182:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005186:	4c07      	ldr	r4, [pc, #28]	@ (80051a4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005188:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800518a:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 800518e:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005192:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005194:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005196:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005198:	619a      	str	r2, [r3, #24]
}
 800519a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800519e:	6119      	str	r1, [r3, #16]
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	e000ed00 	.word	0xe000ed00

080051a8 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop

080051ac <HAL_SYSTICK_IRQHandler>:
{
 80051ac:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80051ae:	f7ff fffb 	bl	80051a8 <HAL_SYSTICK_Callback>
}
 80051b2:	bd08      	pop	{r3, pc}

080051b4 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80051b4:	2800      	cmp	r0, #0
 80051b6:	d076      	beq.n	80052a6 <HAL_DMA_Init+0xf2>
{
 80051b8:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80051ba:	4a3c      	ldr	r2, [pc, #240]	@ (80052ac <HAL_DMA_Init+0xf8>)
 80051bc:	6804      	ldr	r4, [r0, #0]
 80051be:	4294      	cmp	r4, r2
 80051c0:	4603      	mov	r3, r0
 80051c2:	d95c      	bls.n	800527e <HAL_DMA_Init+0xca>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80051c4:	493a      	ldr	r1, [pc, #232]	@ (80052b0 <HAL_DMA_Init+0xfc>)
 80051c6:	4a3b      	ldr	r2, [pc, #236]	@ (80052b4 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA2;
 80051c8:	483b      	ldr	r0, [pc, #236]	@ (80052b8 <HAL_DMA_Init+0x104>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80051ca:	4421      	add	r1, r4
 80051cc:	fba2 2101 	umull	r2, r1, r2, r1
 80051d0:	0909      	lsrs	r1, r1, #4
 80051d2:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051d4:	2202      	movs	r2, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80051d6:	689d      	ldr	r5, [r3, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 80051d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp |=  hdma->Init.Direction        |
 80051dc:	68da      	ldr	r2, [r3, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80051de:	4e35      	ldr	r6, [pc, #212]	@ (80052b4 <HAL_DMA_Init+0x100>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80051e0:	4f36      	ldr	r7, [pc, #216]	@ (80052bc <HAL_DMA_Init+0x108>)
 80051e2:	e9c3 0110 	strd	r0, r1, [r3, #64]	@ 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051e6:	6918      	ldr	r0, [r3, #16]
  tmp |=  hdma->Init.Direction        |
 80051e8:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051ea:	4302      	orrs	r2, r0
 80051ec:	6958      	ldr	r0, [r3, #20]
 80051ee:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051f0:	6998      	ldr	r0, [r3, #24]
 80051f2:	4302      	orrs	r2, r0
 80051f4:	69d8      	ldr	r0, [r3, #28]
 80051f6:	4302      	orrs	r2, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80051f8:	b2e0      	uxtb	r0, r4
 80051fa:	3808      	subs	r0, #8
 80051fc:	fba6 6000 	umull	r6, r0, r6, r0
  tmp = hdma->Instance->CCR;
 8005200:	6826      	ldr	r6, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005202:	f426 4cff 	bic.w	ip, r6, #32640	@ 0x7f80
          hdma->Init.Mode                | hdma->Init.Priority;
 8005206:	6a1e      	ldr	r6, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005208:	f02c 0c70 	bic.w	ip, ip, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 800520c:	4332      	orrs	r2, r6
  tmp |=  hdma->Init.Direction        |
 800520e:	ea42 020c 	orr.w	r2, r2, ip
  hdma->Instance->CCR = tmp;
 8005212:	6022      	str	r2, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005214:	4e25      	ldr	r6, [pc, #148]	@ (80052ac <HAL_DMA_Init+0xf8>)
 8005216:	4a2a      	ldr	r2, [pc, #168]	@ (80052c0 <HAL_DMA_Init+0x10c>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005218:	f3c0 1004 	ubfx	r0, r0, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800521c:	42b4      	cmp	r4, r6
 800521e:	bf98      	it	ls
 8005220:	463a      	movls	r2, r7
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005222:	f206 4679 	addw	r6, r6, #1145	@ 0x479
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005226:	2401      	movs	r4, #1
 8005228:	fa04 f000 	lsl.w	r0, r4, r0
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800522c:	64de      	str	r6, [r3, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800522e:	f5b5 4f80 	cmp.w	r5, #16384	@ 0x4000
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005232:	eb01 0602 	add.w	r6, r1, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005236:	6518      	str	r0, [r3, #80]	@ 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005238:	649e      	str	r6, [r3, #72]	@ 0x48
 800523a:	ea4f 0191 	mov.w	r1, r1, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800523e:	d027      	beq.n	8005290 <HAL_DMA_Init+0xdc>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005240:	685e      	ldr	r6, [r3, #4]
 8005242:	b2f5      	uxtb	r5, r6
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005244:	3e01      	subs	r6, #1
 8005246:	2e03      	cmp	r6, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005248:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800524c:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005250:	d824      	bhi.n	800529c <HAL_DMA_Init+0xe8>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005252:	4a1c      	ldr	r2, [pc, #112]	@ (80052c4 <HAL_DMA_Init+0x110>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005254:	481c      	ldr	r0, [pc, #112]	@ (80052c8 <HAL_DMA_Init+0x114>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005256:	442a      	add	r2, r5
 8005258:	0092      	lsls	r2, r2, #2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800525a:	3d01      	subs	r5, #1
 800525c:	40ac      	lsls	r4, r5
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800525e:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005260:	e9c3 2015 	strd	r2, r0, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005264:	65dc      	str	r4, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005266:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005268:	4a18      	ldr	r2, [pc, #96]	@ (80052cc <HAL_DMA_Init+0x118>)
 800526a:	6454      	str	r4, [r2, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800526c:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 800526e:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005270:	63d8      	str	r0, [r3, #60]	@ 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8005272:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8005276:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 800527a:	bcf0      	pop	{r4, r5, r6, r7}
 800527c:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800527e:	4914      	ldr	r1, [pc, #80]	@ (80052d0 <HAL_DMA_Init+0x11c>)
 8005280:	4a0c      	ldr	r2, [pc, #48]	@ (80052b4 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA1;
 8005282:	4814      	ldr	r0, [pc, #80]	@ (80052d4 <HAL_DMA_Init+0x120>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005284:	4421      	add	r1, r4
 8005286:	fba2 2101 	umull	r2, r1, r2, r1
 800528a:	0909      	lsrs	r1, r1, #4
 800528c:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 800528e:	e7a1      	b.n	80051d4 <HAL_DMA_Init+0x20>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005290:	2400      	movs	r4, #0
 8005292:	605c      	str	r4, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005294:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005298:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    hdma->DMAmuxRequestGen = 0U;
 800529c:	2200      	movs	r2, #0
 800529e:	e9c3 2215 	strd	r2, r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80052a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80052a4:	e7e2      	b.n	800526c <HAL_DMA_Init+0xb8>
    return HAL_ERROR;
 80052a6:	2001      	movs	r0, #1
}
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40020407 	.word	0x40020407
 80052b0:	bffdfbf8 	.word	0xbffdfbf8
 80052b4:	cccccccd 	.word	0xcccccccd
 80052b8:	40020400 	.word	0x40020400
 80052bc:	40020800 	.word	0x40020800
 80052c0:	40020820 	.word	0x40020820
 80052c4:	1000823f 	.word	0x1000823f
 80052c8:	40020940 	.word	0x40020940
 80052cc:	40020900 	.word	0x40020900
 80052d0:	bffdfff8 	.word	0xbffdfff8
 80052d4:	40020000 	.word	0x40020000

080052d8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80052d8:	680b      	ldr	r3, [r1, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 8198 	beq.w	8005610 <HAL_GPIO_Init+0x338>
{
 80052e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e4:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 80052e8:	b085      	sub	sp, #20
  uint32_t position = 0x00U;
 80052ea:	f04f 0200 	mov.w	r2, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052ee:	f04f 0b01 	mov.w	fp, #1
 80052f2:	f000 810d 	beq.w	8005510 <HAL_GPIO_Init+0x238>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052f6:	f8df e34c 	ldr.w	lr, [pc, #844]	@ 8005644 <HAL_GPIO_Init+0x36c>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80052fa:	9300      	str	r3, [sp, #0]
    if (iocurrent != 0x00u)
 80052fc:	9b00      	ldr	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052fe:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00u)
 8005302:	ea1c 0a03 	ands.w	sl, ip, r3
 8005306:	d077      	beq.n	80053f8 <HAL_GPIO_Init+0x120>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005308:	684d      	ldr	r5, [r1, #4]
 800530a:	f005 0703 	and.w	r7, r5, #3
 800530e:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005310:	2303      	movs	r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005312:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005316:	fa03 f604 	lsl.w	r6, r3, r4
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800531a:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800531e:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005322:	f240 8119 	bls.w	8005558 <HAL_GPIO_Init+0x280>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005326:	2f03      	cmp	r7, #3
 8005328:	f040 8179 	bne.w	800561e <HAL_GPIO_Init+0x346>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800532c:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 8005330:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005332:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005334:	4334      	orrs	r4, r6
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005336:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 800533a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800533c:	d05c      	beq.n	80053f8 <HAL_GPIO_Init+0x120>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800533e:	4ebe      	ldr	r6, [pc, #760]	@ (8005638 <HAL_GPIO_Init+0x360>)
 8005340:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 8005342:	f044 0401 	orr.w	r4, r4, #1
 8005346:	6634      	str	r4, [r6, #96]	@ 0x60
 8005348:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 800534a:	f004 0401 	and.w	r4, r4, #1
 800534e:	9403      	str	r4, [sp, #12]
 8005350:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005352:	f022 0403 	bic.w	r4, r2, #3
 8005356:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800535a:	f002 0703 	and.w	r7, r2, #3
 800535e:	230f      	movs	r3, #15
 8005360:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
 8005364:	00bf      	lsls	r7, r7, #2
 8005366:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800536a:	4bb4      	ldr	r3, [pc, #720]	@ (800563c <HAL_GPIO_Init+0x364>)
        temp = SYSCFG->EXTICR[position >> 2U];
 800536c:	68a6      	ldr	r6, [r4, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800536e:	4298      	cmp	r0, r3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005370:	ea26 060c 	bic.w	r6, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005374:	f000 8140 	beq.w	80055f8 <HAL_GPIO_Init+0x320>
 8005378:	4bb1      	ldr	r3, [pc, #708]	@ (8005640 <HAL_GPIO_Init+0x368>)
 800537a:	4298      	cmp	r0, r3
 800537c:	f000 812d 	beq.w	80055da <HAL_GPIO_Init+0x302>
 8005380:	f8df c2c4 	ldr.w	ip, [pc, #708]	@ 8005648 <HAL_GPIO_Init+0x370>
 8005384:	4560      	cmp	r0, ip
 8005386:	f000 813d 	beq.w	8005604 <HAL_GPIO_Init+0x32c>
 800538a:	f8df c2c0 	ldr.w	ip, [pc, #704]	@ 800564c <HAL_GPIO_Init+0x374>
 800538e:	4560      	cmp	r0, ip
 8005390:	f000 813f 	beq.w	8005612 <HAL_GPIO_Init+0x33a>
 8005394:	f8df c2b8 	ldr.w	ip, [pc, #696]	@ 8005650 <HAL_GPIO_Init+0x378>
 8005398:	4560      	cmp	r0, ip
 800539a:	bf0c      	ite	eq
 800539c:	f04f 0c05 	moveq.w	ip, #5
 80053a0:	f04f 0c06 	movne.w	ip, #6
 80053a4:	fa0c f707 	lsl.w	r7, ip, r7
 80053a8:	433e      	orrs	r6, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053aa:	60a6      	str	r6, [r4, #8]
        temp = EXTI->RTSR1;
 80053ac:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
 80053b0:	ea6f 060a 	mvn.w	r6, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053b4:	02ef      	lsls	r7, r5, #11
        temp &= ~(iocurrent);
 80053b6:	bf54      	ite	pl
 80053b8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80053ba:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->RTSR1 = temp;
 80053be:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 80053c2:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053c6:	02ab      	lsls	r3, r5, #10
        temp &= ~(iocurrent);
 80053c8:	bf54      	ite	pl
 80053ca:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80053cc:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->FTSR1 = temp;
 80053d0:	f8ce 400c 	str.w	r4, [lr, #12]

        temp = EXTI->EMR1;
 80053d4:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053d8:	03af      	lsls	r7, r5, #14
        temp &= ~(iocurrent);
 80053da:	bf54      	ite	pl
 80053dc:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80053de:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->EMR1 = temp;
 80053e2:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80053e6:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053ea:	03eb      	lsls	r3, r5, #15
        temp &= ~(iocurrent);
 80053ec:	bf54      	ite	pl
 80053ee:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80053f0:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->IMR1 = temp;
 80053f4:	f8ce 4000 	str.w	r4, [lr]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80053f8:	9b00      	ldr	r3, [sp, #0]
      }
    }

    position++;
 80053fa:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80053fc:	fa33 f402 	lsrs.w	r4, r3, r2
 8005400:	f47f af7c 	bne.w	80052fc <HAL_GPIO_Init+0x24>
  }
}
 8005404:	b005      	add	sp, #20
 8005406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800540a:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800540e:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005410:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005414:	fa06 f807 	lsl.w	r8, r6, r7
 8005418:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800541c:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8005420:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005424:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005428:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 800542c:	fa0e fe02 	lsl.w	lr, lr, r2
 8005430:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8005434:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 8005438:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800543c:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800543e:	ea0a 0808 	and.w	r8, sl, r8
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005442:	fa06 fe07 	lsl.w	lr, r6, r7
 8005446:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800544a:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 800544c:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005450:	d119      	bne.n	8005486 <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->AFR[position >> 3U];
 8005452:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005456:	690e      	ldr	r6, [r1, #16]
 8005458:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800545c:	f002 0807 	and.w	r8, r2, #7
 8005460:	f10e 4e90 	add.w	lr, lr, #1207959552	@ 0x48000000
 8005464:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005468:	fa06 f608 	lsl.w	r6, r6, r8
        temp = GPIOx->AFR[position >> 3U];
 800546c:	f8de 9020 	ldr.w	r9, [lr, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005470:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005472:	260f      	movs	r6, #15
 8005474:	fa06 f808 	lsl.w	r8, r6, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005478:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800547a:	ea29 0908 	bic.w	r9, r9, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800547e:	ea46 0809 	orr.w	r8, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8005482:	f8ce 8020 	str.w	r8, [lr, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005486:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 8005488:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800548a:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800548e:	433c      	orrs	r4, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005490:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8005494:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005496:	d036      	beq.n	8005506 <HAL_GPIO_Init+0x22e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005498:	4f67      	ldr	r7, [pc, #412]	@ (8005638 <HAL_GPIO_Init+0x360>)
 800549a:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 800549c:	f044 0401 	orr.w	r4, r4, #1
 80054a0:	663c      	str	r4, [r7, #96]	@ 0x60
 80054a2:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 80054a4:	f004 0401 	and.w	r4, r4, #1
 80054a8:	9403      	str	r4, [sp, #12]
 80054aa:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80054ac:	f022 0403 	bic.w	r4, r2, #3
 80054b0:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 80054b4:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80054b8:	f002 0703 	and.w	r7, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80054bc:	f8d4 e008 	ldr.w	lr, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80054c0:	260f      	movs	r6, #15
 80054c2:	00bf      	lsls	r7, r7, #2
 80054c4:	fa06 f707 	lsl.w	r7, r6, r7
 80054c8:	ea2e 0707 	bic.w	r7, lr, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054cc:	60a7      	str	r7, [r4, #8]
        temp = EXTI->RTSR1;
 80054ce:	4c5d      	ldr	r4, [pc, #372]	@ (8005644 <HAL_GPIO_Init+0x36c>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054d0:	02ee      	lsls	r6, r5, #11
        temp = EXTI->RTSR1;
 80054d2:	68a4      	ldr	r4, [r4, #8]
        temp &= ~(iocurrent);
 80054d4:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054d8:	d47c      	bmi.n	80055d4 <HAL_GPIO_Init+0x2fc>
        temp &= ~(iocurrent);
 80054da:	403c      	ands	r4, r7
        EXTI->RTSR1 = temp;
 80054dc:	4e59      	ldr	r6, [pc, #356]	@ (8005644 <HAL_GPIO_Init+0x36c>)
 80054de:	60b4      	str	r4, [r6, #8]
        temp = EXTI->FTSR1;
 80054e0:	68f4      	ldr	r4, [r6, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80054e2:	02ae      	lsls	r6, r5, #10
 80054e4:	f100 8085 	bmi.w	80055f2 <HAL_GPIO_Init+0x31a>
        temp &= ~(iocurrent);
 80054e8:	403c      	ands	r4, r7
        EXTI->FTSR1 = temp;
 80054ea:	4e56      	ldr	r6, [pc, #344]	@ (8005644 <HAL_GPIO_Init+0x36c>)
 80054ec:	60f4      	str	r4, [r6, #12]
        temp = EXTI->EMR1;
 80054ee:	6874      	ldr	r4, [r6, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054f0:	03ae      	lsls	r6, r5, #14
 80054f2:	d47b      	bmi.n	80055ec <HAL_GPIO_Init+0x314>
        temp &= ~(iocurrent);
 80054f4:	403c      	ands	r4, r7
        EXTI->EMR1 = temp;
 80054f6:	4e53      	ldr	r6, [pc, #332]	@ (8005644 <HAL_GPIO_Init+0x36c>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054f8:	03ed      	lsls	r5, r5, #15
        EXTI->EMR1 = temp;
 80054fa:	6074      	str	r4, [r6, #4]
        temp = EXTI->IMR1;
 80054fc:	6834      	ldr	r4, [r6, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054fe:	d472      	bmi.n	80055e6 <HAL_GPIO_Init+0x30e>
        temp &= ~(iocurrent);
 8005500:	403c      	ands	r4, r7
        EXTI->IMR1 = temp;
 8005502:	4d50      	ldr	r5, [pc, #320]	@ (8005644 <HAL_GPIO_Init+0x36c>)
 8005504:	602c      	str	r4, [r5, #0]
    position++;
 8005506:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005508:	fa33 f402 	lsrs.w	r4, r3, r2
 800550c:	f43f af7a 	beq.w	8005404 <HAL_GPIO_Init+0x12c>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005510:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00u)
 8005514:	ea13 0c0e 	ands.w	ip, r3, lr
 8005518:	d0f5      	beq.n	8005506 <HAL_GPIO_Init+0x22e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800551a:	684d      	ldr	r5, [r1, #4]
 800551c:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800551e:	2603      	movs	r6, #3
 8005520:	fa06 f807 	lsl.w	r8, r6, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005524:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005528:	ea6f 0a08 	mvn.w	sl, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800552c:	f104 38ff 	add.w	r8, r4, #4294967295
 8005530:	f1b8 0f01 	cmp.w	r8, #1
 8005534:	f67f af69 	bls.w	800540a <HAL_GPIO_Init+0x132>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005538:	2c03      	cmp	r4, #3
 800553a:	d0a4      	beq.n	8005486 <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->PUPDR;
 800553c:	f04f 4890 	mov.w	r8, #1207959552	@ 0x48000000
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005540:	688e      	ldr	r6, [r1, #8]
        temp = GPIOx->PUPDR;
 8005542:	f8d8 900c 	ldr.w	r9, [r8, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005546:	fa06 fe07 	lsl.w	lr, r6, r7
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800554a:	ea0a 0909 	and.w	r9, sl, r9
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800554e:	ea4e 0e09 	orr.w	lr, lr, r9
        GPIOx->PUPDR = temp;
 8005552:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005556:	e796      	b.n	8005486 <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->OSPEEDR;
 8005558:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800555c:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800555e:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005562:	fa03 f804 	lsl.w	r8, r3, r4
 8005566:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800556a:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 800556e:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005572:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005574:	ea28 080c 	bic.w	r8, r8, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005578:	f3c5 1c00 	ubfx	ip, r5, #4, #1
 800557c:	fa0c fc02 	lsl.w	ip, ip, r2
 8005580:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->OTYPER = temp;
 8005584:	f8c0 c004 	str.w	ip, [r0, #4]
        temp = GPIOx->PUPDR;
 8005588:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800558c:	fa03 fc04 	lsl.w	ip, r3, r4
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005590:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005594:	ea4c 0c08 	orr.w	ip, ip, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005598:	2f02      	cmp	r7, #2
        GPIOx->PUPDR = temp;
 800559a:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800559e:	f47f aec5 	bne.w	800532c <HAL_GPIO_Init+0x54>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055a2:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 80055a4:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80055a8:	f002 0c07 	and.w	ip, r2, #7
 80055ac:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80055b0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055b4:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3U];
 80055b8:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055bc:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80055be:	230f      	movs	r3, #15
 80055c0:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055c4:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80055c6:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80055ca:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3U] = temp;
 80055ce:	f8c8 c020 	str.w	ip, [r8, #32]
 80055d2:	e6ab      	b.n	800532c <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 80055d4:	ea44 040c 	orr.w	r4, r4, ip
 80055d8:	e780      	b.n	80054dc <HAL_GPIO_Init+0x204>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80055da:	f04f 0c02 	mov.w	ip, #2
 80055de:	fa0c f707 	lsl.w	r7, ip, r7
 80055e2:	433e      	orrs	r6, r7
 80055e4:	e6e1      	b.n	80053aa <HAL_GPIO_Init+0xd2>
          temp |= iocurrent;
 80055e6:	ea4c 0404 	orr.w	r4, ip, r4
 80055ea:	e78a      	b.n	8005502 <HAL_GPIO_Init+0x22a>
          temp |= iocurrent;
 80055ec:	ea44 040c 	orr.w	r4, r4, ip
 80055f0:	e781      	b.n	80054f6 <HAL_GPIO_Init+0x21e>
          temp |= iocurrent;
 80055f2:	ea4c 0404 	orr.w	r4, ip, r4
 80055f6:	e778      	b.n	80054ea <HAL_GPIO_Init+0x212>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80055f8:	f04f 0c01 	mov.w	ip, #1
 80055fc:	fa0c f707 	lsl.w	r7, ip, r7
 8005600:	433e      	orrs	r6, r7
 8005602:	e6d2      	b.n	80053aa <HAL_GPIO_Init+0xd2>
 8005604:	f04f 0c03 	mov.w	ip, #3
 8005608:	fa0c f707 	lsl.w	r7, ip, r7
 800560c:	433e      	orrs	r6, r7
 800560e:	e6cc      	b.n	80053aa <HAL_GPIO_Init+0xd2>
 8005610:	4770      	bx	lr
 8005612:	f04f 0c04 	mov.w	ip, #4
 8005616:	fa0c f707 	lsl.w	r7, ip, r7
 800561a:	433e      	orrs	r6, r7
 800561c:	e6c5      	b.n	80053aa <HAL_GPIO_Init+0xd2>
        temp = GPIOx->PUPDR;
 800561e:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005622:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005624:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005628:	fa03 fc04 	lsl.w	ip, r3, r4
 800562c:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->PUPDR = temp;
 8005630:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005634:	e67a      	b.n	800532c <HAL_GPIO_Init+0x54>
 8005636:	bf00      	nop
 8005638:	40021000 	.word	0x40021000
 800563c:	48000400 	.word	0x48000400
 8005640:	48000800 	.word	0x48000800
 8005644:	40010400 	.word	0x40010400
 8005648:	48000c00 	.word	0x48000c00
 800564c:	48001000 	.word	0x48001000
 8005650:	48001400 	.word	0x48001400

08005654 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005654:	b10a      	cbz	r2, 800565a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005656:	6181      	str	r1, [r0, #24]
 8005658:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800565a:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop

08005660 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005660:	4a35      	ldr	r2, [pc, #212]	@ (8005738 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8005662:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005664:	b960      	cbnz	r0, 8005680 <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005666:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800566a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800566e:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005672:	d01b      	beq.n	80056ac <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005678:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800567c:	2000      	movs	r0, #0
}
 800567e:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005680:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8005684:	d006      	beq.n	8005694 <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005686:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800568a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800568e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8005690:	2000      	movs	r0, #0
}
 8005692:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005694:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800569c:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80056a0:	d029      	beq.n	80056f6 <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056a6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80056aa:	e7f1      	b.n	8005690 <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056b4:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056b6:	4821      	ldr	r0, [pc, #132]	@ (800573c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80056b8:	4921      	ldr	r1, [pc, #132]	@ (8005740 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80056be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80056c2:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056c4:	6803      	ldr	r3, [r0, #0]
 80056c6:	2032      	movs	r0, #50	@ 0x32
 80056c8:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056cc:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056ce:	fba1 1303 	umull	r1, r3, r1, r3
 80056d2:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056d4:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80056d6:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056da:	d506      	bpl.n	80056ea <HAL_PWREx_ControlVoltageScaling+0x8a>
 80056dc:	e000      	b.n	80056e0 <HAL_PWREx_ControlVoltageScaling+0x80>
 80056de:	b123      	cbz	r3, 80056ea <HAL_PWREx_ControlVoltageScaling+0x8a>
 80056e0:	6951      	ldr	r1, [r2, #20]
 80056e2:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80056e4:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80056e8:	d4f9      	bmi.n	80056de <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80056ea:	4b13      	ldr	r3, [pc, #76]	@ (8005738 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	055b      	lsls	r3, r3, #21
 80056f0:	d5ce      	bpl.n	8005690 <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 80056f2:	2003      	movs	r0, #3
 80056f4:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056fa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80056fe:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005700:	480e      	ldr	r0, [pc, #56]	@ (800573c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8005702:	490f      	ldr	r1, [pc, #60]	@ (8005740 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005704:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005708:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800570c:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800570e:	6803      	ldr	r3, [r0, #0]
 8005710:	2032      	movs	r0, #50	@ 0x32
 8005712:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005716:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005718:	fba1 1303 	umull	r1, r3, r1, r3
 800571c:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800571e:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005720:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005724:	d5e1      	bpl.n	80056ea <HAL_PWREx_ControlVoltageScaling+0x8a>
 8005726:	e001      	b.n	800572c <HAL_PWREx_ControlVoltageScaling+0xcc>
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0de      	beq.n	80056ea <HAL_PWREx_ControlVoltageScaling+0x8a>
 800572c:	6951      	ldr	r1, [r2, #20]
 800572e:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005730:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005734:	d5d9      	bpl.n	80056ea <HAL_PWREx_ControlVoltageScaling+0x8a>
 8005736:	e7f7      	b.n	8005728 <HAL_PWREx_ControlVoltageScaling+0xc8>
 8005738:	40007000 	.word	0x40007000
 800573c:	2000047c 	.word	0x2000047c
 8005740:	431bde83 	.word	0x431bde83

08005744 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005744:	4a02      	ldr	r2, [pc, #8]	@ (8005750 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8005746:	6893      	ldr	r3, [r2, #8]
 8005748:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800574c:	6093      	str	r3, [r2, #8]
}
 800574e:	4770      	bx	lr
 8005750:	40007000 	.word	0x40007000

08005754 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005754:	2800      	cmp	r0, #0
 8005756:	f000 81bd 	beq.w	8005ad4 <HAL_RCC_OscConfig+0x380>
{
 800575a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800575e:	6803      	ldr	r3, [r0, #0]
 8005760:	07d9      	lsls	r1, r3, #31
{
 8005762:	b082      	sub	sp, #8
 8005764:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005766:	d512      	bpl.n	800578e <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005768:	49a6      	ldr	r1, [pc, #664]	@ (8005a04 <HAL_RCC_OscConfig+0x2b0>)
 800576a:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800576c:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800576e:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005772:	2a0c      	cmp	r2, #12
 8005774:	f000 80d0 	beq.w	8005918 <HAL_RCC_OscConfig+0x1c4>
 8005778:	2a08      	cmp	r2, #8
 800577a:	f040 80d2 	bne.w	8005922 <HAL_RCC_OscConfig+0x1ce>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800577e:	4aa1      	ldr	r2, [pc, #644]	@ (8005a04 <HAL_RCC_OscConfig+0x2b0>)
 8005780:	6812      	ldr	r2, [r2, #0]
 8005782:	0392      	lsls	r2, r2, #14
 8005784:	d503      	bpl.n	800578e <HAL_RCC_OscConfig+0x3a>
 8005786:	6862      	ldr	r2, [r4, #4]
 8005788:	2a00      	cmp	r2, #0
 800578a:	f000 8137 	beq.w	80059fc <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800578e:	079a      	lsls	r2, r3, #30
 8005790:	d522      	bpl.n	80057d8 <HAL_RCC_OscConfig+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005792:	4a9c      	ldr	r2, [pc, #624]	@ (8005a04 <HAL_RCC_OscConfig+0x2b0>)
 8005794:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005796:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005798:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800579c:	2b0c      	cmp	r3, #12
 800579e:	f000 80f8 	beq.w	8005992 <HAL_RCC_OscConfig+0x23e>
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	f040 80fa 	bne.w	800599c <HAL_RCC_OscConfig+0x248>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057a8:	4b96      	ldr	r3, [pc, #600]	@ (8005a04 <HAL_RCC_OscConfig+0x2b0>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	055b      	lsls	r3, r3, #21
 80057ae:	d503      	bpl.n	80057b8 <HAL_RCC_OscConfig+0x64>
 80057b0:	68e3      	ldr	r3, [r4, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 8122 	beq.w	80059fc <HAL_RCC_OscConfig+0x2a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057b8:	4a92      	ldr	r2, [pc, #584]	@ (8005a04 <HAL_RCC_OscConfig+0x2b0>)
 80057ba:	6920      	ldr	r0, [r4, #16]
 80057bc:	6853      	ldr	r3, [r2, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80057be:	4992      	ldr	r1, [pc, #584]	@ (8005a08 <HAL_RCC_OscConfig+0x2b4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057c0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80057c4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80057c8:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80057ca:	6808      	ldr	r0, [r1, #0]
 80057cc:	f7fe faf6 	bl	8003dbc <HAL_InitTick>
 80057d0:	2800      	cmp	r0, #0
 80057d2:	f040 8113 	bne.w	80059fc <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	071a      	lsls	r2, r3, #28
 80057da:	d519      	bpl.n	8005810 <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057dc:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057de:	4d89      	ldr	r5, [pc, #548]	@ (8005a04 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 80c2 	beq.w	800596a <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_LSI_ENABLE();
 80057e6:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80057ea:	f043 0301 	orr.w	r3, r3, #1
 80057ee:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f2:	f7fe fb2d 	bl	8003e50 <HAL_GetTick>
 80057f6:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057f8:	e005      	b.n	8005806 <HAL_RCC_OscConfig+0xb2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057fa:	f7fe fb29 	bl	8003e50 <HAL_GetTick>
 80057fe:	1b80      	subs	r0, r0, r6
 8005800:	2802      	cmp	r0, #2
 8005802:	f200 8117 	bhi.w	8005a34 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005806:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800580a:	079b      	lsls	r3, r3, #30
 800580c:	d5f5      	bpl.n	80057fa <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	075d      	lsls	r5, r3, #29
 8005812:	d541      	bpl.n	8005898 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005814:	4b7b      	ldr	r3, [pc, #492]	@ (8005a04 <HAL_RCC_OscConfig+0x2b0>)
 8005816:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005818:	00d0      	lsls	r0, r2, #3
 800581a:	f100 810f 	bmi.w	8005a3c <HAL_RCC_OscConfig+0x2e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800581e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005820:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005824:	659a      	str	r2, [r3, #88]	@ 0x58
 8005826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005828:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800582c:	9301      	str	r3, [sp, #4]
 800582e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005830:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005832:	4e76      	ldr	r6, [pc, #472]	@ (8005a0c <HAL_RCC_OscConfig+0x2b8>)
 8005834:	6833      	ldr	r3, [r6, #0]
 8005836:	05d9      	lsls	r1, r3, #23
 8005838:	f140 812e 	bpl.w	8005a98 <HAL_RCC_OscConfig+0x344>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800583c:	68a3      	ldr	r3, [r4, #8]
 800583e:	2b01      	cmp	r3, #1
 8005840:	f000 80fe 	beq.w	8005a40 <HAL_RCC_OscConfig+0x2ec>
 8005844:	2b05      	cmp	r3, #5
 8005846:	f000 8184 	beq.w	8005b52 <HAL_RCC_OscConfig+0x3fe>
 800584a:	4e6e      	ldr	r6, [pc, #440]	@ (8005a04 <HAL_RCC_OscConfig+0x2b0>)
 800584c:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8005850:	f022 0201 	bic.w	r2, r2, #1
 8005854:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
 8005858:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 800585c:	f022 0204 	bic.w	r2, r2, #4
 8005860:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005864:	2b00      	cmp	r3, #0
 8005866:	f040 80f2 	bne.w	8005a4e <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800586a:	f7fe faf1 	bl	8003e50 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800586e:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8005872:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005874:	e005      	b.n	8005882 <HAL_RCC_OscConfig+0x12e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005876:	f7fe faeb 	bl	8003e50 <HAL_GetTick>
 800587a:	1bc0      	subs	r0, r0, r7
 800587c:	4540      	cmp	r0, r8
 800587e:	f200 80d9 	bhi.w	8005a34 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005882:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8005886:	0799      	lsls	r1, r3, #30
 8005888:	d4f5      	bmi.n	8005876 <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800588a:	b125      	cbz	r5, 8005896 <HAL_RCC_OscConfig+0x142>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800588c:	4a5d      	ldr	r2, [pc, #372]	@ (8005a04 <HAL_RCC_OscConfig+0x2b0>)
 800588e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005890:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005894:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	069a      	lsls	r2, r3, #26
 800589a:	d518      	bpl.n	80058ce <HAL_RCC_OscConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800589c:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800589e:	4d59      	ldr	r5, [pc, #356]	@ (8005a04 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 80e5 	beq.w	8005a70 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_HSI48_ENABLE();
 80058a6:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80058aa:	f043 0301 	orr.w	r3, r3, #1
 80058ae:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b2:	f7fe facd 	bl	8003e50 <HAL_GetTick>
 80058b6:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058b8:	e005      	b.n	80058c6 <HAL_RCC_OscConfig+0x172>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058ba:	f7fe fac9 	bl	8003e50 <HAL_GetTick>
 80058be:	1b80      	subs	r0, r0, r6
 80058c0:	2802      	cmp	r0, #2
 80058c2:	f200 80b7 	bhi.w	8005a34 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058c6:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80058ca:	079b      	lsls	r3, r3, #30
 80058cc:	d5f5      	bpl.n	80058ba <HAL_RCC_OscConfig+0x166>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80058ce:	69e3      	ldr	r3, [r4, #28]
 80058d0:	b1f3      	cbz	r3, 8005910 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058d2:	4d4c      	ldr	r5, [pc, #304]	@ (8005a04 <HAL_RCC_OscConfig+0x2b0>)
 80058d4:	68aa      	ldr	r2, [r5, #8]
 80058d6:	f002 020c 	and.w	r2, r2, #12
 80058da:	2a0c      	cmp	r2, #12
 80058dc:	f000 8147 	beq.w	8005b6e <HAL_RCC_OscConfig+0x41a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80058e0:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058e2:	682b      	ldr	r3, [r5, #0]
 80058e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058e8:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80058ea:	f000 80f5 	beq.w	8005ad8 <HAL_RCC_OscConfig+0x384>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ee:	f7fe faaf 	bl	8003e50 <HAL_GetTick>
 80058f2:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058f4:	e005      	b.n	8005902 <HAL_RCC_OscConfig+0x1ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f6:	f7fe faab 	bl	8003e50 <HAL_GetTick>
 80058fa:	1b00      	subs	r0, r0, r4
 80058fc:	2802      	cmp	r0, #2
 80058fe:	f200 8099 	bhi.w	8005a34 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005902:	682b      	ldr	r3, [r5, #0]
 8005904:	019b      	lsls	r3, r3, #6
 8005906:	d4f6      	bmi.n	80058f6 <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005908:	68ea      	ldr	r2, [r5, #12]
 800590a:	4b41      	ldr	r3, [pc, #260]	@ (8005a10 <HAL_RCC_OscConfig+0x2bc>)
 800590c:	4013      	ands	r3, r2
 800590e:	60eb      	str	r3, [r5, #12]
      }
    }
  }
  }

  return HAL_OK;
 8005910:	2000      	movs	r0, #0
}
 8005912:	b002      	add	sp, #8
 8005914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005918:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800591c:	2903      	cmp	r1, #3
 800591e:	f43f af2e 	beq.w	800577e <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005922:	6863      	ldr	r3, [r4, #4]
 8005924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005928:	d055      	beq.n	80059d6 <HAL_RCC_OscConfig+0x282>
 800592a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800592e:	f000 80c4 	beq.w	8005aba <HAL_RCC_OscConfig+0x366>
 8005932:	4d34      	ldr	r5, [pc, #208]	@ (8005a04 <HAL_RCC_OscConfig+0x2b0>)
 8005934:	682a      	ldr	r2, [r5, #0]
 8005936:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800593a:	602a      	str	r2, [r5, #0]
 800593c:	682a      	ldr	r2, [r5, #0]
 800593e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005942:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005944:	2b00      	cmp	r3, #0
 8005946:	d14b      	bne.n	80059e0 <HAL_RCC_OscConfig+0x28c>
        tickstart = HAL_GetTick();
 8005948:	f7fe fa82 	bl	8003e50 <HAL_GetTick>
 800594c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800594e:	e004      	b.n	800595a <HAL_RCC_OscConfig+0x206>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005950:	f7fe fa7e 	bl	8003e50 <HAL_GetTick>
 8005954:	1b80      	subs	r0, r0, r6
 8005956:	2864      	cmp	r0, #100	@ 0x64
 8005958:	d86c      	bhi.n	8005a34 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800595a:	682b      	ldr	r3, [r5, #0]
 800595c:	0399      	lsls	r1, r3, #14
 800595e:	d4f7      	bmi.n	8005950 <HAL_RCC_OscConfig+0x1fc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005960:	6823      	ldr	r3, [r4, #0]
 8005962:	079a      	lsls	r2, r3, #30
 8005964:	f57f af38 	bpl.w	80057d8 <HAL_RCC_OscConfig+0x84>
 8005968:	e713      	b.n	8005792 <HAL_RCC_OscConfig+0x3e>
      __HAL_RCC_LSI_DISABLE();
 800596a:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800596e:	f023 0301 	bic.w	r3, r3, #1
 8005972:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8005976:	f7fe fa6b 	bl	8003e50 <HAL_GetTick>
 800597a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800597c:	e004      	b.n	8005988 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800597e:	f7fe fa67 	bl	8003e50 <HAL_GetTick>
 8005982:	1b80      	subs	r0, r0, r6
 8005984:	2802      	cmp	r0, #2
 8005986:	d855      	bhi.n	8005a34 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005988:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800598c:	079f      	lsls	r7, r3, #30
 800598e:	d4f6      	bmi.n	800597e <HAL_RCC_OscConfig+0x22a>
 8005990:	e73d      	b.n	800580e <HAL_RCC_OscConfig+0xba>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005992:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005996:	2a02      	cmp	r2, #2
 8005998:	f43f af06 	beq.w	80057a8 <HAL_RCC_OscConfig+0x54>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800599c:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 800599e:	4d19      	ldr	r5, [pc, #100]	@ (8005a04 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d037      	beq.n	8005a14 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80059ac:	f7fe fa50 	bl	8003e50 <HAL_GetTick>
 80059b0:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059b2:	e004      	b.n	80059be <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059b4:	f7fe fa4c 	bl	8003e50 <HAL_GetTick>
 80059b8:	1b80      	subs	r0, r0, r6
 80059ba:	2802      	cmp	r0, #2
 80059bc:	d83a      	bhi.n	8005a34 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059be:	682b      	ldr	r3, [r5, #0]
 80059c0:	055f      	lsls	r7, r3, #21
 80059c2:	d5f7      	bpl.n	80059b4 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059c4:	686b      	ldr	r3, [r5, #4]
 80059c6:	6922      	ldr	r2, [r4, #16]
 80059c8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80059cc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80059d0:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	e700      	b.n	80057d8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059d6:	4a0b      	ldr	r2, [pc, #44]	@ (8005a04 <HAL_RCC_OscConfig+0x2b0>)
 80059d8:	6813      	ldr	r3, [r2, #0]
 80059da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059de:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80059e0:	f7fe fa36 	bl	8003e50 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059e4:	4e07      	ldr	r6, [pc, #28]	@ (8005a04 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80059e6:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059e8:	e004      	b.n	80059f4 <HAL_RCC_OscConfig+0x2a0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059ea:	f7fe fa31 	bl	8003e50 <HAL_GetTick>
 80059ee:	1b40      	subs	r0, r0, r5
 80059f0:	2864      	cmp	r0, #100	@ 0x64
 80059f2:	d81f      	bhi.n	8005a34 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059f4:	6833      	ldr	r3, [r6, #0]
 80059f6:	039f      	lsls	r7, r3, #14
 80059f8:	d5f7      	bpl.n	80059ea <HAL_RCC_OscConfig+0x296>
 80059fa:	e7b1      	b.n	8005960 <HAL_RCC_OscConfig+0x20c>
    return HAL_ERROR;
 80059fc:	2001      	movs	r0, #1
}
 80059fe:	b002      	add	sp, #8
 8005a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a04:	40021000 	.word	0x40021000
 8005a08:	20000484 	.word	0x20000484
 8005a0c:	40007000 	.word	0x40007000
 8005a10:	feeefffc 	.word	0xfeeefffc
        __HAL_RCC_HSI_DISABLE();
 8005a14:	682b      	ldr	r3, [r5, #0]
 8005a16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a1a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005a1c:	f7fe fa18 	bl	8003e50 <HAL_GetTick>
 8005a20:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a22:	682b      	ldr	r3, [r5, #0]
 8005a24:	0559      	lsls	r1, r3, #21
 8005a26:	f57f aed6 	bpl.w	80057d6 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a2a:	f7fe fa11 	bl	8003e50 <HAL_GetTick>
 8005a2e:	1b80      	subs	r0, r0, r6
 8005a30:	2802      	cmp	r0, #2
 8005a32:	d9f6      	bls.n	8005a22 <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8005a34:	2003      	movs	r0, #3
}
 8005a36:	b002      	add	sp, #8
 8005a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8005a3c:	2500      	movs	r5, #0
 8005a3e:	e6f8      	b.n	8005832 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a40:	4a65      	ldr	r2, [pc, #404]	@ (8005bd8 <HAL_RCC_OscConfig+0x484>)
 8005a42:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005a46:	f043 0301 	orr.w	r3, r3, #1
 8005a4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8005a4e:	f7fe f9ff 	bl	8003e50 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a52:	4f61      	ldr	r7, [pc, #388]	@ (8005bd8 <HAL_RCC_OscConfig+0x484>)
      tickstart = HAL_GetTick();
 8005a54:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a56:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a5a:	e004      	b.n	8005a66 <HAL_RCC_OscConfig+0x312>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a5c:	f7fe f9f8 	bl	8003e50 <HAL_GetTick>
 8005a60:	1b80      	subs	r0, r0, r6
 8005a62:	4540      	cmp	r0, r8
 8005a64:	d8e6      	bhi.n	8005a34 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a66:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a6a:	079b      	lsls	r3, r3, #30
 8005a6c:	d5f6      	bpl.n	8005a5c <HAL_RCC_OscConfig+0x308>
 8005a6e:	e70c      	b.n	800588a <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_HSI48_DISABLE();
 8005a70:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8005a74:	f023 0301 	bic.w	r3, r3, #1
 8005a78:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8005a7c:	f7fe f9e8 	bl	8003e50 <HAL_GetTick>
 8005a80:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a82:	e004      	b.n	8005a8e <HAL_RCC_OscConfig+0x33a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a84:	f7fe f9e4 	bl	8003e50 <HAL_GetTick>
 8005a88:	1b80      	subs	r0, r0, r6
 8005a8a:	2802      	cmp	r0, #2
 8005a8c:	d8d2      	bhi.n	8005a34 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a8e:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8005a92:	079f      	lsls	r7, r3, #30
 8005a94:	d4f6      	bmi.n	8005a84 <HAL_RCC_OscConfig+0x330>
 8005a96:	e71a      	b.n	80058ce <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a98:	6833      	ldr	r3, [r6, #0]
 8005a9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a9e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005aa0:	f7fe f9d6 	bl	8003e50 <HAL_GetTick>
 8005aa4:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005aa6:	6833      	ldr	r3, [r6, #0]
 8005aa8:	05da      	lsls	r2, r3, #23
 8005aaa:	f53f aec7 	bmi.w	800583c <HAL_RCC_OscConfig+0xe8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aae:	f7fe f9cf 	bl	8003e50 <HAL_GetTick>
 8005ab2:	1bc0      	subs	r0, r0, r7
 8005ab4:	2802      	cmp	r0, #2
 8005ab6:	d9f6      	bls.n	8005aa6 <HAL_RCC_OscConfig+0x352>
 8005ab8:	e7bc      	b.n	8005a34 <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005abe:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005ad0:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ad2:	e785      	b.n	80059e0 <HAL_RCC_OscConfig+0x28c>
    return HAL_ERROR;
 8005ad4:	2001      	movs	r0, #1
}
 8005ad6:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8005ad8:	f7fe f9ba 	bl	8003e50 <HAL_GetTick>
 8005adc:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ade:	e004      	b.n	8005aea <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ae0:	f7fe f9b6 	bl	8003e50 <HAL_GetTick>
 8005ae4:	1b80      	subs	r0, r0, r6
 8005ae6:	2802      	cmp	r0, #2
 8005ae8:	d8a4      	bhi.n	8005a34 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005aea:	682b      	ldr	r3, [r5, #0]
 8005aec:	0199      	lsls	r1, r3, #6
 8005aee:	d4f7      	bmi.n	8005ae0 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005af0:	68e9      	ldr	r1, [r5, #12]
 8005af2:	4b3a      	ldr	r3, [pc, #232]	@ (8005bdc <HAL_RCC_OscConfig+0x488>)
 8005af4:	6a22      	ldr	r2, [r4, #32]
 8005af6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005af8:	400b      	ands	r3, r1
 8005afa:	4313      	orrs	r3, r2
 8005afc:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	@ 0x28
 8005b00:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005b04:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8005b08:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	@ 0x30
 8005b0c:	3801      	subs	r0, #1
 8005b0e:	0849      	lsrs	r1, r1, #1
 8005b10:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005b14:	3901      	subs	r1, #1
 8005b16:	0852      	lsrs	r2, r2, #1
 8005b18:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8005b1c:	3a01      	subs	r2, #1
 8005b1e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8005b22:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8005b24:	682b      	ldr	r3, [r5, #0]
 8005b26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b2a:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b2c:	68eb      	ldr	r3, [r5, #12]
 8005b2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b32:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8005b34:	f7fe f98c 	bl	8003e50 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b38:	4d27      	ldr	r5, [pc, #156]	@ (8005bd8 <HAL_RCC_OscConfig+0x484>)
        tickstart = HAL_GetTick();
 8005b3a:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b3c:	e005      	b.n	8005b4a <HAL_RCC_OscConfig+0x3f6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b3e:	f7fe f987 	bl	8003e50 <HAL_GetTick>
 8005b42:	1b00      	subs	r0, r0, r4
 8005b44:	2802      	cmp	r0, #2
 8005b46:	f63f af75 	bhi.w	8005a34 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b4a:	682b      	ldr	r3, [r5, #0]
 8005b4c:	019a      	lsls	r2, r3, #6
 8005b4e:	d5f6      	bpl.n	8005b3e <HAL_RCC_OscConfig+0x3ea>
 8005b50:	e6de      	b.n	8005910 <HAL_RCC_OscConfig+0x1bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b52:	4b21      	ldr	r3, [pc, #132]	@ (8005bd8 <HAL_RCC_OscConfig+0x484>)
 8005b54:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005b58:	f042 0204 	orr.w	r2, r2, #4
 8005b5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8005b60:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005b64:	f042 0201 	orr.w	r2, r2, #1
 8005b68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b6c:	e76f      	b.n	8005a4e <HAL_RCC_OscConfig+0x2fa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	f43f af44 	beq.w	80059fc <HAL_RCC_OscConfig+0x2a8>
      temp_pllckcfg = RCC->PLLCFGR;
 8005b74:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b76:	6a22      	ldr	r2, [r4, #32]
 8005b78:	f003 0103 	and.w	r1, r3, #3
 8005b7c:	4291      	cmp	r1, r2
 8005b7e:	f47f af3d 	bne.w	80059fc <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b82:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005b84:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005b88:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b8a:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8005b8e:	f47f af35 	bne.w	80059fc <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b92:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005b94:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b98:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005b9c:	f47f af2e 	bne.w	80059fc <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ba0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005ba2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ba6:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8005baa:	f47f af27 	bne.w	80059fc <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bae:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005bb0:	0852      	lsrs	r2, r2, #1
 8005bb2:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8005bb6:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005bb8:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8005bbc:	f47f af1e 	bne.w	80059fc <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005bc0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8005bc2:	0852      	lsrs	r2, r2, #1
 8005bc4:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8005bc8:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bca:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8005bce:	bf14      	ite	ne
 8005bd0:	2001      	movne	r0, #1
 8005bd2:	2000      	moveq	r0, #0
 8005bd4:	e69d      	b.n	8005912 <HAL_RCC_OscConfig+0x1be>
 8005bd6:	bf00      	nop
 8005bd8:	40021000 	.word	0x40021000
 8005bdc:	019f800c 	.word	0x019f800c

08005be0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005be0:	4b18      	ldr	r3, [pc, #96]	@ (8005c44 <HAL_RCC_GetSysClockFreq+0x64>)
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	f002 020c 	and.w	r2, r2, #12
 8005be8:	2a04      	cmp	r2, #4
 8005bea:	d026      	beq.n	8005c3a <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005bec:	689a      	ldr	r2, [r3, #8]
 8005bee:	f002 020c 	and.w	r2, r2, #12
 8005bf2:	2a08      	cmp	r2, #8
 8005bf4:	d023      	beq.n	8005c3e <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	f002 020c 	and.w	r2, r2, #12
 8005bfc:	2a0c      	cmp	r2, #12
 8005bfe:	d001      	beq.n	8005c04 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8005c00:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8005c02:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c04:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c06:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c08:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c0a:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8005c0e:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c10:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c14:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c18:	bf0c      	ite	eq
 8005c1a:	4b0b      	ldreq	r3, [pc, #44]	@ (8005c48 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c1c:	4b0b      	ldrne	r3, [pc, #44]	@ (8005c4c <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c1e:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c20:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c24:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c28:	4b06      	ldr	r3, [pc, #24]	@ (8005c44 <HAL_RCC_GetSysClockFreq+0x64>)
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8005c30:	3301      	adds	r3, #1
 8005c32:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8005c34:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8005c38:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8005c3a:	4804      	ldr	r0, [pc, #16]	@ (8005c4c <HAL_RCC_GetSysClockFreq+0x6c>)
 8005c3c:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8005c3e:	4802      	ldr	r0, [pc, #8]	@ (8005c48 <HAL_RCC_GetSysClockFreq+0x68>)
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	40021000 	.word	0x40021000
 8005c48:	016e3600 	.word	0x016e3600
 8005c4c:	00f42400 	.word	0x00f42400

08005c50 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005c50:	2800      	cmp	r0, #0
 8005c52:	f000 80ee 	beq.w	8005e32 <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c56:	4a78      	ldr	r2, [pc, #480]	@ (8005e38 <HAL_RCC_ClockConfig+0x1e8>)
{
 8005c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c5c:	6813      	ldr	r3, [r2, #0]
 8005c5e:	f003 030f 	and.w	r3, r3, #15
 8005c62:	428b      	cmp	r3, r1
 8005c64:	460d      	mov	r5, r1
 8005c66:	4604      	mov	r4, r0
 8005c68:	d20c      	bcs.n	8005c84 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c6a:	6813      	ldr	r3, [r2, #0]
 8005c6c:	f023 030f 	bic.w	r3, r3, #15
 8005c70:	430b      	orrs	r3, r1
 8005c72:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c74:	6813      	ldr	r3, [r2, #0]
 8005c76:	f003 030f 	and.w	r3, r3, #15
 8005c7a:	428b      	cmp	r3, r1
 8005c7c:	d002      	beq.n	8005c84 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8005c7e:	2001      	movs	r0, #1
}
 8005c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c84:	6823      	ldr	r3, [r4, #0]
 8005c86:	07df      	lsls	r7, r3, #31
 8005c88:	d569      	bpl.n	8005d5e <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c8a:	6867      	ldr	r7, [r4, #4]
 8005c8c:	2f03      	cmp	r7, #3
 8005c8e:	f000 80a0 	beq.w	8005dd2 <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c92:	4b6a      	ldr	r3, [pc, #424]	@ (8005e3c <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c94:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c96:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c98:	f000 8097 	beq.w	8005dca <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c9c:	055b      	lsls	r3, r3, #21
 8005c9e:	d5ee      	bpl.n	8005c7e <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005ca0:	f7ff ff9e 	bl	8005be0 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8005ca4:	4b66      	ldr	r3, [pc, #408]	@ (8005e40 <HAL_RCC_ClockConfig+0x1f0>)
 8005ca6:	4298      	cmp	r0, r3
 8005ca8:	f240 80c0 	bls.w	8005e2c <HAL_RCC_ClockConfig+0x1dc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005cac:	4a63      	ldr	r2, [pc, #396]	@ (8005e3c <HAL_RCC_ClockConfig+0x1ec>)
 8005cae:	6893      	ldr	r3, [r2, #8]
 8005cb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cb8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005cba:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cbe:	4e5f      	ldr	r6, [pc, #380]	@ (8005e3c <HAL_RCC_ClockConfig+0x1ec>)
 8005cc0:	68b3      	ldr	r3, [r6, #8]
 8005cc2:	f023 0303 	bic.w	r3, r3, #3
 8005cc6:	433b      	orrs	r3, r7
 8005cc8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8005cca:	f7fe f8c1 	bl	8003e50 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cce:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8005cd2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cd4:	e004      	b.n	8005ce0 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cd6:	f7fe f8bb 	bl	8003e50 <HAL_GetTick>
 8005cda:	1bc0      	subs	r0, r0, r7
 8005cdc:	4540      	cmp	r0, r8
 8005cde:	d871      	bhi.n	8005dc4 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ce0:	68b3      	ldr	r3, [r6, #8]
 8005ce2:	6862      	ldr	r2, [r4, #4]
 8005ce4:	f003 030c 	and.w	r3, r3, #12
 8005ce8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005cec:	d1f3      	bne.n	8005cd6 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	079f      	lsls	r7, r3, #30
 8005cf2:	d436      	bmi.n	8005d62 <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8005cf4:	f1b9 0f00 	cmp.w	r9, #0
 8005cf8:	d003      	beq.n	8005d02 <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005cfa:	68b3      	ldr	r3, [r6, #8]
 8005cfc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d00:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d02:	4e4d      	ldr	r6, [pc, #308]	@ (8005e38 <HAL_RCC_ClockConfig+0x1e8>)
 8005d04:	6833      	ldr	r3, [r6, #0]
 8005d06:	f003 030f 	and.w	r3, r3, #15
 8005d0a:	42ab      	cmp	r3, r5
 8005d0c:	d846      	bhi.n	8005d9c <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	075a      	lsls	r2, r3, #29
 8005d12:	d506      	bpl.n	8005d22 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d14:	4949      	ldr	r1, [pc, #292]	@ (8005e3c <HAL_RCC_ClockConfig+0x1ec>)
 8005d16:	68e0      	ldr	r0, [r4, #12]
 8005d18:	688a      	ldr	r2, [r1, #8]
 8005d1a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005d1e:	4302      	orrs	r2, r0
 8005d20:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d22:	071b      	lsls	r3, r3, #28
 8005d24:	d507      	bpl.n	8005d36 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d26:	4a45      	ldr	r2, [pc, #276]	@ (8005e3c <HAL_RCC_ClockConfig+0x1ec>)
 8005d28:	6921      	ldr	r1, [r4, #16]
 8005d2a:	6893      	ldr	r3, [r2, #8]
 8005d2c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8005d30:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005d34:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d36:	f7ff ff53 	bl	8005be0 <HAL_RCC_GetSysClockFreq>
 8005d3a:	4a40      	ldr	r2, [pc, #256]	@ (8005e3c <HAL_RCC_ClockConfig+0x1ec>)
 8005d3c:	4c41      	ldr	r4, [pc, #260]	@ (8005e44 <HAL_RCC_ClockConfig+0x1f4>)
 8005d3e:	6892      	ldr	r2, [r2, #8]
 8005d40:	4941      	ldr	r1, [pc, #260]	@ (8005e48 <HAL_RCC_ClockConfig+0x1f8>)
 8005d42:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005d46:	4603      	mov	r3, r0
 8005d48:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8005d4a:	4840      	ldr	r0, [pc, #256]	@ (8005e4c <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d4c:	f002 021f 	and.w	r2, r2, #31
 8005d50:	40d3      	lsrs	r3, r2
 8005d52:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8005d54:	6800      	ldr	r0, [r0, #0]
}
 8005d56:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8005d5a:	f7fe b82f 	b.w	8003dbc <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d5e:	079e      	lsls	r6, r3, #30
 8005d60:	d5cf      	bpl.n	8005d02 <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d62:	0758      	lsls	r0, r3, #29
 8005d64:	d504      	bpl.n	8005d70 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d66:	4935      	ldr	r1, [pc, #212]	@ (8005e3c <HAL_RCC_ClockConfig+0x1ec>)
 8005d68:	688a      	ldr	r2, [r1, #8]
 8005d6a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8005d6e:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d70:	0719      	lsls	r1, r3, #28
 8005d72:	d506      	bpl.n	8005d82 <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005d74:	4a31      	ldr	r2, [pc, #196]	@ (8005e3c <HAL_RCC_ClockConfig+0x1ec>)
 8005d76:	6893      	ldr	r3, [r2, #8]
 8005d78:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d7c:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005d80:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d82:	4a2e      	ldr	r2, [pc, #184]	@ (8005e3c <HAL_RCC_ClockConfig+0x1ec>)
 8005d84:	68a1      	ldr	r1, [r4, #8]
 8005d86:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d88:	4e2b      	ldr	r6, [pc, #172]	@ (8005e38 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d8e:	430b      	orrs	r3, r1
 8005d90:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d92:	6833      	ldr	r3, [r6, #0]
 8005d94:	f003 030f 	and.w	r3, r3, #15
 8005d98:	42ab      	cmp	r3, r5
 8005d9a:	d9b8      	bls.n	8005d0e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d9c:	6833      	ldr	r3, [r6, #0]
 8005d9e:	f023 030f 	bic.w	r3, r3, #15
 8005da2:	432b      	orrs	r3, r5
 8005da4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005da6:	f7fe f853 	bl	8003e50 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005daa:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8005dae:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005db0:	6833      	ldr	r3, [r6, #0]
 8005db2:	f003 030f 	and.w	r3, r3, #15
 8005db6:	42ab      	cmp	r3, r5
 8005db8:	d0a9      	beq.n	8005d0e <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dba:	f7fe f849 	bl	8003e50 <HAL_GetTick>
 8005dbe:	1bc0      	subs	r0, r0, r7
 8005dc0:	4540      	cmp	r0, r8
 8005dc2:	d9f5      	bls.n	8005db0 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8005dc4:	2003      	movs	r0, #3
}
 8005dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dca:	039a      	lsls	r2, r3, #14
 8005dcc:	f53f af68 	bmi.w	8005ca0 <HAL_RCC_ClockConfig+0x50>
 8005dd0:	e755      	b.n	8005c7e <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dd2:	4a1a      	ldr	r2, [pc, #104]	@ (8005e3c <HAL_RCC_ClockConfig+0x1ec>)
 8005dd4:	6811      	ldr	r1, [r2, #0]
 8005dd6:	0188      	lsls	r0, r1, #6
 8005dd8:	f57f af51 	bpl.w	8005c7e <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ddc:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005dde:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005de0:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 8005de2:	4e17      	ldr	r6, [pc, #92]	@ (8005e40 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005de4:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8005de8:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005dea:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dee:	bf0c      	ite	eq
 8005df0:	4817      	ldreq	r0, [pc, #92]	@ (8005e50 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005df2:	4818      	ldrne	r0, [pc, #96]	@ (8005e54 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005df4:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005df6:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005dfa:	4810      	ldr	r0, [pc, #64]	@ (8005e3c <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dfc:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8005e00:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e04:	68c1      	ldr	r1, [r0, #12]
 8005e06:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8005e0a:	3101      	adds	r1, #1
 8005e0c:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 8005e0e:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8005e12:	42b2      	cmp	r2, r6
 8005e14:	d90a      	bls.n	8005e2c <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005e16:	6882      	ldr	r2, [r0, #8]
 8005e18:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 8005e1c:	f43f af46 	beq.w	8005cac <HAL_RCC_ClockConfig+0x5c>
 8005e20:	0799      	lsls	r1, r3, #30
 8005e22:	d503      	bpl.n	8005e2c <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005e24:	68a3      	ldr	r3, [r4, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f43f af40 	beq.w	8005cac <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005e2c:	f04f 0900 	mov.w	r9, #0
 8005e30:	e745      	b.n	8005cbe <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 8005e32:	2001      	movs	r0, #1
}
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	40022000 	.word	0x40022000
 8005e3c:	40021000 	.word	0x40021000
 8005e40:	04c4b400 	.word	0x04c4b400
 8005e44:	08008fa4 	.word	0x08008fa4
 8005e48:	2000047c 	.word	0x2000047c
 8005e4c:	20000484 	.word	0x20000484
 8005e50:	016e3600 	.word	0x016e3600
 8005e54:	00f42400 	.word	0x00f42400

08005e58 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8005e58:	4b01      	ldr	r3, [pc, #4]	@ (8005e60 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8005e5a:	6818      	ldr	r0, [r3, #0]
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	2000047c 	.word	0x2000047c

08005e64 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005e64:	4b05      	ldr	r3, [pc, #20]	@ (8005e7c <HAL_RCC_GetPCLK1Freq+0x18>)
 8005e66:	4a06      	ldr	r2, [pc, #24]	@ (8005e80 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005e68:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005e6a:	4906      	ldr	r1, [pc, #24]	@ (8005e84 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005e6c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005e70:	6808      	ldr	r0, [r1, #0]
 8005e72:	5cd3      	ldrb	r3, [r2, r3]
 8005e74:	f003 031f 	and.w	r3, r3, #31
}
 8005e78:	40d8      	lsrs	r0, r3
 8005e7a:	4770      	bx	lr
 8005e7c:	40021000 	.word	0x40021000
 8005e80:	08008f9c 	.word	0x08008f9c
 8005e84:	2000047c 	.word	0x2000047c

08005e88 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005e88:	4b05      	ldr	r3, [pc, #20]	@ (8005ea0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005e8a:	4a06      	ldr	r2, [pc, #24]	@ (8005ea4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005e8c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005e8e:	4906      	ldr	r1, [pc, #24]	@ (8005ea8 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005e90:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005e94:	6808      	ldr	r0, [r1, #0]
 8005e96:	5cd3      	ldrb	r3, [r2, r3]
 8005e98:	f003 031f 	and.w	r3, r3, #31
}
 8005e9c:	40d8      	lsrs	r0, r3
 8005e9e:	4770      	bx	lr
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	08008f9c 	.word	0x08008f9c
 8005ea8:	2000047c 	.word	0x2000047c

08005eac <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005eac:	4a02      	ldr	r2, [pc, #8]	@ (8005eb8 <HAL_RCC_EnableCSS+0xc>)
 8005eae:	6813      	ldr	r3, [r2, #0]
 8005eb0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005eb4:	6013      	str	r3, [r2, #0]
}
 8005eb6:	4770      	bx	lr
 8005eb8:	40021000 	.word	0x40021000

08005ebc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ec0:	6803      	ldr	r3, [r0, #0]
{
 8005ec2:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ec4:	f413 2000 	ands.w	r0, r3, #524288	@ 0x80000
{
 8005ec8:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005eca:	d041      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x94>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ecc:	4bab      	ldr	r3, [pc, #684]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005ece:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005ed0:	00d5      	lsls	r5, r2, #3
 8005ed2:	f140 8129 	bpl.w	8006128 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    FlagStatus       pwrclkchanged = RESET;
 8005ed6:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ed8:	4da9      	ldr	r5, [pc, #676]	@ (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005eda:	682b      	ldr	r3, [r5, #0]
 8005edc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ee0:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ee2:	f7fd ffb5 	bl	8003e50 <HAL_GetTick>
 8005ee6:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ee8:	e004      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x38>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eea:	f7fd ffb1 	bl	8003e50 <HAL_GetTick>
 8005eee:	1b83      	subs	r3, r0, r6
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d828      	bhi.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ef4:	682b      	ldr	r3, [r5, #0]
 8005ef6:	05d8      	lsls	r0, r3, #23
 8005ef8:	d5f7      	bpl.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005efa:	4da0      	ldr	r5, [pc, #640]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005efc:	6d22      	ldr	r2, [r4, #80]	@ 0x50
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005efe:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f02:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8005f06:	f000 8159 	beq.w	80061bc <HAL_RCCEx_PeriphCLKConfig+0x300>
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	f000 8156 	beq.w	80061bc <HAL_RCCEx_PeriphCLKConfig+0x300>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f10:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f14:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8005f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f1c:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f20:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8005f24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f28:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f2c:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f30:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8005f32:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f36:	f140 8141 	bpl.w	80061bc <HAL_RCCEx_PeriphCLKConfig+0x300>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f3a:	f7fd ff89 	bl	8003e50 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f3e:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8005f42:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f44:	e135      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f46:	2003      	movs	r0, #3
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f48:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8005f4a:	2f00      	cmp	r7, #0
 8005f4c:	f040 80f7 	bne.w	800613e <HAL_RCCEx_PeriphCLKConfig+0x282>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f50:	07dd      	lsls	r5, r3, #31
 8005f52:	d508      	bpl.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f54:	4989      	ldr	r1, [pc, #548]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005f56:	6865      	ldr	r5, [r4, #4]
 8005f58:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005f5c:	f022 0203 	bic.w	r2, r2, #3
 8005f60:	432a      	orrs	r2, r5
 8005f62:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f66:	0799      	lsls	r1, r3, #30
 8005f68:	d508      	bpl.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f6a:	4984      	ldr	r1, [pc, #528]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005f6c:	68a5      	ldr	r5, [r4, #8]
 8005f6e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005f72:	f022 020c 	bic.w	r2, r2, #12
 8005f76:	432a      	orrs	r2, r5
 8005f78:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f7c:	075a      	lsls	r2, r3, #29
 8005f7e:	d508      	bpl.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f80:	497e      	ldr	r1, [pc, #504]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005f82:	68e5      	ldr	r5, [r4, #12]
 8005f84:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005f88:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8005f8c:	432a      	orrs	r2, r5
 8005f8e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f92:	071f      	lsls	r7, r3, #28
 8005f94:	d508      	bpl.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f96:	4979      	ldr	r1, [pc, #484]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005f98:	6925      	ldr	r5, [r4, #16]
 8005f9a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005f9e:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8005fa2:	432a      	orrs	r2, r5
 8005fa4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005fa8:	06de      	lsls	r6, r3, #27
 8005faa:	d508      	bpl.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005fac:	4973      	ldr	r1, [pc, #460]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005fae:	6965      	ldr	r5, [r4, #20]
 8005fb0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005fb4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005fb8:	432a      	orrs	r2, r5
 8005fba:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fbe:	069d      	lsls	r5, r3, #26
 8005fc0:	d508      	bpl.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fc2:	496e      	ldr	r1, [pc, #440]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005fc4:	69a5      	ldr	r5, [r4, #24]
 8005fc6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005fca:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005fce:	432a      	orrs	r2, r5
 8005fd0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fd4:	0659      	lsls	r1, r3, #25
 8005fd6:	d508      	bpl.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fd8:	4968      	ldr	r1, [pc, #416]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005fda:	69e5      	ldr	r5, [r4, #28]
 8005fdc:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005fe0:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8005fe4:	432a      	orrs	r2, r5
 8005fe6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fea:	061a      	lsls	r2, r3, #24
 8005fec:	d508      	bpl.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005fee:	4963      	ldr	r1, [pc, #396]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005ff0:	6a25      	ldr	r5, [r4, #32]
 8005ff2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005ff6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005ffa:	432a      	orrs	r2, r5
 8005ffc:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006000:	05df      	lsls	r7, r3, #23
 8006002:	d508      	bpl.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006004:	495d      	ldr	r1, [pc, #372]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006006:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8006008:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800600c:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8006010:	432a      	orrs	r2, r5
 8006012:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006016:	039e      	lsls	r6, r3, #14
 8006018:	d508      	bpl.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800601a:	4958      	ldr	r1, [pc, #352]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800601c:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 800601e:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 8006022:	f022 0203 	bic.w	r2, r2, #3
 8006026:	432a      	orrs	r2, r5
 8006028:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800602c:	059d      	lsls	r5, r3, #22
 800602e:	d508      	bpl.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006030:	4952      	ldr	r1, [pc, #328]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006032:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8006034:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006038:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 800603c:	432a      	orrs	r2, r5
 800603e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006042:	0559      	lsls	r1, r3, #21
 8006044:	d50b      	bpl.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006046:	494d      	ldr	r1, [pc, #308]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006048:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800604a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800604e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8006052:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006054:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006058:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800605c:	d075      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x28e>

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800605e:	051a      	lsls	r2, r3, #20
 8006060:	d50b      	bpl.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006062:	4946      	ldr	r1, [pc, #280]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006064:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8006066:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800606a:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800606e:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006070:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006074:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006078:	d06c      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x298>

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800607a:	04df      	lsls	r7, r3, #19
 800607c:	d50b      	bpl.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800607e:	493f      	ldr	r1, [pc, #252]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006080:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8006082:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006086:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800608a:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800608c:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006090:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006094:	d063      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006096:	049e      	lsls	r6, r3, #18
 8006098:	d50b      	bpl.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800609a:	4938      	ldr	r1, [pc, #224]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800609c:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800609e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80060a2:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80060a6:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80060a8:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060ac:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80060b0:	d05a      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80060b2:	045d      	lsls	r5, r3, #17
 80060b4:	d50b      	bpl.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060b6:	4931      	ldr	r1, [pc, #196]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80060b8:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 80060ba:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80060be:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80060c2:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80060c4:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060c8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80060cc:	d051      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80060ce:	0419      	lsls	r1, r3, #16
 80060d0:	d50b      	bpl.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80060d2:	492a      	ldr	r1, [pc, #168]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80060d4:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 80060d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80060da:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80060de:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80060e0:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80060e4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80060e8:	d04c      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80060ea:	03da      	lsls	r2, r3, #15
 80060ec:	d50b      	bpl.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80060ee:	4923      	ldr	r1, [pc, #140]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80060f0:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 80060f2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80060f6:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 80060fa:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80060fc:	f1b5 4f80 	cmp.w	r5, #1073741824	@ 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006100:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006104:	d043      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006106:	035b      	lsls	r3, r3, #13
 8006108:	d50b      	bpl.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800610a:	4a1c      	ldr	r2, [pc, #112]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800610c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800610e:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8006112:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006116:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006118:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800611c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006120:	d03a      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  }

#endif /* QUADSPI */

  return status;
}
 8006122:	b002      	add	sp, #8
 8006124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8006128:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800612a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800612e:	659a      	str	r2, [r3, #88]	@ 0x58
 8006130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006136:	9301      	str	r3, [sp, #4]
 8006138:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800613a:	2701      	movs	r7, #1
 800613c:	e6cc      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800613e:	490f      	ldr	r1, [pc, #60]	@ (800617c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006140:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8006142:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8006146:	658a      	str	r2, [r1, #88]	@ 0x58
 8006148:	e702      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x94>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800614a:	68ca      	ldr	r2, [r1, #12]
 800614c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006150:	60ca      	str	r2, [r1, #12]
 8006152:	e784      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006154:	68ca      	ldr	r2, [r1, #12]
 8006156:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800615a:	60ca      	str	r2, [r1, #12]
 800615c:	e78d      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x1be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800615e:	68ca      	ldr	r2, [r1, #12]
 8006160:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006164:	60ca      	str	r2, [r1, #12]
 8006166:	e796      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006168:	68ca      	ldr	r2, [r1, #12]
 800616a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800616e:	60ca      	str	r2, [r1, #12]
 8006170:	e79f      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006172:	68ca      	ldr	r2, [r1, #12]
 8006174:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8006178:	60ca      	str	r2, [r1, #12]
 800617a:	e7a8      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x212>
 800617c:	40021000 	.word	0x40021000
 8006180:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006184:	68ca      	ldr	r2, [r1, #12]
 8006186:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800618a:	60ca      	str	r2, [r1, #12]
 800618c:	e7ad      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x22e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800618e:	68ca      	ldr	r2, [r1, #12]
 8006190:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006194:	60ca      	str	r2, [r1, #12]
 8006196:	e7b6      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006198:	68d3      	ldr	r3, [r2, #12]
 800619a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800619e:	60d3      	str	r3, [r2, #12]
}
 80061a0:	b002      	add	sp, #8
 80061a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061a6:	f7fd fe53 	bl	8003e50 <HAL_GetTick>
 80061aa:	1b80      	subs	r0, r0, r6
 80061ac:	4540      	cmp	r0, r8
 80061ae:	f63f aeca 	bhi.w	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061b2:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80061b6:	079b      	lsls	r3, r3, #30
 80061b8:	d5f5      	bpl.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061ba:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80061bc:	4904      	ldr	r1, [pc, #16]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80061be:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 80061c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061c6:	4313      	orrs	r3, r2
 80061c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061cc:	2000      	movs	r0, #0
 80061ce:	e6bb      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 80061d0:	40021000 	.word	0x40021000

080061d4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061d4:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061d6:	6a02      	ldr	r2, [r0, #32]
 80061d8:	f022 0201 	bic.w	r2, r2, #1
{
 80061dc:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061de:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061e2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061e4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061e6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80061ea:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80061ee:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061f0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80061f2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80061f6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061f8:	4d15      	ldr	r5, [pc, #84]	@ (8006250 <TIM_OC1_SetConfig+0x7c>)
 80061fa:	42a8      	cmp	r0, r5
 80061fc:	d013      	beq.n	8006226 <TIM_OC1_SetConfig+0x52>
 80061fe:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8006202:	42a8      	cmp	r0, r5
 8006204:	d00f      	beq.n	8006226 <TIM_OC1_SetConfig+0x52>
 8006206:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 800620a:	42a8      	cmp	r0, r5
 800620c:	d00b      	beq.n	8006226 <TIM_OC1_SetConfig+0x52>
 800620e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006212:	42a8      	cmp	r0, r5
 8006214:	d007      	beq.n	8006226 <TIM_OC1_SetConfig+0x52>
 8006216:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800621a:	42a8      	cmp	r0, r5
 800621c:	d003      	beq.n	8006226 <TIM_OC1_SetConfig+0x52>
 800621e:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8006222:	42a8      	cmp	r0, r5
 8006224:	d10d      	bne.n	8006242 <TIM_OC1_SetConfig+0x6e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006226:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8006228:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800622c:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800622e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006232:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8006236:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800623a:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800623e:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006242:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006244:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006246:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006248:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 800624a:	6341      	str	r1, [r0, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 800624c:	6203      	str	r3, [r0, #32]
}
 800624e:	4770      	bx	lr
 8006250:	40012c00 	.word	0x40012c00

08006254 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006254:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006256:	6a02      	ldr	r2, [r0, #32]
 8006258:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
{
 800625c:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800625e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006260:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006262:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006264:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006266:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800626a:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800626e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006270:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8006272:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006276:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800627a:	4d17      	ldr	r5, [pc, #92]	@ (80062d8 <TIM_OC3_SetConfig+0x84>)
 800627c:	42a8      	cmp	r0, r5
 800627e:	d014      	beq.n	80062aa <TIM_OC3_SetConfig+0x56>
 8006280:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8006284:	42a8      	cmp	r0, r5
 8006286:	d010      	beq.n	80062aa <TIM_OC3_SetConfig+0x56>
 8006288:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 800628c:	42a8      	cmp	r0, r5
 800628e:	d00c      	beq.n	80062aa <TIM_OC3_SetConfig+0x56>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006290:	f5a5 5580 	sub.w	r5, r5, #4096	@ 0x1000
 8006294:	42a8      	cmp	r0, r5
 8006296:	d00f      	beq.n	80062b8 <TIM_OC3_SetConfig+0x64>
 8006298:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800629c:	42a8      	cmp	r0, r5
 800629e:	d00b      	beq.n	80062b8 <TIM_OC3_SetConfig+0x64>
 80062a0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80062a4:	42a8      	cmp	r0, r5
 80062a6:	d10f      	bne.n	80062c8 <TIM_OC3_SetConfig+0x74>
 80062a8:	e006      	b.n	80062b8 <TIM_OC3_SetConfig+0x64>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062aa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80062ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062b0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80062b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062b8:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062bc:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062c0:	ea46 0c05 	orr.w	ip, r6, r5
 80062c4:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062c8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80062ca:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80062cc:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80062ce:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 80062d0:	63c1      	str	r1, [r0, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 80062d2:	6203      	str	r3, [r0, #32]
}
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	40012c00 	.word	0x40012c00

080062dc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062dc:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062de:	6a02      	ldr	r2, [r0, #32]
 80062e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
{
 80062e4:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062e6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ea:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062ec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062ee:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80062f2:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062f6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062fa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80062fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006300:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006304:	4d16      	ldr	r5, [pc, #88]	@ (8006360 <TIM_OC4_SetConfig+0x84>)
 8006306:	42a8      	cmp	r0, r5
 8006308:	d014      	beq.n	8006334 <TIM_OC4_SetConfig+0x58>
 800630a:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800630e:	42a8      	cmp	r0, r5
 8006310:	d010      	beq.n	8006334 <TIM_OC4_SetConfig+0x58>
 8006312:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 8006316:	42a8      	cmp	r0, r5
 8006318:	d00c      	beq.n	8006334 <TIM_OC4_SetConfig+0x58>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800631a:	f5a5 5580 	sub.w	r5, r5, #4096	@ 0x1000
 800631e:	42a8      	cmp	r0, r5
 8006320:	d00f      	beq.n	8006342 <TIM_OC4_SetConfig+0x66>
 8006322:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006326:	42a8      	cmp	r0, r5
 8006328:	d00b      	beq.n	8006342 <TIM_OC4_SetConfig+0x66>
 800632a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800632e:	42a8      	cmp	r0, r5
 8006330:	d10f      	bne.n	8006352 <TIM_OC4_SetConfig+0x76>
 8006332:	e006      	b.n	8006342 <TIM_OC4_SetConfig+0x66>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006334:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8006336:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800633a:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 800633e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006342:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006346:	f424 4440 	bic.w	r4, r4, #49152	@ 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800634a:	ea46 0c05 	orr.w	ip, r6, r5
 800634e:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006352:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006354:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006356:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006358:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 800635a:	6401      	str	r1, [r0, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 800635c:	6203      	str	r3, [r0, #32]
}
 800635e:	4770      	bx	lr
 8006360:	40012c00 	.word	0x40012c00

08006364 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006364:	2800      	cmp	r0, #0
 8006366:	f000 808b 	beq.w	8006480 <HAL_TIM_Base_Init+0x11c>
{
 800636a:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800636c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006370:	4604      	mov	r4, r0
 8006372:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006376:	2b00      	cmp	r3, #0
 8006378:	d07d      	beq.n	8006476 <HAL_TIM_Base_Init+0x112>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800637a:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800637c:	494c      	ldr	r1, [pc, #304]	@ (80064b0 <HAL_TIM_Base_Init+0x14c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800637e:	2302      	movs	r3, #2
 8006380:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006384:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8006386:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006388:	d02c      	beq.n	80063e4 <HAL_TIM_Base_Init+0x80>
 800638a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800638e:	d060      	beq.n	8006452 <HAL_TIM_Base_Init+0xee>
 8006390:	f5a1 3194 	sub.w	r1, r1, #75776	@ 0x12800
 8006394:	428a      	cmp	r2, r1
 8006396:	d05c      	beq.n	8006452 <HAL_TIM_Base_Init+0xee>
 8006398:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800639c:	428a      	cmp	r2, r1
 800639e:	d058      	beq.n	8006452 <HAL_TIM_Base_Init+0xee>
 80063a0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80063a4:	428a      	cmp	r2, r1
 80063a6:	d054      	beq.n	8006452 <HAL_TIM_Base_Init+0xee>
 80063a8:	f501 3194 	add.w	r1, r1, #75776	@ 0x12800
 80063ac:	428a      	cmp	r2, r1
 80063ae:	d019      	beq.n	80063e4 <HAL_TIM_Base_Init+0x80>
 80063b0:	f501 51e0 	add.w	r1, r1, #7168	@ 0x1c00
 80063b4:	428a      	cmp	r2, r1
 80063b6:	d015      	beq.n	80063e4 <HAL_TIM_Base_Init+0x80>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063b8:	f5a1 5180 	sub.w	r1, r1, #4096	@ 0x1000
 80063bc:	428a      	cmp	r2, r1
 80063be:	d061      	beq.n	8006484 <HAL_TIM_Base_Init+0x120>
 80063c0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80063c4:	428a      	cmp	r2, r1
 80063c6:	d05d      	beq.n	8006484 <HAL_TIM_Base_Init+0x120>
 80063c8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80063cc:	428a      	cmp	r2, r1
 80063ce:	d05f      	beq.n	8006490 <HAL_TIM_Base_Init+0x12c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063d0:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 80063d2:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063d4:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063da:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80063dc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063de:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80063e0:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063e2:	e012      	b.n	800640a <HAL_TIM_Base_Init+0xa6>
    tmpcr1 |= Structure->CounterMode;
 80063e4:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063e6:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80063ec:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80063ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063f2:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063f4:	69a1      	ldr	r1, [r4, #24]
 80063f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063fa:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80063fc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063fe:	68e3      	ldr	r3, [r4, #12]
 8006400:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006402:	6863      	ldr	r3, [r4, #4]
 8006404:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006406:	6963      	ldr	r3, [r4, #20]
 8006408:	6313      	str	r3, [r2, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800640a:	2301      	movs	r3, #1
 800640c:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800640e:	6913      	ldr	r3, [r2, #16]
 8006410:	07db      	lsls	r3, r3, #31
 8006412:	d503      	bpl.n	800641c <HAL_TIM_Base_Init+0xb8>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006414:	6913      	ldr	r3, [r2, #16]
 8006416:	f023 0301 	bic.w	r3, r3, #1
 800641a:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800641c:	2301      	movs	r3, #1
 800641e:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006422:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006426:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800642a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800642e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8006432:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006436:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800643a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800643e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006442:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8006446:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800644a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800644e:	2000      	movs	r0, #0
}
 8006450:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8006452:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006454:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006456:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800645a:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800645c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006460:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006462:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006464:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006468:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800646a:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800646c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800646e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006470:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006472:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006474:	e7c9      	b.n	800640a <HAL_TIM_Base_Init+0xa6>
    htim->Lock = HAL_UNLOCKED;
 8006476:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800647a:	f7fd fa65 	bl	8003948 <HAL_TIM_Base_MspInit>
 800647e:	e77c      	b.n	800637a <HAL_TIM_Base_Init+0x16>
    return HAL_ERROR;
 8006480:	2001      	movs	r0, #1
}
 8006482:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006484:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006486:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006488:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800648c:	4303      	orrs	r3, r0
 800648e:	e7b2      	b.n	80063f6 <HAL_TIM_Base_Init+0x92>
 8006490:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006492:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006494:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006498:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800649a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800649e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80064a0:	4904      	ldr	r1, [pc, #16]	@ (80064b4 <HAL_TIM_Base_Init+0x150>)
 80064a2:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064a4:	68e3      	ldr	r3, [r4, #12]
 80064a6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80064a8:	6863      	ldr	r3, [r4, #4]
 80064aa:	628b      	str	r3, [r1, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064ac:	e7ab      	b.n	8006406 <HAL_TIM_Base_Init+0xa2>
 80064ae:	bf00      	nop
 80064b0:	40012c00 	.word	0x40012c00
 80064b4:	40014800 	.word	0x40014800

080064b8 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop

080064bc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80064bc:	2800      	cmp	r0, #0
 80064be:	f000 808b 	beq.w	80065d8 <HAL_TIM_PWM_Init+0x11c>
{
 80064c2:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80064c4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80064c8:	4604      	mov	r4, r0
 80064ca:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d07d      	beq.n	80065ce <HAL_TIM_PWM_Init+0x112>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064d2:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064d4:	494c      	ldr	r1, [pc, #304]	@ (8006608 <HAL_TIM_PWM_Init+0x14c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80064d6:	2302      	movs	r3, #2
 80064d8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064dc:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80064de:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064e0:	d02c      	beq.n	800653c <HAL_TIM_PWM_Init+0x80>
 80064e2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80064e6:	d060      	beq.n	80065aa <HAL_TIM_PWM_Init+0xee>
 80064e8:	f5a1 3194 	sub.w	r1, r1, #75776	@ 0x12800
 80064ec:	428a      	cmp	r2, r1
 80064ee:	d05c      	beq.n	80065aa <HAL_TIM_PWM_Init+0xee>
 80064f0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80064f4:	428a      	cmp	r2, r1
 80064f6:	d058      	beq.n	80065aa <HAL_TIM_PWM_Init+0xee>
 80064f8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80064fc:	428a      	cmp	r2, r1
 80064fe:	d054      	beq.n	80065aa <HAL_TIM_PWM_Init+0xee>
 8006500:	f501 3194 	add.w	r1, r1, #75776	@ 0x12800
 8006504:	428a      	cmp	r2, r1
 8006506:	d019      	beq.n	800653c <HAL_TIM_PWM_Init+0x80>
 8006508:	f501 51e0 	add.w	r1, r1, #7168	@ 0x1c00
 800650c:	428a      	cmp	r2, r1
 800650e:	d015      	beq.n	800653c <HAL_TIM_PWM_Init+0x80>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006510:	f5a1 5180 	sub.w	r1, r1, #4096	@ 0x1000
 8006514:	428a      	cmp	r2, r1
 8006516:	d061      	beq.n	80065dc <HAL_TIM_PWM_Init+0x120>
 8006518:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800651c:	428a      	cmp	r2, r1
 800651e:	d05d      	beq.n	80065dc <HAL_TIM_PWM_Init+0x120>
 8006520:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006524:	428a      	cmp	r2, r1
 8006526:	d05f      	beq.n	80065e8 <HAL_TIM_PWM_Init+0x12c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006528:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 800652a:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800652c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800652e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006532:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8006534:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006536:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006538:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800653a:	e012      	b.n	8006562 <HAL_TIM_PWM_Init+0xa6>
    tmpcr1 |= Structure->CounterMode;
 800653c:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800653e:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006540:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006544:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8006546:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800654a:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800654c:	69a1      	ldr	r1, [r4, #24]
 800654e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006552:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8006554:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006556:	68e3      	ldr	r3, [r4, #12]
 8006558:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800655a:	6863      	ldr	r3, [r4, #4]
 800655c:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800655e:	6963      	ldr	r3, [r4, #20]
 8006560:	6313      	str	r3, [r2, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006562:	2301      	movs	r3, #1
 8006564:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006566:	6913      	ldr	r3, [r2, #16]
 8006568:	07db      	lsls	r3, r3, #31
 800656a:	d503      	bpl.n	8006574 <HAL_TIM_PWM_Init+0xb8>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800656c:	6913      	ldr	r3, [r2, #16]
 800656e:	f023 0301 	bic.w	r3, r3, #1
 8006572:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006574:	2301      	movs	r3, #1
 8006576:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800657a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800657e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006582:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006586:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800658a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800658e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006592:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006596:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800659a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800659e:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80065a2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80065a6:	2000      	movs	r0, #0
}
 80065a8:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 80065aa:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065ac:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80065b2:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80065b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065b8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065ba:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065c0:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065c2:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 80065c4:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80065c6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065c8:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80065ca:	6291      	str	r1, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065cc:	e7c9      	b.n	8006562 <HAL_TIM_PWM_Init+0xa6>
    htim->Lock = HAL_UNLOCKED;
 80065ce:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80065d2:	f7ff ff71 	bl	80064b8 <HAL_TIM_PWM_MspInit>
 80065d6:	e77c      	b.n	80064d2 <HAL_TIM_PWM_Init+0x16>
    return HAL_ERROR;
 80065d8:	2001      	movs	r0, #1
}
 80065da:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065dc:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065de:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80065e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065e4:	4303      	orrs	r3, r0
 80065e6:	e7b2      	b.n	800654e <HAL_TIM_PWM_Init+0x92>
 80065e8:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065ea:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80065ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065f0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065f6:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80065f8:	4904      	ldr	r1, [pc, #16]	@ (800660c <HAL_TIM_PWM_Init+0x150>)
 80065fa:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065fc:	68e3      	ldr	r3, [r4, #12]
 80065fe:	62cb      	str	r3, [r1, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006600:	6863      	ldr	r3, [r4, #4]
 8006602:	628b      	str	r3, [r1, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006604:	e7ab      	b.n	800655e <HAL_TIM_PWM_Init+0xa2>
 8006606:	bf00      	nop
 8006608:	40012c00 	.word	0x40012c00
 800660c:	40014800 	.word	0x40014800

08006610 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006610:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8006614:	2a01      	cmp	r2, #1
 8006616:	d07a      	beq.n	800670e <HAL_TIM_ConfigClockSource+0xfe>
 8006618:	4603      	mov	r3, r0
{
 800661a:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 800661c:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800661e:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 8006620:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8006622:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8006626:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800662a:	6895      	ldr	r5, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800662c:	4c61      	ldr	r4, [pc, #388]	@ (80067b4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800662e:	402c      	ands	r4, r5
  htim->Instance->SMCR = tmpsmcr;
 8006630:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8006632:	680c      	ldr	r4, [r1, #0]
 8006634:	2c70      	cmp	r4, #112	@ 0x70
 8006636:	d06c      	beq.n	8006712 <HAL_TIM_ConfigClockSource+0x102>
 8006638:	d827      	bhi.n	800668a <HAL_TIM_ConfigClockSource+0x7a>
 800663a:	2c50      	cmp	r4, #80	@ 0x50
 800663c:	d079      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x122>
 800663e:	d82d      	bhi.n	800669c <HAL_TIM_ConfigClockSource+0x8c>
 8006640:	2c40      	cmp	r4, #64	@ 0x40
 8006642:	f040 80a0 	bne.w	8006786 <HAL_TIM_ConfigClockSource+0x176>
                               sClockSourceConfig->ClockPolarity,
 8006646:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006648:	68cc      	ldr	r4, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800664a:	6a11      	ldr	r1, [r2, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800664c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8006650:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006652:	6a11      	ldr	r1, [r2, #32]
 8006654:	f021 0101 	bic.w	r1, r1, #1
 8006658:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800665a:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800665c:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006660:	ea41 1104 	orr.w	r1, r1, r4, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006664:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8006666:	6210      	str	r0, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006668:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800666a:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800666e:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006672:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006676:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006678:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800667a:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800667c:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800667e:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006686:	bc30      	pop	{r4, r5}
 8006688:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800668a:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 800668e:	d06a      	beq.n	8006766 <HAL_TIM_ConfigClockSource+0x156>
 8006690:	d821      	bhi.n	80066d6 <HAL_TIM_ConfigClockSource+0xc6>
 8006692:	f5b4 5080 	subs.w	r0, r4, #4096	@ 0x1000
 8006696:	bf18      	it	ne
 8006698:	2001      	movne	r0, #1
 800669a:	e7ee      	b.n	800667a <HAL_TIM_ConfigClockSource+0x6a>
 800669c:	2c60      	cmp	r4, #96	@ 0x60
 800669e:	d1ec      	bne.n	800667a <HAL_TIM_ConfigClockSource+0x6a>
                               sClockSourceConfig->ClockPolarity,
 80066a0:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80066a2:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 80066a4:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066a6:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80066aa:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ae:	6a10      	ldr	r0, [r2, #32]
 80066b0:	f020 0010 	bic.w	r0, r0, #16
 80066b4:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066b6:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066b8:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066bc:	ea40 3004 	orr.w	r0, r0, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80066c0:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 80066c2:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80066c4:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80066c6:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80066ca:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066ce:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 80066d2:	6091      	str	r1, [r2, #8]
}
 80066d4:	e7d0      	b.n	8006678 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80066d6:	4938      	ldr	r1, [pc, #224]	@ (80067b8 <HAL_TIM_ConfigClockSource+0x1a8>)
 80066d8:	428c      	cmp	r4, r1
 80066da:	d00e      	beq.n	80066fa <HAL_TIM_ConfigClockSource+0xea>
 80066dc:	d85d      	bhi.n	800679a <HAL_TIM_ConfigClockSource+0x18a>
 80066de:	3920      	subs	r1, #32
 80066e0:	428c      	cmp	r4, r1
 80066e2:	d00a      	beq.n	80066fa <HAL_TIM_ConfigClockSource+0xea>
 80066e4:	d806      	bhi.n	80066f4 <HAL_TIM_ConfigClockSource+0xe4>
 80066e6:	f024 0110 	bic.w	r1, r4, #16
 80066ea:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80066ee:	d004      	beq.n	80066fa <HAL_TIM_ConfigClockSource+0xea>
      status = HAL_ERROR;
 80066f0:	2001      	movs	r0, #1
 80066f2:	e7c2      	b.n	800667a <HAL_TIM_ConfigClockSource+0x6a>
  switch (sClockSourceConfig->ClockSource)
 80066f4:	4931      	ldr	r1, [pc, #196]	@ (80067bc <HAL_TIM_ConfigClockSource+0x1ac>)
 80066f6:	428c      	cmp	r4, r1
 80066f8:	d1fa      	bne.n	80066f0 <HAL_TIM_ConfigClockSource+0xe0>
  tmpsmcr = TIMx->SMCR;
 80066fa:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80066fc:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8006700:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006704:	4321      	orrs	r1, r4
 8006706:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 800670a:	6091      	str	r1, [r2, #8]
}
 800670c:	e7b4      	b.n	8006678 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 800670e:	2002      	movs	r0, #2
}
 8006710:	4770      	bx	lr

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006712:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8006716:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006718:	4328      	orrs	r0, r5
 800671a:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800671c:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006720:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8006724:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006726:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8006728:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800672a:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800672e:	6091      	str	r1, [r2, #8]
      break;
 8006730:	e7a2      	b.n	8006678 <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 8006732:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006734:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8006736:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006738:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800673c:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800673e:	6a11      	ldr	r1, [r2, #32]
 8006740:	f021 0101 	bic.w	r1, r1, #1
 8006744:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006746:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006748:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800674c:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006750:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8006752:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8006754:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006756:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800675a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800675e:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8006762:	6091      	str	r1, [r2, #8]
}
 8006764:	e788      	b.n	8006678 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006766:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800676a:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800676c:	4328      	orrs	r0, r5
 800676e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006770:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006774:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8006778:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 800677a:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800677c:	6891      	ldr	r1, [r2, #8]
 800677e:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8006782:	6091      	str	r1, [r2, #8]
      break;
 8006784:	e778      	b.n	8006678 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8006786:	f63f af78 	bhi.w	800667a <HAL_TIM_ConfigClockSource+0x6a>
 800678a:	2c20      	cmp	r4, #32
 800678c:	d0b5      	beq.n	80066fa <HAL_TIM_ConfigClockSource+0xea>
 800678e:	d80e      	bhi.n	80067ae <HAL_TIM_ConfigClockSource+0x19e>
 8006790:	f034 0110 	bics.w	r1, r4, #16
 8006794:	f47f af71 	bne.w	800667a <HAL_TIM_ConfigClockSource+0x6a>
 8006798:	e7af      	b.n	80066fa <HAL_TIM_ConfigClockSource+0xea>
 800679a:	4909      	ldr	r1, [pc, #36]	@ (80067c0 <HAL_TIM_ConfigClockSource+0x1b0>)
 800679c:	428c      	cmp	r4, r1
 800679e:	d0ac      	beq.n	80066fa <HAL_TIM_ConfigClockSource+0xea>
 80067a0:	f024 0520 	bic.w	r5, r4, #32
 80067a4:	3910      	subs	r1, #16
 80067a6:	428d      	cmp	r5, r1
 80067a8:	f47f af67 	bne.w	800667a <HAL_TIM_ConfigClockSource+0x6a>
 80067ac:	e7a5      	b.n	80066fa <HAL_TIM_ConfigClockSource+0xea>
 80067ae:	2c30      	cmp	r4, #48	@ 0x30
 80067b0:	d0a3      	beq.n	80066fa <HAL_TIM_ConfigClockSource+0xea>
 80067b2:	e79d      	b.n	80066f0 <HAL_TIM_ConfigClockSource+0xe0>
 80067b4:	ffce0088 	.word	0xffce0088
 80067b8:	00100040 	.word	0x00100040
 80067bc:	00100030 	.word	0x00100030
 80067c0:	00100060 	.word	0x00100060

080067c4 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 80067c4:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067c6:	6a02      	ldr	r2, [r0, #32]
 80067c8:	f022 0210 	bic.w	r2, r2, #16
{
 80067cc:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067ce:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80067d0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80067d2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067d4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067d6:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80067da:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067de:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067e2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80067e4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067e8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067ec:	4d16      	ldr	r5, [pc, #88]	@ (8006848 <TIM_OC2_SetConfig+0x84>)
 80067ee:	42a8      	cmp	r0, r5
 80067f0:	d014      	beq.n	800681c <TIM_OC2_SetConfig+0x58>
 80067f2:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80067f6:	42a8      	cmp	r0, r5
 80067f8:	d010      	beq.n	800681c <TIM_OC2_SetConfig+0x58>
 80067fa:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 80067fe:	42a8      	cmp	r0, r5
 8006800:	d00c      	beq.n	800681c <TIM_OC2_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006802:	f5a5 5580 	sub.w	r5, r5, #4096	@ 0x1000
 8006806:	42a8      	cmp	r0, r5
 8006808:	d00f      	beq.n	800682a <TIM_OC2_SetConfig+0x66>
 800680a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800680e:	42a8      	cmp	r0, r5
 8006810:	d00b      	beq.n	800682a <TIM_OC2_SetConfig+0x66>
 8006812:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006816:	42a8      	cmp	r0, r5
 8006818:	d10f      	bne.n	800683a <TIM_OC2_SetConfig+0x76>
 800681a:	e006      	b.n	800682a <TIM_OC2_SetConfig+0x66>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800681c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800681e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006822:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006826:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800682a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800682e:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006832:	ea46 0c05 	orr.w	ip, r6, r5
 8006836:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 800683a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800683c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800683e:	6182      	str	r2, [r0, #24]
}
 8006840:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8006842:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8006844:	6203      	str	r3, [r0, #32]
}
 8006846:	4770      	bx	lr
 8006848:	40012c00 	.word	0x40012c00

0800684c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 800684c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006850:	2b01      	cmp	r3, #1
 8006852:	f000 80e4 	beq.w	8006a1e <HAL_TIM_PWM_ConfigChannel+0x1d2>
 8006856:	2301      	movs	r3, #1
{
 8006858:	b570      	push	{r4, r5, r6, lr}
 800685a:	4604      	mov	r4, r0
 800685c:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 800685e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8006862:	2a14      	cmp	r2, #20
 8006864:	d80c      	bhi.n	8006880 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006866:	e8df f002 	tbb	[pc, r2]
 800686a:	0b53      	.short	0x0b53
 800686c:	0b670b0b 	.word	0x0b670b0b
 8006870:	0b780b0b 	.word	0x0b780b0b
 8006874:	0b880b0b 	.word	0x0b880b0b
 8006878:	0b990b0b 	.word	0x0b990b0b
 800687c:	0b0b      	.short	0x0b0b
 800687e:	10          	.byte	0x10
 800687f:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8006880:	2300      	movs	r3, #0
 8006882:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  switch (Channel)
 8006886:	2001      	movs	r0, #1
}
 8006888:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800688a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800688c:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 800688e:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006890:	6a19      	ldr	r1, [r3, #32]
 8006892:	f421 1180 	bic.w	r1, r1, #1048576	@ 0x100000
 8006896:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006898:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800689a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800689c:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80068a0:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068a4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068a8:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068aa:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068ae:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b2:	4e5c      	ldr	r6, [pc, #368]	@ (8006a24 <HAL_TIM_PWM_ConfigChannel+0x1d8>)
 80068b4:	42b3      	cmp	r3, r6
 80068b6:	d013      	beq.n	80068e0 <HAL_TIM_PWM_ConfigChannel+0x94>
 80068b8:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 80068bc:	42b3      	cmp	r3, r6
 80068be:	d00f      	beq.n	80068e0 <HAL_TIM_PWM_ConfigChannel+0x94>
 80068c0:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 80068c4:	42b3      	cmp	r3, r6
 80068c6:	d00b      	beq.n	80068e0 <HAL_TIM_PWM_ConfigChannel+0x94>
 80068c8:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80068cc:	42b3      	cmp	r3, r6
 80068ce:	d007      	beq.n	80068e0 <HAL_TIM_PWM_ConfigChannel+0x94>
 80068d0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80068d4:	42b3      	cmp	r3, r6
 80068d6:	d003      	beq.n	80068e0 <HAL_TIM_PWM_ConfigChannel+0x94>
 80068d8:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 80068dc:	42b3      	cmp	r3, r6
 80068de:	d104      	bne.n	80068ea <HAL_TIM_PWM_ConfigChannel+0x9e>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068e0:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068e2:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068e6:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 80068ea:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80068ec:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 80068ee:	6869      	ldr	r1, [r5, #4]
 80068f0:	64d9      	str	r1, [r3, #76]	@ 0x4c
  TIMx->CCER = tmpccer;
 80068f2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80068f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80068f6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80068f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068fc:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80068fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006900:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006904:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006906:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006908:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800690c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800690e:	e00e      	b.n	800692e <HAL_TIM_PWM_ConfigChannel+0xe2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006910:	6800      	ldr	r0, [r0, #0]
 8006912:	f7ff fc5f 	bl	80061d4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006916:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006918:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800691a:	f043 0308 	orr.w	r3, r3, #8
 800691e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006920:	6983      	ldr	r3, [r0, #24]
 8006922:	f023 0304 	bic.w	r3, r3, #4
 8006926:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006928:	6983      	ldr	r3, [r0, #24]
 800692a:	4313      	orrs	r3, r2
 800692c:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 800692e:	2300      	movs	r3, #0
 8006930:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006934:	2000      	movs	r0, #0
}
 8006936:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006938:	6800      	ldr	r0, [r0, #0]
 800693a:	f7ff ff43 	bl	80067c4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800693e:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006940:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006942:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006946:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006948:	6983      	ldr	r3, [r0, #24]
 800694a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800694e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006950:	6983      	ldr	r3, [r0, #24]
 8006952:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006956:	6183      	str	r3, [r0, #24]
      break;
 8006958:	e7e9      	b.n	800692e <HAL_TIM_PWM_ConfigChannel+0xe2>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800695a:	6800      	ldr	r0, [r0, #0]
 800695c:	f7ff fc7a 	bl	8006254 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006960:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006962:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006964:	f043 0308 	orr.w	r3, r3, #8
 8006968:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800696a:	69c3      	ldr	r3, [r0, #28]
 800696c:	f023 0304 	bic.w	r3, r3, #4
 8006970:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006972:	69c3      	ldr	r3, [r0, #28]
 8006974:	4313      	orrs	r3, r2
 8006976:	61c3      	str	r3, [r0, #28]
      break;
 8006978:	e7d9      	b.n	800692e <HAL_TIM_PWM_ConfigChannel+0xe2>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800697a:	6800      	ldr	r0, [r0, #0]
 800697c:	f7ff fcae 	bl	80062dc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006980:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006982:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006984:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006988:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800698a:	69c3      	ldr	r3, [r0, #28]
 800698c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006990:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006992:	69c3      	ldr	r3, [r0, #28]
 8006994:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006998:	61c3      	str	r3, [r0, #28]
      break;
 800699a:	e7c8      	b.n	800692e <HAL_TIM_PWM_ConfigChannel+0xe2>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800699c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 800699e:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 80069a0:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80069a2:	6a19      	ldr	r1, [r3, #32]
 80069a4:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80069a8:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80069aa:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80069ac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80069ae:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80069b2:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 80069b6:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80069b8:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80069ba:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80069be:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069c2:	4e18      	ldr	r6, [pc, #96]	@ (8006a24 <HAL_TIM_PWM_ConfigChannel+0x1d8>)
 80069c4:	42b3      	cmp	r3, r6
 80069c6:	d013      	beq.n	80069f0 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 80069c8:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 80069cc:	42b3      	cmp	r3, r6
 80069ce:	d00f      	beq.n	80069f0 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 80069d0:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 80069d4:	42b3      	cmp	r3, r6
 80069d6:	d00b      	beq.n	80069f0 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 80069d8:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80069dc:	42b3      	cmp	r3, r6
 80069de:	d007      	beq.n	80069f0 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 80069e0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80069e4:	42b3      	cmp	r3, r6
 80069e6:	d003      	beq.n	80069f0 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 80069e8:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 80069ec:	42b3      	cmp	r3, r6
 80069ee:	d104      	bne.n	80069fa <HAL_TIM_PWM_ConfigChannel+0x1ae>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069f0:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80069f2:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069f6:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 80069fa:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80069fc:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 80069fe:	6869      	ldr	r1, [r5, #4]
 8006a00:	6499      	str	r1, [r3, #72]	@ 0x48
  TIMx->CCER = tmpccer;
 8006a02:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a06:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a08:	f042 0208 	orr.w	r2, r2, #8
 8006a0c:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a0e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a10:	f022 0204 	bic.w	r2, r2, #4
 8006a14:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006a1c:	e787      	b.n	800692e <HAL_TIM_PWM_ConfigChannel+0xe2>
  __HAL_LOCK(htim);
 8006a1e:	2002      	movs	r0, #2
}
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	40012c00 	.word	0x40012c00

08006a28 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a28:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d04f      	beq.n	8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
{
 8006a30:	b430      	push	{r4, r5}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a32:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a34:	4d27      	ldr	r5, [pc, #156]	@ (8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006a36:	2302      	movs	r3, #2
 8006a38:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a3c:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8006a3e:	6853      	ldr	r3, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a40:	680c      	ldr	r4, [r1, #0]
 8006a42:	4684      	mov	ip, r0
  tmpsmcr = htim->Instance->SMCR;
 8006a44:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a46:	d01d      	beq.n	8006a84 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8006a48:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8006a4c:	42aa      	cmp	r2, r5
 8006a4e:	d034      	beq.n	8006aba <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8006a50:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 8006a54:	42aa      	cmp	r2, r5
 8006a56:	d015      	beq.n	8006a84 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a58:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006a5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a60:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a62:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8006a66:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a68:	d117      	bne.n	8006a9a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a6a:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a6c:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a70:	4318      	orrs	r0, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a72:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006a74:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006a76:	2301      	movs	r3, #1
 8006a78:	f88c 303d 	strb.w	r3, [ip, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006a7c:	f88c 003c 	strb.w	r0, [ip, #60]	@ 0x3c

  return HAL_OK;
}
 8006a80:	bc30      	pop	{r4, r5}
 8006a82:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a84:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a86:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a8a:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a8c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006a90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a94:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 8006a96:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a98:	e7e7      	b.n	8006a6a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8006a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d0e4      	beq.n	8006a6a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8006aa0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d0e0      	beq.n	8006a6a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8006aa8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d0dc      	beq.n	8006a6a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8006ab0:	f503 339a 	add.w	r3, r3, #78848	@ 0x13400
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d1dd      	bne.n	8006a74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ab8:	e7d7      	b.n	8006a6a <HAL_TIMEx_MasterConfigSynchronization+0x42>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006aba:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006abc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ac0:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ac2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006aca:	431c      	orrs	r4, r3
  htim->Instance->CR2 = tmpcr2;
 8006acc:	6054      	str	r4, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ace:	e7cc      	b.n	8006a6a <HAL_TIMEx_MasterConfigSynchronization+0x42>
  __HAL_LOCK(htim);
 8006ad0:	2002      	movs	r0, #2
}
 8006ad2:	4770      	bx	lr
 8006ad4:	40012c00 	.word	0x40012c00
 8006ad8:	40000400 	.word	0x40000400

08006adc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006adc:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d048      	beq.n	8006b76 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
{
 8006ae4:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006ae6:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8006aea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aee:	4602      	mov	r2, r0
 8006af0:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006af2:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006af4:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006af6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006afa:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006afc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b00:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b02:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b08:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b0a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b0c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b10:	6b08      	ldr	r0, [r1, #48]	@ 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b12:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b18:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b1a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b1c:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006b20:	69c8      	ldr	r0, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006b26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006b2a:	4c14      	ldr	r4, [pc, #80]	@ (8006b7c <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006b2c:	4303      	orrs	r3, r0
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006b2e:	6810      	ldr	r0, [r2, #0]
 8006b30:	42a0      	cmp	r0, r4
 8006b32:	d007      	beq.n	8006b44 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8006b34:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 8006b38:	42a0      	cmp	r0, r4
 8006b3a:	d003      	beq.n	8006b44 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8006b3c:	f504 54e0 	add.w	r4, r4, #7168	@ 0x1c00
 8006b40:	42a0      	cmp	r0, r4
 8006b42:	d110      	bne.n	8006b66 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006b44:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8006b46:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006b4a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006b4e:	6a0c      	ldr	r4, [r1, #32]
 8006b50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b54:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006b56:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006b58:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006b5a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006b5e:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006b60:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006b64:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8006b66:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8006b68:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8006b6a:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8006b6e:	4608      	mov	r0, r1
}
 8006b70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b74:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006b76:	2002      	movs	r0, #2
}
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	40012c00 	.word	0x40012c00

08006b80 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8006b80:	4603      	mov	r3, r0
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b82:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8006b86:	2801      	cmp	r0, #1
 8006b88:	d073      	beq.n	8006c72 <HAL_TIMEx_ConfigBreakInput+0xf2>

  switch (sBreakInputConfig->Source)
 8006b8a:	6810      	ldr	r0, [r2, #0]
 8006b8c:	2820      	cmp	r0, #32
{
 8006b8e:	b570      	push	{r4, r5, r6, lr}
  switch (sBreakInputConfig->Source)
 8006b90:	d84c      	bhi.n	8006c2c <HAL_TIMEx_ConfigBreakInput+0xac>
 8006b92:	2800      	cmp	r0, #0
 8006b94:	d07f      	beq.n	8006c96 <HAL_TIMEx_ConfigBreakInput+0x116>
 8006b96:	1e44      	subs	r4, r0, #1
 8006b98:	2c1f      	cmp	r4, #31
 8006b9a:	d811      	bhi.n	8006bc0 <HAL_TIMEx_ConfigBreakInput+0x40>
 8006b9c:	e8df f004 	tbb	[pc, r4]
 8006ba0:	57106b71 	.word	0x57106b71
 8006ba4:	5d101010 	.word	0x5d101010
 8006ba8:	10101010 	.word	0x10101010
 8006bac:	63101010 	.word	0x63101010
 8006bb0:	10101010 	.word	0x10101010
 8006bb4:	10101010 	.word	0x10101010
 8006bb8:	10101010 	.word	0x10101010
 8006bbc:	52101010 	.word	0x52101010
    default:
    {
      bkin_enable_mask = 0U;
      bkin_polarity_mask = 0U;
      bkin_enable_bitpos = 0U;
      bkin_polarity_bitpos = 0U;
 8006bc0:	f04f 0e00 	mov.w	lr, #0
      bkin_enable_bitpos = 0U;
 8006bc4:	4676      	mov	r6, lr
      bkin_polarity_mask = 0U;
 8006bc6:	46f4      	mov	ip, lr
      bkin_enable_mask = 0U;
 8006bc8:	4670      	mov	r0, lr
      break;
    }
  }

  switch (BreakInput)
 8006bca:	2901      	cmp	r1, #1
 8006bcc:	d01c      	beq.n	8006c08 <HAL_TIMEx_ConfigBreakInput+0x88>
 8006bce:	2902      	cmp	r1, #2
 8006bd0:	d004      	beq.n	8006bdc <HAL_TIMEx_ConfigBreakInput+0x5c>
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  switch (BreakInput)
 8006bd8:	2001      	movs	r0, #1

  return status;
}
 8006bda:	bd70      	pop	{r4, r5, r6, pc}
      tmporx = htim->Instance->AF2;
 8006bdc:	681c      	ldr	r4, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006bde:	6851      	ldr	r1, [r2, #4]
      tmporx = htim->Instance->AF2;
 8006be0:	6e65      	ldr	r5, [r4, #100]	@ 0x64
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006be2:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006be4:	40b1      	lsls	r1, r6
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006be6:	fa02 fe0e 	lsl.w	lr, r2, lr
 8006bea:	ea81 0205 	eor.w	r2, r1, r5
 8006bee:	4002      	ands	r2, r0
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006bf0:	406a      	eors	r2, r5
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006bf2:	ea8e 0102 	eor.w	r1, lr, r2
 8006bf6:	ea01 010c 	and.w	r1, r1, ip
 8006bfa:	404a      	eors	r2, r1
      htim->Instance->AF2 = tmporx;
 8006bfc:	6662      	str	r2, [r4, #100]	@ 0x64
  __HAL_UNLOCK(htim);
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006c04:	2000      	movs	r0, #0
}
 8006c06:	bd70      	pop	{r4, r5, r6, pc}
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006c08:	6851      	ldr	r1, [r2, #4]
      tmporx = htim->Instance->AF1;
 8006c0a:	681d      	ldr	r5, [r3, #0]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006c0c:	6894      	ldr	r4, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006c0e:	40b1      	lsls	r1, r6
      tmporx = htim->Instance->AF1;
 8006c10:	6e2e      	ldr	r6, [r5, #96]	@ 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006c12:	ea81 0206 	eor.w	r2, r1, r6
 8006c16:	4002      	ands	r2, r0
 8006c18:	4072      	eors	r2, r6
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006c1a:	fa04 f40e 	lsl.w	r4, r4, lr
 8006c1e:	ea84 0102 	eor.w	r1, r4, r2
 8006c22:	ea01 010c 	and.w	r1, r1, ip
 8006c26:	404a      	eors	r2, r1
      htim->Instance->AF1 = tmporx;
 8006c28:	662a      	str	r2, [r5, #96]	@ 0x60
      break;
 8006c2a:	e7e8      	b.n	8006bfe <HAL_TIMEx_ConfigBreakInput+0x7e>
  switch (sBreakInputConfig->Source)
 8006c2c:	2840      	cmp	r0, #64	@ 0x40
      bkin_polarity_bitpos = 0U;
 8006c2e:	f04f 0e00 	mov.w	lr, #0
  switch (sBreakInputConfig->Source)
 8006c32:	d004      	beq.n	8006c3e <HAL_TIMEx_ConfigBreakInput+0xbe>
 8006c34:	2880      	cmp	r0, #128	@ 0x80
 8006c36:	d12a      	bne.n	8006c8e <HAL_TIMEx_ConfigBreakInput+0x10e>
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 8006c38:	2607      	movs	r6, #7
      bkin_polarity_mask = 0U;
 8006c3a:	46f4      	mov	ip, lr
 8006c3c:	e7c5      	b.n	8006bca <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 8006c3e:	2606      	movs	r6, #6
      bkin_polarity_mask = 0U;
 8006c40:	46f4      	mov	ip, lr
 8006c42:	e7c2      	b.n	8006bca <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = 0U;
 8006c44:	f04f 0e00 	mov.w	lr, #0
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 8006c48:	2605      	movs	r6, #5
      bkin_polarity_mask = 0U;
 8006c4a:	46f4      	mov	ip, lr
      break;
 8006c4c:	e7bd      	b.n	8006bca <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8006c4e:	f04f 0e0b 	mov.w	lr, #11
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8006c52:	2602      	movs	r6, #2
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8006c54:	f44f 6c00 	mov.w	ip, #2048	@ 0x800
      break;
 8006c58:	e7b7      	b.n	8006bca <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 8006c5a:	f04f 0e0c 	mov.w	lr, #12
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 8006c5e:	2603      	movs	r6, #3
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 8006c60:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
      break;
 8006c64:	e7b1      	b.n	8006bca <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 8006c66:	f04f 0e0d 	mov.w	lr, #13
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 8006c6a:	2604      	movs	r6, #4
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 8006c6c:	f44f 5c00 	mov.w	ip, #8192	@ 0x2000
      break;
 8006c70:	e7ab      	b.n	8006bca <HAL_TIMEx_ConfigBreakInput+0x4a>
  __HAL_LOCK(htim);
 8006c72:	2002      	movs	r0, #2
}
 8006c74:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 8006c76:	f04f 0e0a 	mov.w	lr, #10
 8006c7a:	2601      	movs	r6, #1
 8006c7c:	f44f 6c80 	mov.w	ip, #1024	@ 0x400
 8006c80:	e7a3      	b.n	8006bca <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8006c82:	f04f 0e09 	mov.w	lr, #9
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8006c86:	2600      	movs	r6, #0
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8006c88:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 8006c8c:	e79d      	b.n	8006bca <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_enable_bitpos = 0U;
 8006c8e:	4676      	mov	r6, lr
      bkin_polarity_mask = 0U;
 8006c90:	46f4      	mov	ip, lr
      bkin_enable_mask = 0U;
 8006c92:	4670      	mov	r0, lr
 8006c94:	e799      	b.n	8006bca <HAL_TIMEx_ConfigBreakInput+0x4a>
      bkin_polarity_bitpos = 0U;
 8006c96:	4686      	mov	lr, r0
      bkin_enable_bitpos = 0U;
 8006c98:	4606      	mov	r6, r0
      bkin_polarity_mask = 0U;
 8006c9a:	4684      	mov	ip, r0
 8006c9c:	e795      	b.n	8006bca <HAL_TIMEx_ConfigBreakInput+0x4a>
 8006c9e:	bf00      	nop

08006ca0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ca0:	b570      	push	{r4, r5, r6, lr}
 8006ca2:	4604      	mov	r4, r0
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ca4:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ca6:	6882      	ldr	r2, [r0, #8]
 8006ca8:	6900      	ldr	r0, [r0, #16]
 8006caa:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cac:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cae:	4302      	orrs	r2, r0
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cb4:	4997      	ldr	r1, [pc, #604]	@ (8006f14 <UART_SetConfig+0x274>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cb6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cb8:	4029      	ands	r1, r5
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006cc2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cc4:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8006cc8:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cca:	4993      	ldr	r1, [pc, #588]	@ (8006f18 <UART_SetConfig+0x278>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ccc:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cce:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cd0:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cd2:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cd4:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 8006cd8:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006cdc:	f000 80c1 	beq.w	8006e62 <UART_SetConfig+0x1c2>
    tmpreg |= huart->Init.OneBitSampling;
 8006ce0:	6a26      	ldr	r6, [r4, #32]
 8006ce2:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cea:	f022 020f 	bic.w	r2, r2, #15
 8006cee:	432a      	orrs	r2, r5
 8006cf0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cf2:	4a8a      	ldr	r2, [pc, #552]	@ (8006f1c <UART_SetConfig+0x27c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d039      	beq.n	8006d6c <UART_SetConfig+0xcc>
 8006cf8:	4a89      	ldr	r2, [pc, #548]	@ (8006f20 <UART_SetConfig+0x280>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d011      	beq.n	8006d22 <UART_SetConfig+0x82>
 8006cfe:	4a89      	ldr	r2, [pc, #548]	@ (8006f24 <UART_SetConfig+0x284>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d059      	beq.n	8006db8 <UART_SetConfig+0x118>
 8006d04:	4a88      	ldr	r2, [pc, #544]	@ (8006f28 <UART_SetConfig+0x288>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d044      	beq.n	8006d94 <UART_SetConfig+0xf4>
 8006d0a:	4a88      	ldr	r2, [pc, #544]	@ (8006f2c <UART_SetConfig+0x28c>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	f000 809b 	beq.w	8006e48 <UART_SetConfig+0x1a8>

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
      {
        ret = HAL_ERROR;
 8006d12:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d14:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8006d16:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 8006d1a:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8006d1e:	66a2      	str	r2, [r4, #104]	@ 0x68

  return ret;
}
 8006d20:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d22:	4b83      	ldr	r3, [pc, #524]	@ (8006f30 <UART_SetConfig+0x290>)
 8006d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d28:	f003 030c 	and.w	r3, r3, #12
 8006d2c:	2b0c      	cmp	r3, #12
 8006d2e:	d8f0      	bhi.n	8006d12 <UART_SetConfig+0x72>
 8006d30:	a201      	add	r2, pc, #4	@ (adr r2, 8006d38 <UART_SetConfig+0x98>)
 8006d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d36:	bf00      	nop
 8006d38:	08006e3d 	.word	0x08006e3d
 8006d3c:	08006d13 	.word	0x08006d13
 8006d40:	08006d13 	.word	0x08006d13
 8006d44:	08006d13 	.word	0x08006d13
 8006d48:	08006dab 	.word	0x08006dab
 8006d4c:	08006d13 	.word	0x08006d13
 8006d50:	08006d13 	.word	0x08006d13
 8006d54:	08006d13 	.word	0x08006d13
 8006d58:	08006dff 	.word	0x08006dff
 8006d5c:	08006d13 	.word	0x08006d13
 8006d60:	08006d13 	.word	0x08006d13
 8006d64:	08006d13 	.word	0x08006d13
 8006d68:	08006dcd 	.word	0x08006dcd
 8006d6c:	4b70      	ldr	r3, [pc, #448]	@ (8006f30 <UART_SetConfig+0x290>)
 8006d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d72:	f003 0303 	and.w	r3, r3, #3
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d041      	beq.n	8006dfe <UART_SetConfig+0x15e>
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	d026      	beq.n	8006dcc <UART_SetConfig+0x12c>
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d013      	beq.n	8006daa <UART_SetConfig+0x10a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d82:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006d86:	f000 80b3 	beq.w	8006ef0 <UART_SetConfig+0x250>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d8a:	f7ff f87d 	bl	8005e88 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8006d8e:	b3a0      	cbz	r0, 8006dfa <UART_SetConfig+0x15a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d90:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8006d92:	e020      	b.n	8006dd6 <UART_SetConfig+0x136>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d94:	4b66      	ldr	r3, [pc, #408]	@ (8006f30 <UART_SetConfig+0x290>)
 8006d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d9a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006d9e:	2b80      	cmp	r3, #128	@ 0x80
 8006da0:	d02d      	beq.n	8006dfe <UART_SetConfig+0x15e>
 8006da2:	f200 809b 	bhi.w	8006edc <UART_SetConfig+0x23c>
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d048      	beq.n	8006e3c <UART_SetConfig+0x19c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006daa:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006dae:	f000 80a7 	beq.w	8006f00 <UART_SetConfig+0x260>
        pclk = HAL_RCC_GetSysClockFreq();
 8006db2:	f7fe ff15 	bl	8005be0 <HAL_RCC_GetSysClockFreq>
        break;
 8006db6:	e7ea      	b.n	8006d8e <UART_SetConfig+0xee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006db8:	4b5d      	ldr	r3, [pc, #372]	@ (8006f30 <UART_SetConfig+0x290>)
 8006dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dbe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006dc2:	2b20      	cmp	r3, #32
 8006dc4:	d01b      	beq.n	8006dfe <UART_SetConfig+0x15e>
 8006dc6:	d9ee      	bls.n	8006da6 <UART_SetConfig+0x106>
 8006dc8:	2b30      	cmp	r3, #48	@ 0x30
 8006dca:	d1a2      	bne.n	8006d12 <UART_SetConfig+0x72>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dcc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006dd0:	d019      	beq.n	8006e06 <UART_SetConfig+0x166>
        pclk = (uint32_t) LSE_VALUE;
 8006dd2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dd6:	6863      	ldr	r3, [r4, #4]
 8006dd8:	4a56      	ldr	r2, [pc, #344]	@ (8006f34 <UART_SetConfig+0x294>)
 8006dda:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 8006dde:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006de2:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006de6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006dea:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dee:	f1a0 0310 	sub.w	r3, r0, #16
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d88d      	bhi.n	8006d12 <UART_SetConfig+0x72>
          huart->Instance->BRR = usartdiv;
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	60d8      	str	r0, [r3, #12]
        ret = HAL_ERROR;
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	e78a      	b.n	8006d14 <UART_SetConfig+0x74>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dfe:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8006e02:	484d      	ldr	r0, [pc, #308]	@ (8006f38 <UART_SetConfig+0x298>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e04:	d1e7      	bne.n	8006dd6 <UART_SetConfig+0x136>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e06:	6862      	ldr	r2, [r4, #4]
 8006e08:	4b4a      	ldr	r3, [pc, #296]	@ (8006f34 <UART_SetConfig+0x294>)
 8006e0a:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8006e0e:	fbb0 f0f1 	udiv	r0, r0, r1
 8006e12:	0853      	lsrs	r3, r2, #1
 8006e14:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e18:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e1c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e20:	f1a3 0210 	sub.w	r2, r3, #16
 8006e24:	428a      	cmp	r2, r1
 8006e26:	f63f af74 	bhi.w	8006d12 <UART_SetConfig+0x72>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e2a:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8006e2e:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e30:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e32:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8006e36:	4313      	orrs	r3, r2
 8006e38:	60cb      	str	r3, [r1, #12]
 8006e3a:	e7de      	b.n	8006dfa <UART_SetConfig+0x15a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e3c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006e40:	d050      	beq.n	8006ee4 <UART_SetConfig+0x244>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e42:	f7ff f80f 	bl	8005e64 <HAL_RCC_GetPCLK1Freq>
        break;
 8006e46:	e7a2      	b.n	8006d8e <UART_SetConfig+0xee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e48:	4b39      	ldr	r3, [pc, #228]	@ (8006f30 <UART_SetConfig+0x290>)
 8006e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e56:	d0d2      	beq.n	8006dfe <UART_SetConfig+0x15e>
 8006e58:	d9a5      	bls.n	8006da6 <UART_SetConfig+0x106>
 8006e5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e5e:	d0b5      	beq.n	8006dcc <UART_SetConfig+0x12c>
 8006e60:	e757      	b.n	8006d12 <UART_SetConfig+0x72>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e62:	4311      	orrs	r1, r2
 8006e64:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e68:	4931      	ldr	r1, [pc, #196]	@ (8006f30 <UART_SetConfig+0x290>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e6a:	f022 020f 	bic.w	r2, r2, #15
 8006e6e:	432a      	orrs	r2, r5
 8006e70:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e72:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8006e76:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006e7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e7e:	d03a      	beq.n	8006ef6 <UART_SetConfig+0x256>
 8006e80:	d841      	bhi.n	8006f06 <UART_SetConfig+0x266>
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d039      	beq.n	8006efa <UART_SetConfig+0x25a>
        pclk = HAL_RCC_GetSysClockFreq();
 8006e86:	f7fe feab 	bl	8005be0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	d0b5      	beq.n	8006dfa <UART_SetConfig+0x15a>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e8e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e90:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e92:	4b28      	ldr	r3, [pc, #160]	@ (8006f34 <UART_SetConfig+0x294>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e94:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e98:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8006e9c:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ea0:	4299      	cmp	r1, r3
 8006ea2:	f63f af36 	bhi.w	8006d12 <UART_SetConfig+0x72>
 8006ea6:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8006eaa:	f63f af32 	bhi.w	8006d12 <UART_SetConfig+0x72>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006eae:	2300      	movs	r3, #0
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	f7f9 fcb7 	bl	8000824 <__aeabi_uldivmod>
 8006eb6:	0872      	lsrs	r2, r6, #1
 8006eb8:	0203      	lsls	r3, r0, #8
 8006eba:	0209      	lsls	r1, r1, #8
 8006ebc:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8006ec0:	1898      	adds	r0, r3, r2
 8006ec2:	f141 0100 	adc.w	r1, r1, #0
 8006ec6:	4632      	mov	r2, r6
 8006ec8:	2300      	movs	r3, #0
 8006eca:	f7f9 fcab 	bl	8000824 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ece:	4b1b      	ldr	r3, [pc, #108]	@ (8006f3c <UART_SetConfig+0x29c>)
 8006ed0:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	f63f af1c 	bhi.w	8006d12 <UART_SetConfig+0x72>
 8006eda:	e78c      	b.n	8006df6 <UART_SetConfig+0x156>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006edc:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ede:	f43f af75 	beq.w	8006dcc <UART_SetConfig+0x12c>
 8006ee2:	e716      	b.n	8006d12 <UART_SetConfig+0x72>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ee4:	f7fe ffbe 	bl	8005e64 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d086      	beq.n	8006dfa <UART_SetConfig+0x15a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006eec:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8006eee:	e78a      	b.n	8006e06 <UART_SetConfig+0x166>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ef0:	f7fe ffca 	bl	8005e88 <HAL_RCC_GetPCLK2Freq>
        break;
 8006ef4:	e7f8      	b.n	8006ee8 <UART_SetConfig+0x248>
        pclk = (uint32_t) HSI_VALUE;
 8006ef6:	4810      	ldr	r0, [pc, #64]	@ (8006f38 <UART_SetConfig+0x298>)
 8006ef8:	e7ca      	b.n	8006e90 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006efa:	f7fe ffb3 	bl	8005e64 <HAL_RCC_GetPCLK1Freq>
        break;
 8006efe:	e7c4      	b.n	8006e8a <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetSysClockFreq();
 8006f00:	f7fe fe6e 	bl	8005be0 <HAL_RCC_GetSysClockFreq>
        break;
 8006f04:	e7f0      	b.n	8006ee8 <UART_SetConfig+0x248>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f0a:	f47f af02 	bne.w	8006d12 <UART_SetConfig+0x72>
        pclk = (uint32_t) LSE_VALUE;
 8006f0e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006f12:	e7bd      	b.n	8006e90 <UART_SetConfig+0x1f0>
 8006f14:	cfff69f3 	.word	0xcfff69f3
 8006f18:	40008000 	.word	0x40008000
 8006f1c:	40013800 	.word	0x40013800
 8006f20:	40004400 	.word	0x40004400
 8006f24:	40004800 	.word	0x40004800
 8006f28:	40004c00 	.word	0x40004c00
 8006f2c:	40005000 	.word	0x40005000
 8006f30:	40021000 	.word	0x40021000
 8006f34:	08008fb4 	.word	0x08008fb4
 8006f38:	00f42400 	.word	0x00f42400
 8006f3c:	000ffcff 	.word	0x000ffcff

08006f40 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f40:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006f42:	071a      	lsls	r2, r3, #28
{
 8006f44:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f46:	d506      	bpl.n	8006f56 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f48:	6801      	ldr	r1, [r0, #0]
 8006f4a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8006f4c:	684a      	ldr	r2, [r1, #4]
 8006f4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f52:	4322      	orrs	r2, r4
 8006f54:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f56:	07dc      	lsls	r4, r3, #31
 8006f58:	d506      	bpl.n	8006f68 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f5a:	6801      	ldr	r1, [r0, #0]
 8006f5c:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8006f5e:	684a      	ldr	r2, [r1, #4]
 8006f60:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006f64:	4322      	orrs	r2, r4
 8006f66:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f68:	0799      	lsls	r1, r3, #30
 8006f6a:	d506      	bpl.n	8006f7a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f6c:	6801      	ldr	r1, [r0, #0]
 8006f6e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8006f70:	684a      	ldr	r2, [r1, #4]
 8006f72:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006f76:	4322      	orrs	r2, r4
 8006f78:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f7a:	075a      	lsls	r2, r3, #29
 8006f7c:	d506      	bpl.n	8006f8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f7e:	6801      	ldr	r1, [r0, #0]
 8006f80:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8006f82:	684a      	ldr	r2, [r1, #4]
 8006f84:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006f88:	4322      	orrs	r2, r4
 8006f8a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f8c:	06dc      	lsls	r4, r3, #27
 8006f8e:	d506      	bpl.n	8006f9e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f90:	6801      	ldr	r1, [r0, #0]
 8006f92:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8006f94:	688a      	ldr	r2, [r1, #8]
 8006f96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006f9a:	4322      	orrs	r2, r4
 8006f9c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f9e:	0699      	lsls	r1, r3, #26
 8006fa0:	d506      	bpl.n	8006fb0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fa2:	6801      	ldr	r1, [r0, #0]
 8006fa4:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8006fa6:	688a      	ldr	r2, [r1, #8]
 8006fa8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006fac:	4322      	orrs	r2, r4
 8006fae:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fb0:	065a      	lsls	r2, r3, #25
 8006fb2:	d509      	bpl.n	8006fc8 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fb4:	6801      	ldr	r1, [r0, #0]
 8006fb6:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8006fb8:	684a      	ldr	r2, [r1, #4]
 8006fba:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8006fbe:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fc0:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fc4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fc6:	d00b      	beq.n	8006fe0 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fc8:	061b      	lsls	r3, r3, #24
 8006fca:	d506      	bpl.n	8006fda <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fcc:	6802      	ldr	r2, [r0, #0]
 8006fce:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8006fd0:	6853      	ldr	r3, [r2, #4]
 8006fd2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8006fd6:	430b      	orrs	r3, r1
 8006fd8:	6053      	str	r3, [r2, #4]
  }
}
 8006fda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fde:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fe0:	684a      	ldr	r2, [r1, #4]
 8006fe2:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8006fe4:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8006fe8:	4322      	orrs	r2, r4
 8006fea:	604a      	str	r2, [r1, #4]
 8006fec:	e7ec      	b.n	8006fc8 <UART_AdvFeatureConfig+0x88>
 8006fee:	bf00      	nop

08006ff0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ff0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff2:	2300      	movs	r3, #0
{
 8006ff4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff6:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ffa:	f7fc ff29 	bl	8003e50 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ffe:	6822      	ldr	r2, [r4, #0]
 8007000:	6813      	ldr	r3, [r2, #0]
 8007002:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8007004:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007006:	d40f      	bmi.n	8007028 <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007008:	6813      	ldr	r3, [r2, #0]
 800700a:	0759      	lsls	r1, r3, #29
 800700c:	d431      	bmi.n	8007072 <UART_CheckIdleState+0x82>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8007010:	2220      	movs	r2, #32
 8007012:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 8007016:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8007018:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800701c:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800701e:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8007020:	2300      	movs	r3, #0
 8007022:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8007026:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007028:	69d3      	ldr	r3, [r2, #28]
 800702a:	0298      	lsls	r0, r3, #10
 800702c:	d4ec      	bmi.n	8007008 <UART_CheckIdleState+0x18>
 800702e:	e00c      	b.n	800704a <UART_CheckIdleState+0x5a>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007030:	6819      	ldr	r1, [r3, #0]
 8007032:	0749      	lsls	r1, r1, #29
 8007034:	461a      	mov	r2, r3
 8007036:	d505      	bpl.n	8007044 <UART_CheckIdleState+0x54>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007038:	69d9      	ldr	r1, [r3, #28]
 800703a:	0708      	lsls	r0, r1, #28
 800703c:	d44a      	bmi.n	80070d4 <UART_CheckIdleState+0xe4>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800703e:	69d9      	ldr	r1, [r3, #28]
 8007040:	0509      	lsls	r1, r1, #20
 8007042:	d475      	bmi.n	8007130 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	0298      	lsls	r0, r3, #10
 8007048:	d4de      	bmi.n	8007008 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800704a:	f7fc ff01 	bl	8003e50 <HAL_GetTick>
 800704e:	1b43      	subs	r3, r0, r5
 8007050:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007054:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007056:	d3eb      	bcc.n	8007030 <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007058:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800705c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007060:	e843 2100 	strex	r1, r2, [r3]
 8007064:	2900      	cmp	r1, #0
 8007066:	d1f7      	bne.n	8007058 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 8007068:	2320      	movs	r3, #32
 800706a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 800706e:	2003      	movs	r0, #3
 8007070:	e7d6      	b.n	8007020 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007072:	69d3      	ldr	r3, [r2, #28]
 8007074:	025b      	lsls	r3, r3, #9
 8007076:	d4ca      	bmi.n	800700e <UART_CheckIdleState+0x1e>
 8007078:	e00d      	b.n	8007096 <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	0750      	lsls	r0, r2, #29
 800707e:	d507      	bpl.n	8007090 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007080:	69da      	ldr	r2, [r3, #28]
 8007082:	0711      	lsls	r1, r2, #28
 8007084:	f100 8082 	bmi.w	800718c <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007088:	69da      	ldr	r2, [r3, #28]
 800708a:	0512      	lsls	r2, r2, #20
 800708c:	f100 80ac 	bmi.w	80071e8 <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	025b      	lsls	r3, r3, #9
 8007094:	d4bb      	bmi.n	800700e <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007096:	f7fc fedb 	bl	8003e50 <HAL_GetTick>
 800709a:	1b43      	subs	r3, r0, r5
 800709c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	d3ea      	bcc.n	800707a <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a4:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070a8:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ac:	e843 2100 	strex	r1, r2, [r3]
 80070b0:	2900      	cmp	r1, #0
 80070b2:	d1f7      	bne.n	80070a4 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b4:	f103 0208 	add.w	r2, r3, #8
 80070b8:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070bc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c0:	f103 0008 	add.w	r0, r3, #8
 80070c4:	e840 2100 	strex	r1, r2, [r0]
 80070c8:	2900      	cmp	r1, #0
 80070ca:	d1f3      	bne.n	80070b4 <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 80070cc:	2320      	movs	r3, #32
 80070ce:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 80070d2:	e7cc      	b.n	800706e <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070d4:	2208      	movs	r2, #8
 80070d6:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d8:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070dc:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e0:	e843 2100 	strex	r1, r2, [r3]
 80070e4:	2900      	cmp	r1, #0
 80070e6:	d1f7      	bne.n	80070d8 <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070e8:	4856      	ldr	r0, [pc, #344]	@ (8007244 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ea:	f103 0208 	add.w	r2, r3, #8
 80070ee:	e852 2f00 	ldrex	r2, [r2]
 80070f2:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f4:	f103 0508 	add.w	r5, r3, #8
 80070f8:	e845 2100 	strex	r1, r2, [r5]
 80070fc:	2900      	cmp	r1, #0
 80070fe:	d1f4      	bne.n	80070ea <UART_CheckIdleState+0xfa>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007100:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8007102:	2a01      	cmp	r2, #1
 8007104:	d00b      	beq.n	800711e <UART_CheckIdleState+0x12e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007106:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007108:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800710a:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800710c:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007110:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007112:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8007114:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007118:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 800711c:	e79c      	b.n	8007058 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007122:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007126:	e843 2100 	strex	r1, r2, [r3]
 800712a:	2900      	cmp	r1, #0
 800712c:	d1f7      	bne.n	800711e <UART_CheckIdleState+0x12e>
 800712e:	e7ea      	b.n	8007106 <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007130:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007134:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007136:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800713a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713e:	e843 2100 	strex	r1, r2, [r3]
 8007142:	2900      	cmp	r1, #0
 8007144:	d1f7      	bne.n	8007136 <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007146:	483f      	ldr	r0, [pc, #252]	@ (8007244 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007148:	f103 0208 	add.w	r2, r3, #8
 800714c:	e852 2f00 	ldrex	r2, [r2]
 8007150:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007152:	f103 0508 	add.w	r5, r3, #8
 8007156:	e845 2100 	strex	r1, r2, [r5]
 800715a:	2900      	cmp	r1, #0
 800715c:	d1f4      	bne.n	8007148 <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800715e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8007160:	2a01      	cmp	r2, #1
 8007162:	d00a      	beq.n	800717a <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007164:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007166:	2120      	movs	r1, #32
 8007168:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 800716c:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800716e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8007170:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007174:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8007178:	e76e      	b.n	8007058 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800717e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007182:	e843 2100 	strex	r1, r2, [r3]
 8007186:	2900      	cmp	r1, #0
 8007188:	d1f7      	bne.n	800717a <UART_CheckIdleState+0x18a>
 800718a:	e7eb      	b.n	8007164 <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800718c:	2208      	movs	r2, #8
 800718e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007190:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007194:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007198:	e843 2100 	strex	r1, r2, [r3]
 800719c:	2900      	cmp	r1, #0
 800719e:	d1f7      	bne.n	8007190 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071a0:	4828      	ldr	r0, [pc, #160]	@ (8007244 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a2:	f103 0208 	add.w	r2, r3, #8
 80071a6:	e852 2f00 	ldrex	r2, [r2]
 80071aa:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ac:	f103 0508 	add.w	r5, r3, #8
 80071b0:	e845 2100 	strex	r1, r2, [r5]
 80071b4:	2900      	cmp	r1, #0
 80071b6:	d1f4      	bne.n	80071a2 <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071b8:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80071ba:	2a01      	cmp	r2, #1
 80071bc:	d00b      	beq.n	80071d6 <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071be:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80071c0:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071c2:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80071c4:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 80071c8:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ca:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 80071cc:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071d0:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 80071d4:	e766      	b.n	80070a4 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d6:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071da:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071de:	e843 2100 	strex	r1, r2, [r3]
 80071e2:	2900      	cmp	r1, #0
 80071e4:	d1f7      	bne.n	80071d6 <UART_CheckIdleState+0x1e6>
 80071e6:	e7ea      	b.n	80071be <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071ec:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071f2:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f6:	e843 2100 	strex	r1, r2, [r3]
 80071fa:	2900      	cmp	r1, #0
 80071fc:	d1f7      	bne.n	80071ee <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071fe:	4811      	ldr	r0, [pc, #68]	@ (8007244 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007200:	f103 0208 	add.w	r2, r3, #8
 8007204:	e852 2f00 	ldrex	r2, [r2]
 8007208:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	f103 0508 	add.w	r5, r3, #8
 800720e:	e845 2100 	strex	r1, r2, [r5]
 8007212:	2900      	cmp	r1, #0
 8007214:	d1f4      	bne.n	8007200 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007216:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8007218:	2a01      	cmp	r2, #1
 800721a:	d00a      	beq.n	8007232 <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800721c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800721e:	2120      	movs	r1, #32
 8007220:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8007224:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007226:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8007228:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800722c:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8007230:	e738      	b.n	80070a4 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007232:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007236:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723a:	e843 2100 	strex	r1, r2, [r3]
 800723e:	2900      	cmp	r1, #0
 8007240:	d1f7      	bne.n	8007232 <UART_CheckIdleState+0x242>
 8007242:	e7eb      	b.n	800721c <UART_CheckIdleState+0x22c>
 8007244:	effffffe 	.word	0xeffffffe

08007248 <HAL_UART_Init>:
  if (huart == NULL)
 8007248:	b380      	cbz	r0, 80072ac <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800724a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 800724e:	b510      	push	{r4, lr}
 8007250:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007252:	b333      	cbz	r3, 80072a2 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8007254:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007256:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 8007258:	2324      	movs	r3, #36	@ 0x24
 800725a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800725e:	6813      	ldr	r3, [r2, #0]
 8007260:	f023 0301 	bic.w	r3, r3, #1
 8007264:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007266:	b9c1      	cbnz	r1, 800729a <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007268:	4620      	mov	r0, r4
 800726a:	f7ff fd19 	bl	8006ca0 <UART_SetConfig>
 800726e:	2801      	cmp	r0, #1
 8007270:	d011      	beq.n	8007296 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007272:	6823      	ldr	r3, [r4, #0]
 8007274:	685a      	ldr	r2, [r3, #4]
 8007276:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800727a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800727c:	689a      	ldr	r2, [r3, #8]
 800727e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007282:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800728a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800728c:	601a      	str	r2, [r3, #0]
}
 800728e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8007292:	f7ff bead 	b.w	8006ff0 <UART_CheckIdleState>
}
 8007296:	2001      	movs	r0, #1
 8007298:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800729a:	4620      	mov	r0, r4
 800729c:	f7ff fe50 	bl	8006f40 <UART_AdvFeatureConfig>
 80072a0:	e7e2      	b.n	8007268 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 80072a2:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 80072a6:	f7fc fbef 	bl	8003a88 <HAL_UART_MspInit>
 80072aa:	e7d3      	b.n	8007254 <HAL_UART_Init+0xc>
}
 80072ac:	2001      	movs	r0, #1
 80072ae:	4770      	bx	lr

080072b0 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072b0:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d017      	beq.n	80072e8 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072b8:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80072ba:	2324      	movs	r3, #36	@ 0x24
{
 80072bc:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 80072be:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072c2:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072c4:	6814      	ldr	r4, [r2, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072c6:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 80072c8:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80072cc:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 80072d0:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072d2:	6643      	str	r3, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072d4:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072d6:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 80072da:	2220      	movs	r2, #32
 80072dc:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88

  return HAL_OK;
}
 80072e0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 80072e4:	4618      	mov	r0, r3
}
 80072e6:	4770      	bx	lr
  __HAL_LOCK(huart);
 80072e8:	2002      	movs	r0, #2
}
 80072ea:	4770      	bx	lr

080072ec <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072ec:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 80072f0:	2a01      	cmp	r2, #1
 80072f2:	d037      	beq.n	8007364 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 80072f4:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072f6:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80072f8:	2024      	movs	r0, #36	@ 0x24
{
 80072fa:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80072fc:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007300:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007302:	6810      	ldr	r0, [r2, #0]
 8007304:	f020 0001 	bic.w	r0, r0, #1
 8007308:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800730a:	6890      	ldr	r0, [r2, #8]
 800730c:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 8007310:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007312:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007314:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007316:	b310      	cbz	r0, 800735e <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007318:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800731a:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 800731c:	4d12      	ldr	r5, [pc, #72]	@ (8007368 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800731e:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007322:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007326:	4911      	ldr	r1, [pc, #68]	@ (800736c <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 8007328:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800732c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8007330:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8007334:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007338:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800733a:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800733c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007340:	fbb1 f1f5 	udiv	r1, r1, r5
 8007344:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8007348:	2100      	movs	r1, #0
 800734a:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800734e:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007350:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8007352:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 8007356:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8007358:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 800735c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800735e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8007360:	4608      	mov	r0, r1
 8007362:	e7ef      	b.n	8007344 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8007364:	2002      	movs	r0, #2
}
 8007366:	4770      	bx	lr
 8007368:	08008fcc 	.word	0x08008fcc
 800736c:	08008fd4 	.word	0x08008fd4

08007370 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8007370:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8007374:	2a01      	cmp	r2, #1
 8007376:	d037      	beq.n	80073e8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8007378:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800737a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800737c:	2024      	movs	r0, #36	@ 0x24
{
 800737e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8007380:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007384:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007386:	6810      	ldr	r0, [r2, #0]
 8007388:	f020 0001 	bic.w	r0, r0, #1
 800738c:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800738e:	6890      	ldr	r0, [r2, #8]
 8007390:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 8007394:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007396:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007398:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800739a:	b310      	cbz	r0, 80073e2 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800739c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800739e:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80073a0:	4d12      	ldr	r5, [pc, #72]	@ (80073ec <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073a2:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80073a6:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073aa:	4911      	ldr	r1, [pc, #68]	@ (80073f0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80073ac:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073b0:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80073b4:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80073b8:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073bc:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073be:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073c0:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073c4:	fbb1 f1f5 	udiv	r1, r1, r5
 80073c8:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 80073cc:	2100      	movs	r1, #0
 80073ce:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80073d2:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073d4:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80073d6:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 80073da:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80073dc:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 80073e0:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80073e2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80073e4:	4608      	mov	r0, r1
 80073e6:	e7ef      	b.n	80073c8 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80073e8:	2002      	movs	r0, #2
}
 80073ea:	4770      	bx	lr
 80073ec:	08008fcc 	.word	0x08008fcc
 80073f0:	08008fd4 	.word	0x08008fd4

080073f4 <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 80073f4:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 80073f6:	8840      	ldrh	r0, [r0, #2]
 80073f8:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 80073fc:	0c00      	lsrs	r0, r0, #16
 80073fe:	4770      	bx	lr

08007400 <BADC_Init>:
/**
  * @brief  Initializes ADC and NVIC for three bemf voltages reading
  * @param  pHandle: handler of the current instance of the Bemf_ADC component
  */
__weak void BADC_Init(Bemf_ADC_Handle_t *pHandle)
{
 8007400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ADC_TypeDef *ADCx_u = pHandle->pParams_str->pAdc[2];
 8007404:	6c85      	ldr	r5, [r0, #72]	@ 0x48
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007406:	4e93      	ldr	r6, [pc, #588]	@ (8007654 <BADC_Init+0x254>)
  ADC_TypeDef *ADCx_v = pHandle->pParams_str->pAdc[1];
  ADC_TypeDef *ADCx_w = pHandle->pParams_str->pAdc[0];
 8007408:	68a9      	ldr	r1, [r5, #8]
  MODIFY_REG(ADCx->CR,
 800740a:	4f93      	ldr	r7, [pc, #588]	@ (8007658 <BADC_Init+0x258>)
  ADC_TypeDef *ADCx_v = pHandle->pParams_str->pAdc[1];
 800740c:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8007410:	685c      	ldr	r4, [r3, #4]
 8007412:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
{
 8007416:	b082      	sub	sp, #8
 8007418:	605c      	str	r4, [r3, #4]
 800741a:	6854      	ldr	r4, [r2, #4]
 800741c:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
 8007420:	6054      	str	r4, [r2, #4]
 8007422:	684c      	ldr	r4, [r1, #4]
 8007424:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
 8007428:	604c      	str	r4, [r1, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 800742a:	2480      	movs	r4, #128	@ 0x80
 800742c:	601c      	str	r4, [r3, #0]
 800742e:	6014      	str	r4, [r2, #0]
 8007430:	600c      	str	r4, [r1, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007432:	689c      	ldr	r4, [r3, #8]
 8007434:	4034      	ands	r4, r6
 8007436:	609c      	str	r4, [r3, #8]
 8007438:	6894      	ldr	r4, [r2, #8]
 800743a:	4034      	ands	r4, r6
 800743c:	6094      	str	r4, [r2, #8]
 800743e:	688c      	ldr	r4, [r1, #8]
 8007440:	4034      	ands	r4, r6
 8007442:	608c      	str	r4, [r1, #8]
  MODIFY_REG(ADCx->CR,
 8007444:	689c      	ldr	r4, [r3, #8]
    LL_ADC_DisableDeepPowerDown(ADCx_w);
    
    LL_ADC_EnableInternalRegulator(ADCx_u);
    LL_ADC_EnableInternalRegulator(ADCx_v);
    LL_ADC_EnableInternalRegulator(ADCx_w);
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007446:	4e85      	ldr	r6, [pc, #532]	@ (800765c <BADC_Init+0x25c>)
 8007448:	403c      	ands	r4, r7
 800744a:	f044 5480 	orr.w	r4, r4, #268435456	@ 0x10000000
 800744e:	609c      	str	r4, [r3, #8]
 8007450:	6894      	ldr	r4, [r2, #8]
 8007452:	403c      	ands	r4, r7
 8007454:	f044 5480 	orr.w	r4, r4, #268435456	@ 0x10000000
 8007458:	6094      	str	r4, [r2, #8]
 800745a:	4c81      	ldr	r4, [pc, #516]	@ (8007660 <BADC_Init+0x260>)
 800745c:	6824      	ldr	r4, [r4, #0]
 800745e:	09a4      	lsrs	r4, r4, #6
 8007460:	fba6 6404 	umull	r6, r4, r6, r4
 8007464:	688e      	ldr	r6, [r1, #8]
 8007466:	09a4      	lsrs	r4, r4, #6
 8007468:	403e      	ands	r6, r7
 800746a:	0064      	lsls	r4, r4, #1
 800746c:	f046 5680 	orr.w	r6, r6, #268435456	@ 0x10000000
 8007470:	608e      	str	r6, [r1, #8]
 8007472:	9401      	str	r4, [sp, #4]
    while(wait_loop_index != 0UL)
 8007474:	9c01      	ldr	r4, [sp, #4]
 8007476:	b12c      	cbz	r4, 8007484 <BADC_Init+0x84>
    {
      wait_loop_index--;
 8007478:	9c01      	ldr	r4, [sp, #4]
 800747a:	3c01      	subs	r4, #1
 800747c:	9401      	str	r4, [sp, #4]
    while(wait_loop_index != 0UL)
 800747e:	9c01      	ldr	r4, [sp, #4]
 8007480:	2c00      	cmp	r4, #0
 8007482:	d1f9      	bne.n	8007478 <BADC_Init+0x78>
  MODIFY_REG(ADCx->CR,
 8007484:	689c      	ldr	r4, [r3, #8]
 8007486:	f024 4440 	bic.w	r4, r4, #3221225472	@ 0xc0000000
 800748a:	f024 043f 	bic.w	r4, r4, #63	@ 0x3f
 800748e:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8007492:	609c      	str	r4, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007494:	689c      	ldr	r4, [r3, #8]
 8007496:	2c00      	cmp	r4, #0
 8007498:	dbfc      	blt.n	8007494 <BADC_Init+0x94>

    LL_ADC_StartCalibration(ADCx_u, LL_ADC_SINGLE_ENDED);
    while (LL_ADC_IsCalibrationOnGoing(ADCx_u))
    {
    }
    if (ADCx_u != ADCx_v)
 800749a:	4293      	cmp	r3, r2
 800749c:	f000 80c9 	beq.w	8007632 <BADC_Init+0x232>
  MODIFY_REG(ADCx->CR,
 80074a0:	6894      	ldr	r4, [r2, #8]
 80074a2:	f024 4440 	bic.w	r4, r4, #3221225472	@ 0xc0000000
 80074a6:	f024 043f 	bic.w	r4, r4, #63	@ 0x3f
 80074aa:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 80074ae:	6094      	str	r4, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80074b0:	6894      	ldr	r4, [r2, #8]
 80074b2:	2c00      	cmp	r4, #0
 80074b4:	dbfc      	blt.n	80074b0 <BADC_Init+0xb0>
      LL_ADC_StartCalibration(ADCx_v, LL_ADC_SINGLE_ENDED);
      while (LL_ADC_IsCalibrationOnGoing(ADCx_v))
      {
      }
    }
    if ((ADCx_w != ADCx_u) && (ADCx_w != ADCx_v))
 80074b6:	428b      	cmp	r3, r1
 80074b8:	d002      	beq.n	80074c0 <BADC_Init+0xc0>
 80074ba:	428a      	cmp	r2, r1
 80074bc:	f040 80bc 	bne.w	8007638 <BADC_Init+0x238>
    /* ADC Enable (must be done after calibration) */
    /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0
    * following a calibration phase, could have no effect on ADC
    * within certain AHB/ADC clock ratio.
    */
    LL_ADC_SetChannelSamplingTime (ADCx_u, pHandle->pParams_str->AdcChannel[2], LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80074c0:	6aac      	ldr	r4, [r5, #40]	@ 0x28
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80074c2:	0de6      	lsrs	r6, r4, #23
 80074c4:	f103 0714 	add.w	r7, r3, #20
 80074c8:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 80074cc:	f04f 0c07 	mov.w	ip, #7
 80074d0:	f857 e006 	ldr.w	lr, [r7, r6]
 80074d4:	f3c4 5404 	ubfx	r4, r4, #20, #5
 80074d8:	fa0c f404 	lsl.w	r4, ip, r4
 80074dc:	ea2e 0404 	bic.w	r4, lr, r4
 80074e0:	51bc      	str	r4, [r7, r6]
    LL_ADC_SetChannelSamplingTime (ADCx_v, pHandle->pParams_str->AdcChannel[1], LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80074e2:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80074e4:	0de6      	lsrs	r6, r4, #23
 80074e6:	f006 0604 	and.w	r6, r6, #4
 80074ea:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 80074ee:	f3c4 5404 	ubfx	r4, r4, #20, #5
 80074f2:	f857 8006 	ldr.w	r8, [r7, r6]
 80074f6:	fa0c f404 	lsl.w	r4, ip, r4
 80074fa:	ea28 0404 	bic.w	r4, r8, r4
 80074fe:	51bc      	str	r4, [r7, r6]
    LL_ADC_SetChannelSamplingTime (ADCx_w, pHandle->pParams_str->AdcChannel[0], LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007500:	6a2e      	ldr	r6, [r5, #32]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8007502:	0df4      	lsrs	r4, r6, #23
 8007504:	f004 0404 	and.w	r4, r4, #4
 8007508:	f101 0e14 	add.w	lr, r1, #20
  MODIFY_REG(*preg,
 800750c:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8007510:	fa0c fc06 	lsl.w	ip, ip, r6
 8007514:	f85e 6004 	ldr.w	r6, [lr, r4]
 8007518:	ea26 060c 	bic.w	r6, r6, ip
 800751c:	f84e 6004 	str.w	r6, [lr, r4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8007520:	681c      	ldr	r4, [r3, #0]
 8007522:	07e7      	lsls	r7, r4, #31
 8007524:	d578      	bpl.n	8007618 <BADC_Init+0x218>
 8007526:	6813      	ldr	r3, [r2, #0]
 8007528:	07de      	lsls	r6, r3, #31
 800752a:	d408      	bmi.n	800753e <BADC_Init+0x13e>
  MODIFY_REG(ADCx->CR,
 800752c:	4c4d      	ldr	r4, [pc, #308]	@ (8007664 <BADC_Init+0x264>)
 800752e:	6893      	ldr	r3, [r2, #8]
 8007530:	4023      	ands	r3, r4
 8007532:	f043 0301 	orr.w	r3, r3, #1
 8007536:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8007538:	6813      	ldr	r3, [r2, #0]
 800753a:	07de      	lsls	r6, r3, #31
 800753c:	d5f7      	bpl.n	800752e <BADC_Init+0x12e>
 800753e:	680b      	ldr	r3, [r1, #0]
 8007540:	07df      	lsls	r7, r3, #31
 8007542:	d408      	bmi.n	8007556 <BADC_Init+0x156>
  MODIFY_REG(ADCx->CR,
 8007544:	4a47      	ldr	r2, [pc, #284]	@ (8007664 <BADC_Init+0x264>)
 8007546:	688b      	ldr	r3, [r1, #8]
 8007548:	4013      	ands	r3, r2
 800754a:	f043 0301 	orr.w	r3, r3, #1
 800754e:	608b      	str	r3, [r1, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8007550:	680b      	ldr	r3, [r1, #0]
 8007552:	07db      	lsls	r3, r3, #31
 8007554:	d5f7      	bpl.n	8007546 <BADC_Init+0x146>
      LL_ADC_Enable(ADCx_w);
    } 

    pHandle->ADCRegularLocked=false;

    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8007556:	7841      	ldrb	r1, [r0, #1]
 8007558:	8ac3      	ldrh	r3, [r0, #22]
    reliable speed */
    hMinReliableElSpeedUnit /= 4U;

    /* Adjustment factor: maximum measurable speed is x time greater than the
    maximum reliable speed */
    hMaxReliableElSpeedUnit *= 2U;
 800755a:	8a82      	ldrh	r2, [r0, #20]
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 800755c:	fb13 f301 	smulbb	r3, r3, r1
    hMaxReliableElSpeedUnit *= 2U;
 8007560:	fb12 f201 	smulbb	r2, r2, r1
    uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit * pHandle->_Super.bElToMecRatio;
 8007564:	b29b      	uxth	r3, r3
    pHandle->ADCRegularLocked=false;
 8007566:	2100      	movs	r1, #0
    hMaxReliableElSpeedUnit *= 2U;
 8007568:	0052      	lsls	r2, r2, #1

    /* SW Init */
    if (0U == hMinReliableElSpeedUnit)
 800756a:	2b03      	cmp	r3, #3
    pHandle->ADCRegularLocked=false;
 800756c:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54
    hMaxReliableElSpeedUnit *= 2U;
 8007570:	b292      	uxth	r2, r2
    if (0U == hMinReliableElSpeedUnit)
 8007572:	d95c      	bls.n	800762e <BADC_Init+0x22e>
    else
    {
      /* Set accordingly the min reliable speed */
      /* 1000 comes from mS
      * 6 comes from the fact that bemf zero crossing is sensed each 60 deg = 360/6 deg */
      BemfTimeout = (1000U * (uint16_t)SPEED_UNIT) / (6U * hMinReliableElSpeedUnit);
 8007574:	089b      	lsrs	r3, r3, #2
 8007576:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800757a:	005b      	lsls	r3, r3, #1
 800757c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8007580:	fbb1 f3f3 	udiv	r3, r1, r3
    }

    pHandle->MaxPeriod = (uint32_t) ((pHandle->TIMClockFreq * BemfTimeout) / 1000U);
 8007584:	6d04      	ldr	r4, [r0, #80]	@ 0x50
    MinBemfTime = ((1000U * (uint16_t)SPEED_UNIT) << 8) / (6U * hMaxReliableElSpeedUnit);
    pHandle->MinPeriod = (uint32_t) (((pHandle->TIMClockFreq * MinBemfTime) >> 8) / 1000U);

    pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8007586:	f8a0 20c0 	strh.w	r2, [r0, #192]	@ 0xc0
    MinBemfTime = ((1000U * (uint16_t)SPEED_UNIT) << 8) / (6U * hMaxReliableElSpeedUnit);
 800758a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800758e:	0051      	lsls	r1, r2, #1
 8007590:	4a35      	ldr	r2, [pc, #212]	@ (8007668 <BADC_Init+0x268>)
 8007592:	fbb2 f2f1 	udiv	r2, r2, r1
    pHandle->MinPeriod = (uint32_t) (((pHandle->TIMClockFreq * MinBemfTime) >> 8) / 1000U);
 8007596:	b292      	uxth	r2, r2
    pHandle->MaxPeriod = (uint32_t) ((pHandle->TIMClockFreq * BemfTimeout) / 1000U);
 8007598:	4934      	ldr	r1, [pc, #208]	@ (800766c <BADC_Init+0x26c>)
    pHandle->MinPeriod = (uint32_t) (((pHandle->TIMClockFreq * MinBemfTime) >> 8) / 1000U);
 800759a:	fb04 f202 	mul.w	r2, r4, r2
    pHandle->MaxPeriod = (uint32_t) ((pHandle->TIMClockFreq * BemfTimeout) / 1000U);
 800759e:	fb04 f303 	mul.w	r3, r4, r3
    pHandle->MinPeriod = (uint32_t) (((pHandle->TIMClockFreq * MinBemfTime) >> 8) / 1000U);
 80075a2:	0a12      	lsrs	r2, r2, #8
    pHandle->MaxPeriod = (uint32_t) ((pHandle->TIMClockFreq * BemfTimeout) / 1000U);
 80075a4:	fba1 6303 	umull	r6, r3, r1, r3
    pHandle->MinPeriod = (uint32_t) (((pHandle->TIMClockFreq * MinBemfTime) >> 8) / 1000U);
 80075a8:	fba1 1202 	umull	r1, r2, r1, r2
 80075ac:	0992      	lsrs	r2, r2, #6
    pHandle->MaxPeriod = (uint32_t) ((pHandle->TIMClockFreq * BemfTimeout) / 1000U);
 80075ae:	099b      	lsrs	r3, r3, #6
    pHandle->MinPeriod = (uint32_t) (((pHandle->TIMClockFreq * MinBemfTime) >> 8) / 1000U);
 80075b0:	e9c0 3232 	strd	r3, r2, [r0, #200]	@ 0xc8

    pHandle->PseudoPeriodConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 80075b4:	4a2e      	ldr	r2, [pc, #184]	@ (8007670 <BADC_Init+0x270>)
 80075b6:	8b46      	ldrh	r6, [r0, #26]
 80075b8:	fba2 1204 	umull	r1, r2, r2, r4
                              * pHandle->_Super.DPPConvFactor;
 80075bc:	69c1      	ldr	r1, [r0, #28]
    pHandle->PseudoPeriodConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 80075be:	0892      	lsrs	r2, r2, #2
 80075c0:	fbb2 f2f6 	udiv	r2, r2, r6
                              * pHandle->_Super.DPPConvFactor;
 80075c4:	fb01 f202 	mul.w	r2, r1, r2

    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80075c8:	f890 10d3 	ldrb.w	r1, [r0, #211]	@ 0xd3
    pHandle->PseudoPeriodConv = ((pHandle->TIMClockFreq / 6U) / pHandle->_Super.hMeasurementFrequency)
 80075cc:	f8c0 20c4 	str.w	r2, [r0, #196]	@ 0xc4
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80075d0:	fb06 f101 	mul.w	r1, r6, r1
                                    pHandle->SpeedSamplingFreqHz) - 1U;
 80075d4:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80075d8:	fbb1 f1f2 	udiv	r1, r1, r2
    pHandle->IsOnSensingEnabled = false;
    pHandle->ElPeriodSum = 0;
    pHandle->ZcEvents = 0;
   
    /* Erase speed buffer */
    bSpeedBufferSize = pHandle->SpeedBufferSize;
 80075dc:	f890 204e 	ldrb.w	r2, [r0, #78]	@ 0x4e
    pHandle->IsOnSensingEnabled = false;
 80075e0:	2400      	movs	r4, #0
                                    pHandle->SpeedSamplingFreqHz) - 1U;
 80075e2:	3901      	subs	r1, #1
    pHandle->pSensing_Point = &(pHandle->Pwm_H_L.SamplingPointOff);
 80075e4:	f100 062c 	add.w	r6, r0, #44	@ 0x2c
 80075e8:	6386      	str	r6, [r0, #56]	@ 0x38
    pHandle->PWMNbrPSamplingFreq = ((pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80075ea:	f8a0 10d0 	strh.w	r1, [r0, #208]	@ 0xd0
    pHandle->IsOnSensingEnabled = false;
 80075ee:	f880 403c 	strb.w	r4, [r0, #60]	@ 0x3c
    pHandle->ElPeriodSum = 0;
 80075f2:	6584      	str	r4, [r0, #88]	@ 0x58
    pHandle->ZcEvents = 0;
 80075f4:	f880 4020 	strb.w	r4, [r0, #32]
    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 80075f8:	b132      	cbz	r2, 8007608 <BADC_Init+0x208>
 80075fa:	3068      	adds	r0, #104	@ 0x68
 80075fc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    {
      pHandle->SpeedBufferDpp[bIndex]  = (int32_t)pHandle->MaxPeriod;
 8007600:	f840 3f04 	str.w	r3, [r0, #4]!
    for (bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++)
 8007604:	4290      	cmp	r0, r2
 8007606:	d1fb      	bne.n	8007600 <BADC_Init+0x200>
    }

    LL_TIM_EnableCounter(pHandle->pParams_str->LfTim);
 8007608:	682a      	ldr	r2, [r5, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800760a:	6813      	ldr	r3, [r2, #0]
 800760c:	f043 0301 	orr.w	r3, r3, #1
 8007610:	6013      	str	r3, [r2, #0]
  }
}
 8007612:	b002      	add	sp, #8
 8007614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  MODIFY_REG(ADCx->CR,
 8007618:	4e12      	ldr	r6, [pc, #72]	@ (8007664 <BADC_Init+0x264>)
 800761a:	689c      	ldr	r4, [r3, #8]
 800761c:	4034      	ands	r4, r6
 800761e:	f044 0401 	orr.w	r4, r4, #1
 8007622:	609c      	str	r4, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8007624:	681c      	ldr	r4, [r3, #0]
 8007626:	07e4      	lsls	r4, r4, #31
 8007628:	f53f af7d 	bmi.w	8007526 <BADC_Init+0x126>
 800762c:	e7f5      	b.n	800761a <BADC_Init+0x21a>
 800762e:	2396      	movs	r3, #150	@ 0x96
 8007630:	e7a8      	b.n	8007584 <BADC_Init+0x184>
    if ((ADCx_w != ADCx_u) && (ADCx_w != ADCx_v))
 8007632:	428b      	cmp	r3, r1
 8007634:	f43f af44 	beq.w	80074c0 <BADC_Init+0xc0>
  MODIFY_REG(ADCx->CR,
 8007638:	688c      	ldr	r4, [r1, #8]
 800763a:	f024 4440 	bic.w	r4, r4, #3221225472	@ 0xc0000000
 800763e:	f024 043f 	bic.w	r4, r4, #63	@ 0x3f
 8007642:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8007646:	608c      	str	r4, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007648:	688c      	ldr	r4, [r1, #8]
 800764a:	2c00      	cmp	r4, #0
 800764c:	f6bf af38 	bge.w	80074c0 <BADC_Init+0xc0>
 8007650:	e7fa      	b.n	8007648 <BADC_Init+0x248>
 8007652:	bf00      	nop
 8007654:	5fffffc0 	.word	0x5fffffc0
 8007658:	6fffffc0 	.word	0x6fffffc0
 800765c:	053e2d63 	.word	0x053e2d63
 8007660:	2000047c 	.word	0x2000047c
 8007664:	7fffffc0 	.word	0x7fffffc0
 8007668:	00271000 	.word	0x00271000
 800766c:	10624dd3 	.word	0x10624dd3
 8007670:	aaaaaaab 	.word	0xaaaaaaab

08007674 <BADC_Clear>:
  * @brief  Resets the parameter values of the component
  * @param  pHandle: handler of the current instance of the Bemf_ADC component
  */
__weak void BADC_Clear(Bemf_ADC_Handle_t *pHandle)
{
  pHandle->ZcEvents = 0;
 8007674:	2300      	movs	r3, #0
 8007676:	f880 3020 	strb.w	r3, [r0, #32]
  pHandle->ElPeriodSum = 0;
 800767a:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Acceleration measurement not implemented.*/
  pHandle->_Super.hMecAccelUnitP = 0;
 800767c:	8243      	strh	r3, [r0, #18]
  pHandle->BufferFilled = 0U;
 800767e:	f880 3069 	strb.w	r3, [r0, #105]	@ 0x69
  pHandle->CompSpeed = 0;
 8007682:	f8a0 30be 	strh.w	r3, [r0, #190]	@ 0xbe

  /* Initialize speed buffer index */
  pHandle->SpeedFIFOIdx = 0U;
 8007686:	f8a0 30b8 	strh.w	r3, [r0, #184]	@ 0xb8
  pHandle->_Super.hElAngle  = 0;
 800768a:	8083      	strh	r3, [r0, #4]
  
  /* Clear speed error counter */
  pHandle->_Super.bSpeedErrorNumber = 0;
 800768c:	7003      	strb	r3, [r0, #0]
  pHandle->IsLoopClosed=false;
  pHandle->IsAlgorithmConverged = false;
 800768e:	f8a0 3066 	strh.w	r3, [r0, #102]	@ 0x66
}
 8007692:	4770      	bx	lr

08007694 <BADC_Start>:
 * @brief  Starts bemf ADC conversion of the phase depending on current step
 * @param  pHandle: handler of the current instance of the Bemf_ADC component
 * @param  step: current step of the six-step sequence
 */
__weak void BADC_Start(Bemf_ADC_Handle_t *pHandle, uint8_t step, uint8_t LSModArray[])
{
 8007694:	b510      	push	{r4, lr}
  ADC_TypeDef * ADCx = pHandle->pParams_str->pAdc[step];
 8007696:	6c84      	ldr	r4, [r0, #72]	@ 0x48
  uint16_t Bemf_Threshold;
  uint32_t tempReg;
  if (LSModArray[step]==1) Bemf_Threshold = pHandle->pSensing_Threshold_LSMod;
 8007698:	5c52      	ldrb	r2, [r2, r1]
  ADC_TypeDef * ADCx = pHandle->pParams_str->pAdc[step];
 800769a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
  if (LSModArray[step]==1) Bemf_Threshold = pHandle->pSensing_Threshold_LSMod;
 800769e:	2a01      	cmp	r2, #1
  else Bemf_Threshold = pHandle->pSensing_Threshold_HSMod;
  if (true == pHandle->ADCRegularLocked)
 80076a0:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
  ADC_TypeDef * ADCx = pHandle->pParams_str->pAdc[step];
 80076a4:	689b      	ldr	r3, [r3, #8]
  if (LSModArray[step]==1) Bemf_Threshold = pHandle->pSensing_Threshold_LSMod;
 80076a6:	bf0c      	ite	eq
 80076a8:	f8b0 c034 	ldrheq.w	ip, [r0, #52]	@ 0x34
  else Bemf_Threshold = pHandle->pSensing_Threshold_HSMod;
 80076ac:	f8b0 c032 	ldrhne.w	ip, [r0, #50]	@ 0x32
  ADC_TypeDef * ADCx = pHandle->pParams_str->pAdc[step];
 80076b0:	fa0f fe81 	sxth.w	lr, r1
  if (true == pHandle->ADCRegularLocked)
 80076b4:	2a00      	cmp	r2, #0
 80076b6:	d065      	beq.n	8007784 <BADC_Start+0xf0>
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80076b8:	685a      	ldr	r2, [r3, #4]
 80076ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80076be:	605a      	str	r2, [r3, #4]
  else
  {
    pHandle->ADCRegularLocked = true;
  }

  switch (step)
 80076c0:	2905      	cmp	r1, #5
 80076c2:	d817      	bhi.n	80076f4 <BADC_Start+0x60>
 80076c4:	2201      	movs	r2, #1
 80076c6:	408a      	lsls	r2, r1
 80076c8:	f012 0f2a 	tst.w	r2, #42	@ 0x2a
 80076cc:	d15e      	bne.n	800778c <BADC_Start+0xf8>
 80076ce:	f012 0f15 	tst.w	r2, #21
 80076d2:	d00f      	beq.n	80076f4 <BADC_Start+0x60>
  {
    case STEP_1:
    case STEP_3:
    case STEP_5:
      if(pHandle->Direction == 1)
 80076d4:	f990 205e 	ldrsb.w	r2, [r0, #94]	@ 0x5e
 80076d8:	2a01      	cmp	r2, #1
      {
        LL_ADC_SetAnalogWDThresholds(ADCx, LL_ADC_AWD1, LL_ADC_AWD_THRESHOLD_HIGH, 0xFFF);
        LL_ADC_SetAnalogWDThresholds(ADCx, LL_ADC_AWD1, LL_ADC_AWD_THRESHOLD_LOW, (uint32_t) (Bemf_Threshold >> 4));
 80076da:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
  MODIFY_REG(*preg,
 80076de:	6a1a      	ldr	r2, [r3, #32]
      if(pHandle->Direction == 1)
 80076e0:	d05b      	beq.n	800779a <BADC_Start+0x106>
 80076e2:	f36f 020b 	bfc	r2, #0, #12
 80076e6:	621a      	str	r2, [r3, #32]
 80076e8:	6a1a      	ldr	r2, [r3, #32]
 80076ea:	f36f 421b 	bfc	r2, #16, #12
 80076ee:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80076f2:	621a      	str	r2, [r3, #32]
  * @param  Phase: Floating phase for bemf acquisition
  */
void BADC_SelectAdcChannel(Bemf_ADC_Handle_t * pHandle, uint8_t step)
{
  
  LL_ADC_INJ_SetSequencerRanks(pHandle->pParams_str->pAdc[step], LL_ADC_INJ_RANK_1, __LL_ADC_DECIMAL_NB_TO_CHANNEL(pHandle->pParams_str->AdcChannel[step]));
 80076f4:	eb04 048e 	add.w	r4, r4, lr, lsl #2
 80076f8:	2201      	movs	r2, #1
 80076fa:	6a21      	ldr	r1, [r4, #32]
 80076fc:	408a      	lsls	r2, r1
 80076fe:	2909      	cmp	r1, #9
 8007700:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 8007704:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8007708:	d82c      	bhi.n	8007764 <BADC_Start+0xd0>
  MODIFY_REG(ADCx->JSQR,
 800770a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800770c:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
 8007710:	0e94      	lsrs	r4, r2, #26
 8007712:	f421 5178 	bic.w	r1, r1, #15872	@ 0x3e00
 8007716:	ea41 2144 	orr.w	r1, r1, r4, lsl #9
  LL_ADC_SetAnalogWDMonitChannels(pHandle->pParams_str->pAdc[step], LL_ADC_AWD1,
                                  __LL_ADC_ANALOGWD_CHANNEL_GROUP(__LL_ADC_DECIMAL_NB_TO_CHANNEL(pHandle->pParams_str->AdcChannel[step]),LL_ADC_GROUP_INJECTED));
 800771a:	f022 727c 	bic.w	r2, r2, #66060288	@ 0x3f00000
 800771e:	64d9      	str	r1, [r3, #76]	@ 0x4c
  LL_ADC_SetAnalogWDMonitChannels(pHandle->pParams_str->pAdc[step], LL_ADC_AWD1,
 8007720:	f042 72a0 	orr.w	r2, r2, #20971520	@ 0x1400000
  MODIFY_REG(*preg,
 8007724:	68d9      	ldr	r1, [r3, #12]
 8007726:	4c23      	ldr	r4, [pc, #140]	@ (80077b4 <BADC_Start+0x120>)
 8007728:	f021 41fb 	bic.w	r1, r1, #2105540608	@ 0x7d800000
 800772c:	4022      	ands	r2, r4
 800772e:	f421 0180 	bic.w	r1, r1, #4194304	@ 0x400000
 8007732:	4311      	orrs	r1, r2
 8007734:	60d9      	str	r1, [r3, #12]
  tempReg = LL_ADC_ReadReg(ADCx, TR1);
 8007736:	6a1a      	ldr	r2, [r3, #32]
  tempReg = (tempReg & (~(ADC_TR1_AWDFILT))) | (((uint32_t)(pHandle->Pwm_H_L.AWDfiltering - 1)) << 12);
 8007738:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 800773c:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007740:	3901      	subs	r1, #1
 8007742:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8007746:	2180      	movs	r1, #128	@ 0x80
  LL_ADC_WriteReg(ADCx, TR1, tempReg);
 8007748:	621a      	str	r2, [r3, #32]
 800774a:	6019      	str	r1, [r3, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 800774c:	685a      	ldr	r2, [r3, #4]
 800774e:	430a      	orrs	r2, r1
 8007750:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->CR,
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8007758:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800775c:	f042 0208 	orr.w	r2, r2, #8
 8007760:	609a      	str	r2, [r3, #8]
}
 8007762:	bd10      	pop	{r4, pc}
  MODIFY_REG(ADCx->JSQR,
 8007764:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
  LL_ADC_INJ_SetSequencerRanks(pHandle->pParams_str->pAdc[step], LL_ADC_INJ_RANK_1, __LL_ADC_DECIMAL_NB_TO_CHANNEL(pHandle->pParams_str->AdcChannel[step]));
 8007766:	3c1e      	subs	r4, #30
 8007768:	ea42 5204 	orr.w	r2, r2, r4, lsl #20
 800776c:	f421 5478 	bic.w	r4, r1, #15872	@ 0x3e00
 8007770:	0c51      	lsrs	r1, r2, #17
 8007772:	f401 5178 	and.w	r1, r1, #15872	@ 0x3e00
 8007776:	4321      	orrs	r1, r4
                                  __LL_ADC_ANALOGWD_CHANNEL_GROUP(__LL_ADC_DECIMAL_NB_TO_CHANNEL(pHandle->pParams_str->AdcChannel[step]),LL_ADC_GROUP_INJECTED));
 8007778:	f022 727c 	bic.w	r2, r2, #66060288	@ 0x3f00000
 800777c:	64d9      	str	r1, [r3, #76]	@ 0x4c
  LL_ADC_SetAnalogWDMonitChannels(pHandle->pParams_str->pAdc[step], LL_ADC_AWD1,
 800777e:	f042 72a0 	orr.w	r2, r2, #20971520	@ 0x1400000
 8007782:	e7cf      	b.n	8007724 <BADC_Start+0x90>
    pHandle->ADCRegularLocked = true;
 8007784:	2201      	movs	r2, #1
 8007786:	f880 2054 	strb.w	r2, [r0, #84]	@ 0x54
 800778a:	e799      	b.n	80076c0 <BADC_Start+0x2c>
      if(pHandle->Direction == 1)
 800778c:	f990 205e 	ldrsb.w	r2, [r0, #94]	@ 0x5e
 8007790:	2a01      	cmp	r2, #1
        LL_ADC_SetAnalogWDThresholds(ADCx, LL_ADC_AWD1, LL_ADC_AWD_THRESHOLD_HIGH, (uint32_t) (Bemf_Threshold >> 4));
 8007792:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
  MODIFY_REG(*preg,
 8007796:	6a1a      	ldr	r2, [r3, #32]
      if(pHandle->Direction == 1)
 8007798:	d0a3      	beq.n	80076e2 <BADC_Start+0x4e>
 800779a:	f042 627f 	orr.w	r2, r2, #267386880	@ 0xff00000
 800779e:	f442 2270 	orr.w	r2, r2, #983040	@ 0xf0000
 80077a2:	621a      	str	r2, [r3, #32]
 80077a4:	6a1a      	ldr	r2, [r3, #32]
 80077a6:	f36f 020b 	bfc	r2, #0, #12
 80077aa:	ea42 020c 	orr.w	r2, r2, ip
 80077ae:	621a      	str	r2, [r3, #32]
}
 80077b0:	e7a0      	b.n	80076f4 <BADC_Start+0x60>
 80077b2:	bf00      	nop
 80077b4:	7dc00000 	.word	0x7dc00000

080077b8 <BADC_Stop>:
  ADC_TypeDef * ADCx_u = pHandle->pParams_str->pAdc[2];
 80077b8:	6c83      	ldr	r3, [r0, #72]	@ 0x48
  ADC_TypeDef * ADCx_v = pHandle->pParams_str->pAdc[1];
 80077ba:	e9d3 2103 	ldrd	r2, r1, [r3, #12]
{
 80077be:	b430      	push	{r4, r5}
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80077c0:	684c      	ldr	r4, [r1, #4]
  ADC_TypeDef * ADCx_w = pHandle->pParams_str->pAdc[0];
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
 80077c8:	604c      	str	r4, [r1, #4]
 80077ca:	6854      	ldr	r4, [r2, #4]
 80077cc:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
 80077d0:	6054      	str	r4, [r2, #4]
 80077d2:	685c      	ldr	r4, [r3, #4]
 80077d4:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
 80077d8:	605c      	str	r4, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80077da:	2480      	movs	r4, #128	@ 0x80
 80077dc:	600c      	str	r4, [r1, #0]
 80077de:	6014      	str	r4, [r2, #0]
 80077e0:	601c      	str	r4, [r3, #0]
  if (true == pHandle->ADCRegularLocked)
 80077e2:	f890 4054 	ldrb.w	r4, [r0, #84]	@ 0x54
 80077e6:	b194      	cbz	r4, 800780e <BADC_Stop+0x56>
  MODIFY_REG(ADCx->CR,
 80077e8:	688c      	ldr	r4, [r1, #8]
 80077ea:	4d0a      	ldr	r5, [pc, #40]	@ (8007814 <BADC_Stop+0x5c>)
 80077ec:	402c      	ands	r4, r5
 80077ee:	f044 0420 	orr.w	r4, r4, #32
 80077f2:	608c      	str	r4, [r1, #8]
 80077f4:	6891      	ldr	r1, [r2, #8]
 80077f6:	4029      	ands	r1, r5
 80077f8:	f041 0120 	orr.w	r1, r1, #32
 80077fc:	6091      	str	r1, [r2, #8]
 80077fe:	689a      	ldr	r2, [r3, #8]
 8007800:	402a      	ands	r2, r5
    pHandle->ADCRegularLocked=false;    
 8007802:	2100      	movs	r1, #0
 8007804:	f042 0220 	orr.w	r2, r2, #32
 8007808:	609a      	str	r2, [r3, #8]
 800780a:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54
}
 800780e:	bc30      	pop	{r4, r5}
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	7fffffc0 	.word	0x7fffffc0

08007818 <BADC_SpeedMeasureOff>:
  LL_TIM_DisableIT_CC1(pHandle->pParams_str->LfTim);
 8007818:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800781a:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 800781c:	68d3      	ldr	r3, [r2, #12]
 800781e:	f023 0302 	bic.w	r3, r3, #2
 8007822:	60d3      	str	r3, [r2, #12]
}
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop

08007828 <BADC_SetSamplingPoint>:
{
 8007828:	b510      	push	{r4, lr}
      uint16_t Threshold_Pwm = (uint16_t) (pHandle->Pwm_H_L.AdcThresholdPwmPerc * latest_busConv/pHandle->Pwm_H_L.Bus2ThresholdConvFactor)
 800782a:	f8b2 e006 	ldrh.w	lr, [r2, #6]
  if (pHandle->DriveMode == VM)
 800782e:	f890 2068 	ldrb.w	r2, [r0, #104]	@ 0x68
      uint16_t Threshold_Pwm = (uint16_t) (pHandle->Pwm_H_L.AdcThresholdPwmPerc * latest_busConv/pHandle->Pwm_H_L.Bus2ThresholdConvFactor)
 8007832:	f8b0 c028 	ldrh.w	ip, [r0, #40]	@ 0x28
        + pHandle->Pwm_H_L.ThresholdCorrectFactor;
 8007836:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
  if (pHandle->DriveMode == VM)
 8007838:	b99a      	cbnz	r2, 8007862 <BADC_SetSamplingPoint+0x3a>
    if (pHandlePWMC->CntPh > pHandle->OnSensingEnThres)
 800783a:	8809      	ldrh	r1, [r1, #0]
 800783c:	8fc4      	ldrh	r4, [r0, #62]	@ 0x3e
 800783e:	428c      	cmp	r4, r1
 8007840:	d224      	bcs.n	800788c <BADC_SetSamplingPoint+0x64>
      uint16_t Threshold_Pwm = (uint16_t) (pHandle->Pwm_H_L.AdcThresholdPwmPerc * latest_busConv/pHandle->Pwm_H_L.Bus2ThresholdConvFactor)
 8007842:	8c42      	ldrh	r2, [r0, #34]	@ 0x22
 8007844:	fb0e f202 	mul.w	r2, lr, r2
 8007848:	fbb2 f2fc 	udiv	r2, r2, ip
 800784c:	4413      	add	r3, r2
 800784e:	b29b      	uxth	r3, r3
      pHandle->IsOnSensingEnabled=true;
 8007850:	2101      	movs	r1, #1
      pHandle->pSensing_Point = &(pHandle->Pwm_H_L.SamplingPointOn);
 8007852:	f100 022e 	add.w	r2, r0, #46	@ 0x2e
      pHandle->IsOnSensingEnabled=true;
 8007856:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
      pHandle->pSensing_Point = &(pHandle->Pwm_H_L.SamplingPointOn);
 800785a:	6382      	str	r2, [r0, #56]	@ 0x38
      pHandle->pSensing_Threshold_HSMod = Threshold_Pwm;
 800785c:	8643      	strh	r3, [r0, #50]	@ 0x32
      pHandle->pSensing_Threshold_LSMod = (uint16_t) (pHandle->Pwm_H_L.AdcThresholdHighPerc * latest_busConv/pHandle->Pwm_H_L.Bus2ThresholdConvFactor)
 800785e:	8683      	strh	r3, [r0, #52]	@ 0x34
}
 8007860:	bd10      	pop	{r4, pc}
    pHandle->IsOnSensingEnabled=false;
 8007862:	2200      	movs	r2, #0
 8007864:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    pHandle->pSensing_Point = &(pHandle->Pwm_H_L.SamplingPointOff);
 8007868:	f100 022c 	add.w	r2, r0, #44	@ 0x2c
 800786c:	6382      	str	r2, [r0, #56]	@ 0x38
    pHandle->pSensing_Threshold_HSMod = (uint16_t) (pHandle->Pwm_H_L.AdcThresholdLowPerc * latest_busConv/pHandle->Pwm_H_L.Bus2ThresholdConvFactor);
 800786e:	8cc2      	ldrh	r2, [r0, #38]	@ 0x26
 8007870:	fb0e f202 	mul.w	r2, lr, r2
 8007874:	fbb2 f2fc 	udiv	r2, r2, ip
 8007878:	8642      	strh	r2, [r0, #50]	@ 0x32
    pHandle->pSensing_Threshold_LSMod = (uint16_t) (pHandle->Pwm_H_L.AdcThresholdHighPerc * latest_busConv/pHandle->Pwm_H_L.Bus2ThresholdConvFactor)
 800787a:	8c82      	ldrh	r2, [r0, #36]	@ 0x24
 800787c:	fb0e f202 	mul.w	r2, lr, r2
 8007880:	fbb2 f2fc 	udiv	r2, r2, ip
                                        + pHandle->Pwm_H_L.ThresholdCorrectFactor;
 8007884:	4413      	add	r3, r2
 8007886:	b29b      	uxth	r3, r3
      pHandle->pSensing_Threshold_LSMod = (uint16_t) (pHandle->Pwm_H_L.AdcThresholdHighPerc * latest_busConv/pHandle->Pwm_H_L.Bus2ThresholdConvFactor)
 8007888:	8683      	strh	r3, [r0, #52]	@ 0x34
}
 800788a:	bd10      	pop	{r4, pc}
    else if (pHandlePWMC->CntPh < pHandle->OnSensingDisThres)
 800788c:	f8b0 4040 	ldrh.w	r4, [r0, #64]	@ 0x40
 8007890:	428c      	cmp	r4, r1
 8007892:	d8e7      	bhi.n	8007864 <BADC_SetSamplingPoint+0x3c>
    else if (pHandle->IsOnSensingEnabled == false)
 8007894:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8007898:	2a00      	cmp	r2, #0
 800789a:	d0e8      	beq.n	800786e <BADC_SetSamplingPoint+0x46>
      uint16_t Threshold_Pwm = (uint16_t) (pHandle->Pwm_H_L.AdcThresholdPwmPerc * latest_busConv/pHandle->Pwm_H_L.Bus2ThresholdConvFactor)
 800789c:	8c42      	ldrh	r2, [r0, #34]	@ 0x22
 800789e:	fb0e f202 	mul.w	r2, lr, r2
 80078a2:	fbb2 f2fc 	udiv	r2, r2, ip
 80078a6:	4413      	add	r3, r2
 80078a8:	b29b      	uxth	r3, r3
      pHandle->pSensing_Threshold_HSMod = Threshold_Pwm;
 80078aa:	8643      	strh	r3, [r0, #50]	@ 0x32
      pHandle->pSensing_Threshold_LSMod = Threshold_Pwm;
 80078ac:	e7ec      	b.n	8007888 <BADC_SetSamplingPoint+0x60>
 80078ae:	bf00      	nop

080078b0 <BADC_IsZcDetected>:
  if (pHandle->SpeedTimerState == COMMUTATION)
 80078b0:	f890 30fc 	ldrb.w	r3, [r0, #252]	@ 0xfc
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d000      	beq.n	80078ba <BADC_IsZcDetected+0xa>
 80078b8:	4770      	bx	lr
      pHandle->MeasuredElAngle = (int16_t) (EL_ANGLE_BASE_CW + step * S16_60_PHASE_SHIFT);
 80078ba:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80078be:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80078c2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
{
 80078c6:	b570      	push	{r4, r5, r6, lr}
      pHandle->MeasuredElAngle = (int16_t) (EL_ANGLE_BASE_CW + step * S16_60_PHASE_SHIFT);
 80078c8:	ebc3 13c3 	rsb	r3, r3, r3, lsl #7
    if(pHandle->Direction == 1)
 80078cc:	f990 e05e 	ldrsb.w	lr, [r0, #94]	@ 0x5e
    LL_ADC_DisableIT_AWD1(pHandle->pParams_str->pAdc[step]);
 80078d0:	6c82      	ldr	r2, [r0, #72]	@ 0x48
    if (TimerSpeed_Counter < pHandle->Last_TimerSpeed_Counter) tStepTime = CounterAutoreload - (pHandle->Last_TimerSpeed_Counter - TimerSpeed_Counter);
 80078d2:	f8d0 50e4 	ldr.w	r5, [r0, #228]	@ 0xe4
      pHandle->MeasuredElAngle = (int16_t) (EL_ANGLE_BASE_CW + step * S16_60_PHASE_SHIFT);
 80078d6:	005b      	lsls	r3, r3, #1
 80078d8:	b29b      	uxth	r3, r3
    if(pHandle->Direction == 1)
 80078da:	f1be 0f01 	cmp.w	lr, #1
      pHandle->MeasuredElAngle = (int16_t) (EL_ANGLE_BASE_CW + step * S16_60_PHASE_SHIFT);
 80078de:	bf0b      	itete	eq
 80078e0:	f5a3 53aa 	subeq.w	r3, r3, #5440	@ 0x1540
      pHandle->MeasuredElAngle = (int16_t) (EL_ANGLE_BASE_CCW + step * S16_60_PHASE_SHIFT);
 80078e4:	f503 43d5 	addne.w	r3, r3, #27264	@ 0x6a80
      pHandle->MeasuredElAngle = (int16_t) (EL_ANGLE_BASE_CW + step * S16_60_PHASE_SHIFT);
 80078e8:	3b15      	subeq	r3, #21
      pHandle->MeasuredElAngle = (int16_t) (EL_ANGLE_BASE_CCW + step * S16_60_PHASE_SHIFT);
 80078ea:	332a      	addne	r3, #42	@ 0x2a
 80078ec:	b21b      	sxth	r3, r3
 80078ee:	f8a0 30bc 	strh.w	r3, [r0, #188]	@ 0xbc
    LL_ADC_DisableIT_AWD1(pHandle->pParams_str->pAdc[step]);
 80078f2:	1c8b      	adds	r3, r1, #2
 80078f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80078f8:	6863      	ldr	r3, [r4, #4]
 80078fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078fe:	6063      	str	r3, [r4, #4]
    if (pHandle->ZcEvents > pHandle->StartUpConsistThreshold) 
 8007900:	f890 4064 	ldrb.w	r4, [r0, #100]	@ 0x64
 8007904:	f890 3020 	ldrb.w	r3, [r0, #32]
 8007908:	429c      	cmp	r4, r3
      pHandle->IsAlgorithmConverged = true;
 800790a:	bf3c      	itt	cc
 800790c:	2401      	movcc	r4, #1
 800790e:	f880 4066 	strbcc.w	r4, [r0, #102]	@ 0x66
    TimerSpeed_Counter = LL_TIM_GetCounter(pHandle->pParams_str->LfTim);
 8007912:	6814      	ldr	r4, [r2, #0]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8007914:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  return (uint32_t)(READ_REG(TIMx->ARR));
 8007916:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
    if (TimerSpeed_Counter < pHandle->Last_TimerSpeed_Counter) tStepTime = CounterAutoreload - (pHandle->Last_TimerSpeed_Counter - TimerSpeed_Counter);
 8007918:	4295      	cmp	r5, r2
    CounterAutoreload = LL_TIM_GetAutoReload(pHandle->pParams_str->LfTim) + 1;
 800791a:	f106 0c01 	add.w	ip, r6, #1
    if (TimerSpeed_Counter < pHandle->Last_TimerSpeed_Counter) tStepTime = CounterAutoreload - (pHandle->Last_TimerSpeed_Counter - TimerSpeed_Counter);
 800791e:	eba2 0505 	sub.w	r5, r2, r5
 8007922:	bf88      	it	hi
 8007924:	4465      	addhi	r5, ip
    pHandle->ZcEvents++;
 8007926:	3301      	adds	r3, #1
    switch(step)
 8007928:	2905      	cmp	r1, #5
    pHandle->ZcEvents++;
 800792a:	f880 3020 	strb.w	r3, [r0, #32]
    switch(step)
 800792e:	d83d      	bhi.n	80079ac <BADC_IsZcDetected+0xfc>
 8007930:	2301      	movs	r3, #1
 8007932:	408b      	lsls	r3, r1
 8007934:	f013 0f2a 	tst.w	r3, #42	@ 0x2a
 8007938:	d122      	bne.n	8007980 <BADC_IsZcDetected+0xd0>
 800793a:	f013 0315 	ands.w	r3, r3, #21
 800793e:	d014      	beq.n	800796a <BADC_IsZcDetected+0xba>
      if(pHandle->Direction == 1)
 8007940:	f1be 0f01 	cmp.w	lr, #1
        if (pHandle->ComputationDelay == 2) tStepTime = pHandle->StepTime_Last;
 8007944:	f890 30d2 	ldrb.w	r3, [r0, #210]	@ 0xd2
      if(pHandle->Direction == 1)
 8007948:	d01f      	beq.n	800798a <BADC_IsZcDetected+0xda>
        if (pHandle->ComputationDelay == 2) tStepTime = pHandle->StepTime_Last;
 800794a:	2b02      	cmp	r3, #2
 800794c:	bf08      	it	eq
 800794e:	f8d0 10e0 	ldreq.w	r1, [r0, #224]	@ 0xe0
        CC_Counter = (uint32_t) (TimerSpeed_Counter + (((uint32_t)((pHandle->ZcRising2CommDelay) * tStepTime)) >> 9));
 8007952:	f8b0 3042 	ldrh.w	r3, [r0, #66]	@ 0x42
        pHandle->StepTime_Up =  tStepTime;
 8007956:	f8c0 50d8 	str.w	r5, [r0, #216]	@ 0xd8
        if (pHandle->ComputationDelay == 2) tStepTime = pHandle->StepTime_Last;
 800795a:	bf18      	it	ne
 800795c:	4629      	movne	r1, r5
        CC_Counter = (uint32_t) (TimerSpeed_Counter + (((uint32_t)((pHandle->ZcRising2CommDelay) * tStepTime)) >> 9));
 800795e:	fb01 f303 	mul.w	r3, r1, r3
        pHandle->StepTime_Last = pHandle->StepTime_Up;
 8007962:	f8c0 50e0 	str.w	r5, [r0, #224]	@ 0xe0
        CC_Counter = (uint32_t) (TimerSpeed_Counter + (((uint32_t)((pHandle->ZcRising2CommDelay) * tStepTime)) >> 9));
 8007966:	eb02 2353 	add.w	r3, r2, r3, lsr #9
    if (true == pHandle->IsLoopClosed)
 800796a:	f890 1067 	ldrb.w	r1, [r0, #103]	@ 0x67
 800796e:	b121      	cbz	r1, 800797a <BADC_IsZcDetected+0xca>
      if (CC_Counter >= CounterAutoreload) CC_Counter -= CounterAutoreload;
 8007970:	4563      	cmp	r3, ip
 8007972:	bf28      	it	cs
 8007974:	eba3 030c 	subcs.w	r3, r3, ip
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007978:	6363      	str	r3, [r4, #52]	@ 0x34
    pHandle->Last_TimerSpeed_Counter = TimerSpeed_Counter;
 800797a:	f8c0 20e4 	str.w	r2, [r0, #228]	@ 0xe4
}
 800797e:	bd70      	pop	{r4, r5, r6, pc}
      if(pHandle->Direction == 1)
 8007980:	f1be 0f01 	cmp.w	lr, #1
        if (pHandle->ComputationDelay == 2) tStepTime = pHandle->StepTime_Last;
 8007984:	f890 30d2 	ldrb.w	r3, [r0, #210]	@ 0xd2
      if(pHandle->Direction == 1)
 8007988:	d0df      	beq.n	800794a <BADC_IsZcDetected+0x9a>
        if (pHandle->ComputationDelay == 2) tStepTime = pHandle->StepTime_Last;
 800798a:	2b02      	cmp	r3, #2
 800798c:	bf08      	it	eq
 800798e:	f8d0 10e0 	ldreq.w	r1, [r0, #224]	@ 0xe0
        CC_Counter = (uint32_t) (TimerSpeed_Counter + (((uint32_t)((pHandle->ZcFalling2CommDelay) * tStepTime)) >> 9));
 8007992:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
        pHandle->StepTime_Down =  tStepTime;
 8007996:	f8c0 50dc 	str.w	r5, [r0, #220]	@ 0xdc
        if (pHandle->ComputationDelay == 2) tStepTime = pHandle->StepTime_Last;
 800799a:	bf18      	it	ne
 800799c:	4629      	movne	r1, r5
        CC_Counter = (uint32_t) (TimerSpeed_Counter + (((uint32_t)((pHandle->ZcFalling2CommDelay) * tStepTime)) >> 9));
 800799e:	fb01 f303 	mul.w	r3, r1, r3
        pHandle->StepTime_Last = pHandle->StepTime_Down;
 80079a2:	f8c0 50e0 	str.w	r5, [r0, #224]	@ 0xe0
        CC_Counter = (uint32_t) (TimerSpeed_Counter + (((uint32_t)((pHandle->ZcFalling2CommDelay) * tStepTime)) >> 9));
 80079a6:	eb02 2353 	add.w	r3, r2, r3, lsr #9
        pHandle->StepTime_Last = pHandle->StepTime_Down;
 80079aa:	e7de      	b.n	800796a <BADC_IsZcDetected+0xba>
    switch(step)
 80079ac:	2300      	movs	r3, #0
 80079ae:	e7dc      	b.n	800796a <BADC_IsZcDetected+0xba>

080079b0 <BADC_CalcAvrgMecSpeedUnit>:
  pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 80079b0:	f9b0 3060 	ldrsh.w	r3, [r0, #96]	@ 0x60
{
 80079b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079b8:	4604      	mov	r4, r0
 80079ba:	460e      	mov	r6, r1
  pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 80079bc:	81c3      	strh	r3, [r0, #14]
  if (0 ==  pHandle->AvrElSpeedDpp)
 80079be:	b1f3      	cbz	r3, 80079fe <BADC_CalcAvrgMecSpeedUnit+0x4e>
    if (pHandle->AvrElSpeedDpp != MAX_PSEUDO_SPEED)
 80079c0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80079c4:	4293      	cmp	r3, r2
 80079c6:	f000 80ae 	beq.w	8007b26 <BADC_CalcAvrgMecSpeedUnit+0x176>
      pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 80079ca:	8881      	ldrh	r1, [r0, #4]
 80079cc:	f8b0 20bc 	ldrh.w	r2, [r0, #188]	@ 0xbc
 80079d0:	1a52      	subs	r2, r2, r1
 80079d2:	b212      	sxth	r2, r2
      pHandle->CompSpeed = (int16_t)((int32_t)(pHandle->DeltaAngle) / (int32_t)(pHandle->PWMNbrPSamplingFreq));
 80079d4:	f8b0 10d0 	ldrh.w	r1, [r0, #208]	@ 0xd0
      pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 80079d8:	f8a0 20ba 	strh.w	r2, [r0, #186]	@ 0xba
      pHandle->CompSpeed = (int16_t)((int32_t)(pHandle->DeltaAngle) / (int32_t)(pHandle->PWMNbrPSamplingFreq));
 80079dc:	fb92 f1f1 	sdiv	r1, r2, r1
      *pMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 80079e0:	8b42      	ldrh	r2, [r0, #26]
      pHandle->CompSpeed = (int16_t)((int32_t)(pHandle->DeltaAngle) / (int32_t)(pHandle->PWMNbrPSamplingFreq));
 80079e2:	f8a0 10be 	strh.w	r1, [r0, #190]	@ 0xbe
      *pMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 80079e6:	fb02 f303 	mul.w	r3, r2, r3
                       / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)));
 80079ea:	69c1      	ldr	r1, [r0, #28]
 80079ec:	7842      	ldrb	r2, [r0, #1]
                       * (int32_t)SPEED_UNIT)
 80079ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80079f2:	005b      	lsls	r3, r3, #1
                       / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)));
 80079f4:	fb01 f202 	mul.w	r2, r1, r2
 80079f8:	fb93 f3f2 	sdiv	r3, r3, r2
      *pMecSpeedUnit = (int16_t)((pHandle->AvrElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 80079fc:	b21b      	sxth	r3, r3
  if (pHandle->IsLoopClosed==true) bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, pMecSpeedUnit);
 80079fe:	f894 2067 	ldrb.w	r2, [r4, #103]	@ 0x67
    *pMecSpeedUnit = 0;
 8007a02:	8033      	strh	r3, [r6, #0]
  if (pHandle->IsLoopClosed==true) bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, pMecSpeedUnit);
 8007a04:	2a00      	cmp	r2, #0
 8007a06:	d176      	bne.n	8007af6 <BADC_CalcAvrgMecSpeedUnit+0x146>
void BADC_CalcAvrgElSpeedDpp(Bemf_ADC_Handle_t * pHandle)
{
  uint32_t wCaptBuf;
  
  /* used to validate the average speed measurement */
  if (pHandle->BufferFilled < pHandle->SpeedBufferSize)
 8007a08:	f894 2069 	ldrb.w	r2, [r4, #105]	@ 0x69
 8007a0c:	f894 504e 	ldrb.w	r5, [r4, #78]	@ 0x4e
  pHandle->_Super.hAvrMecSpeedUnit = *pMecSpeedUnit;
 8007a10:	81a3      	strh	r3, [r4, #12]
  if (pHandle->BufferFilled < pHandle->SpeedBufferSize)
 8007a12:	4295      	cmp	r5, r2
 8007a14:	d853      	bhi.n	8007abe <BADC_CalcAvrgMecSpeedUnit+0x10e>
    /* Nothing to do */
  }
  if (false == pHandle->IsLoopClosed)
  {
    if (pHandle->VirtualElSpeedDpp == 0) pHandle->Counter_Period = 0xFFFF;
    else pHandle->Counter_Period = (uint32_t)(pHandle->PseudoPeriodConv / ((pHandle->LowFreqTimerPsc + 1) * pHandle->VirtualElSpeedDpp));
 8007a16:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
  bool bReliability=true;
 8007a1a:	2001      	movs	r0, #1
    else pHandle->Counter_Period = (uint32_t)(pHandle->PseudoPeriodConv / ((pHandle->LowFreqTimerPsc + 1) * pHandle->VirtualElSpeedDpp));
 8007a1c:	4403      	add	r3, r0
    if (pHandle->VirtualElSpeedDpp == 0) pHandle->Counter_Period = 0xFFFF;
 8007a1e:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	@ 0x62
 8007a22:	2900      	cmp	r1, #0
 8007a24:	d059      	beq.n	8007ada <BADC_CalcAvrgMecSpeedUnit+0x12a>
    else pHandle->Counter_Period = (uint32_t)(pHandle->PseudoPeriodConv / ((pHandle->LowFreqTimerPsc + 1) * pHandle->VirtualElSpeedDpp));
 8007a26:	fb03 f101 	mul.w	r1, r3, r1
 8007a2a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8007a2e:	fbb2 f2f1 	udiv	r2, r2, r1
 8007a32:	2100      	movs	r1, #0
  }
  else
  {
    pHandle->Counter_Period =  pHandle->StepTime_Last;
  }
  wCaptBuf = pHandle->Counter_Period * (pHandle->LowFreqTimerPsc + 1);
 8007a34:	fb02 f303 	mul.w	r3, r2, r3
    if (pHandle->VirtualElSpeedDpp == 0) pHandle->Counter_Period = 0xFFFF;
 8007a38:	f8c4 20d4 	str.w	r2, [r4, #212]	@ 0xd4

  /* Filtering to fast speed... could be a glitch  ? */
  /* the MAX_PSEUDO_SPEED is temporary in the buffer, and never included in average computation*/
  if (wCaptBuf < pHandle->MinPeriod)
 8007a3c:	f8d4 20cc 	ldr.w	r2, [r4, #204]	@ 0xcc
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d356      	bcc.n	8007af2 <BADC_CalcAvrgMecSpeedUnit+0x142>
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->ElPeriodSum -= pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8007a44:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	@ 0xb8
    if (wCaptBuf >= pHandle->MaxPeriod)
 8007a48:	f8d4 c0c8 	ldr.w	ip, [r4, #200]	@ 0xc8
    pHandle->ElPeriodSum -= pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8007a4c:	6da6      	ldr	r6, [r4, #88]	@ 0x58
    {
      pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx] = (int32_t)pHandle->MaxPeriod * pHandle->Direction;
 8007a4e:	f994 e05e 	ldrsb.w	lr, [r4, #94]	@ 0x5e
 8007a52:	eb04 0882 	add.w	r8, r4, r2, lsl #2
    if (wCaptBuf >= pHandle->MaxPeriod)
 8007a56:	4563      	cmp	r3, ip
    pHandle->ElPeriodSum -= pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8007a58:	f8d8 706c 	ldr.w	r7, [r8, #108]	@ 0x6c
      pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx] = (int32_t)wCaptBuf ;
      pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
      pHandle->ElPeriodSum += pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx];
    }
    /* Update pointers to speed buffer */
    pHandle->SpeedFIFOIdx++;
 8007a5c:	f102 0201 	add.w	r2, r2, #1
    pHandle->ElPeriodSum -= pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8007a60:	eba6 0607 	sub.w	r6, r6, r7
      pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 8007a64:	bf38      	it	cc
 8007a66:	fb0e f703 	mulcc.w	r7, lr, r3
    pHandle->ElPeriodSum -= pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8007a6a:	65a6      	str	r6, [r4, #88]	@ 0x58
      pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx] = (int32_t)pHandle->MaxPeriod * pHandle->Direction;
 8007a6c:	bf2c      	ite	cs
 8007a6e:	fb0e f70c 	mulcs.w	r7, lr, ip
      pHandle->ElPeriodSum += pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx];
 8007a72:	19f6      	addcc	r6, r6, r7
    pHandle->SpeedFIFOIdx++;
 8007a74:	b292      	uxth	r2, r2
      pHandle->ElPeriodSum += pHandle->SpeedBufferDpp[pHandle->SpeedFIFOIdx];
 8007a76:	bf38      	it	cc
 8007a78:	65a6      	strcc	r6, [r4, #88]	@ 0x58
    if (pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize)
    {
      pHandle->SpeedFIFOIdx = 0U;
 8007a7a:	42aa      	cmp	r2, r5
 8007a7c:	bf08      	it	eq
 8007a7e:	2200      	moveq	r2, #0
 8007a80:	f8c8 706c 	str.w	r7, [r8, #108]	@ 0x6c
    if (pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize)
 8007a84:	f8a4 20b8 	strh.w	r2, [r4, #184]	@ 0xb8
    }
    if (((pHandle->BufferFilled < pHandle->SpeedBufferSize) && (wCaptBuf != 0U)) 
 8007a88:	f894 2069 	ldrb.w	r2, [r4, #105]	@ 0x69
 8007a8c:	42aa      	cmp	r2, r5
 8007a8e:	d227      	bcs.n	8007ae0 <BADC_CalcAvrgMecSpeedUnit+0x130>
 8007a90:	bb3b      	cbnz	r3, 8007ae2 <BADC_CalcAvrgMecSpeedUnit+0x132>
        || (false == pHandle->IsLoopClosed))
 8007a92:	b331      	cbz	r1, 8007ae2 <BADC_CalcAvrgMecSpeedUnit+0x132>
      pHandle->SpeedFIFOIdx = 0U;
 8007a94:	2200      	movs	r2, #0
 8007a96:	f104 0168 	add.w	r1, r4, #104	@ 0x68
 8007a9a:	4613      	mov	r3, r2
    else
    {
      /* Average speed allow to smooth the mechanical sensors misalignement */
      int32_t  tElPeriodSum = 0;
      uint8_t i;
      for (i=0; i < pHandle->SpeedBufferSize; i++)
 8007a9c:	3201      	adds	r2, #1
      {
        tElPeriodSum += pHandle->SpeedBufferDpp[i];
 8007a9e:	f851 7f04 	ldr.w	r7, [r1, #4]!
      for (i=0; i < pHandle->SpeedBufferSize; i++)
 8007aa2:	b2d6      	uxtb	r6, r2
 8007aa4:	42ae      	cmp	r6, r5
        tElPeriodSum += pHandle->SpeedBufferDpp[i];
 8007aa6:	443b      	add	r3, r7
      for (i=0; i < pHandle->SpeedBufferSize; i++)
 8007aa8:	d3f8      	bcc.n	8007a9c <BADC_CalcAvrgMecSpeedUnit+0xec>
      }             
      pHandle->AvrElSpeedDpp = (int16_t)((int32_t)pHandle->PseudoPeriodConv /
                                               (tElPeriodSum / (int32_t)pHandle->SpeedBufferSize)); /* Average value */
 8007aaa:	fb93 f3f5 	sdiv	r3, r3, r5
      pHandle->AvrElSpeedDpp = (int16_t)((int32_t)pHandle->PseudoPeriodConv /
 8007aae:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8007ab2:	fb92 f2f3 	sdiv	r2, r2, r3
 8007ab6:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
}
 8007aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pHandle->BufferFilled++;
 8007abe:	f894 2069 	ldrb.w	r2, [r4, #105]	@ 0x69
    else pHandle->Counter_Period = (uint32_t)(pHandle->PseudoPeriodConv / ((pHandle->LowFreqTimerPsc + 1) * pHandle->VirtualElSpeedDpp));
 8007ac2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
    if (pHandle->VirtualElSpeedDpp == 0) pHandle->Counter_Period = 0xFFFF;
 8007ac6:	f9b4 1062 	ldrsh.w	r1, [r4, #98]	@ 0x62
    pHandle->BufferFilled++;
 8007aca:	3201      	adds	r2, #1
 8007acc:	b2d2      	uxtb	r2, r2
 8007ace:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
    else pHandle->Counter_Period = (uint32_t)(pHandle->PseudoPeriodConv / ((pHandle->LowFreqTimerPsc + 1) * pHandle->VirtualElSpeedDpp));
 8007ad2:	3301      	adds	r3, #1
  bool bReliability=true;
 8007ad4:	2001      	movs	r0, #1
    if (pHandle->VirtualElSpeedDpp == 0) pHandle->Counter_Period = 0xFFFF;
 8007ad6:	2900      	cmp	r1, #0
 8007ad8:	d1a5      	bne.n	8007a26 <BADC_CalcAvrgMecSpeedUnit+0x76>
 8007ada:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007ade:	e7a9      	b.n	8007a34 <BADC_CalcAvrgMecSpeedUnit+0x84>
        || (false == pHandle->IsLoopClosed))
 8007ae0:	bb59      	cbnz	r1, 8007b3a <BADC_CalcAvrgMecSpeedUnit+0x18a>
      uint32_t tempReg = (pHandle->PseudoPeriodConv / wCaptBuf) * (uint32_t)pHandle->Direction;
 8007ae2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8007ae6:	fbb2 f2f3 	udiv	r2, r2, r3
 8007aea:	fb0e f202 	mul.w	r2, lr, r2
      pHandle->AvrElSpeedDpp = (int16_t)tempReg;
 8007aee:	f8a4 2060 	strh.w	r2, [r4, #96]	@ 0x60
}
 8007af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pHandle->IsLoopClosed==true) bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, pMecSpeedUnit);
 8007af6:	4631      	mov	r1, r6
 8007af8:	4620      	mov	r0, r4
 8007afa:	f000 ffbb 	bl	8008a74 <SPD_IsMecSpeedReliable>
  if (pHandle->BufferFilled < pHandle->SpeedBufferSize)
 8007afe:	f894 3069 	ldrb.w	r3, [r4, #105]	@ 0x69
 8007b02:	f894 504e 	ldrb.w	r5, [r4, #78]	@ 0x4e
  pHandle->_Super.hAvrMecSpeedUnit = *pMecSpeedUnit;
 8007b06:	f9b6 2000 	ldrsh.w	r2, [r6]
  if (false == pHandle->IsLoopClosed)
 8007b0a:	f894 1067 	ldrb.w	r1, [r4, #103]	@ 0x67
  pHandle->_Super.hAvrMecSpeedUnit = *pMecSpeedUnit;
 8007b0e:	81a2      	strh	r2, [r4, #12]
  if (pHandle->BufferFilled < pHandle->SpeedBufferSize)
 8007b10:	42ab      	cmp	r3, r5
 8007b12:	d30b      	bcc.n	8007b2c <BADC_CalcAvrgMecSpeedUnit+0x17c>
    else pHandle->Counter_Period = (uint32_t)(pHandle->PseudoPeriodConv / ((pHandle->LowFreqTimerPsc + 1) * pHandle->VirtualElSpeedDpp));
 8007b14:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8007b18:	3301      	adds	r3, #1
  if (false == pHandle->IsLoopClosed)
 8007b1a:	2900      	cmp	r1, #0
 8007b1c:	f43f af7f 	beq.w	8007a1e <BADC_CalcAvrgMecSpeedUnit+0x6e>
    pHandle->Counter_Period =  pHandle->StepTime_Last;
 8007b20:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
 8007b24:	e786      	b.n	8007a34 <BADC_CalcAvrgMecSpeedUnit+0x84>
      *pMecSpeedUnit = (int16_t)pHandle->SatSpeed;
 8007b26:	f9b0 30c0 	ldrsh.w	r3, [r0, #192]	@ 0xc0
 8007b2a:	e768      	b.n	80079fe <BADC_CalcAvrgMecSpeedUnit+0x4e>
    pHandle->BufferFilled++;
 8007b2c:	f894 3069 	ldrb.w	r3, [r4, #105]	@ 0x69
 8007b30:	3301      	adds	r3, #1
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	f884 3069 	strb.w	r3, [r4, #105]	@ 0x69
 8007b38:	e7ec      	b.n	8007b14 <BADC_CalcAvrgMecSpeedUnit+0x164>
      for (i=0; i < pHandle->SpeedBufferSize; i++)
 8007b3a:	2d00      	cmp	r5, #0
 8007b3c:	d1aa      	bne.n	8007a94 <BADC_CalcAvrgMecSpeedUnit+0xe4>
 8007b3e:	462b      	mov	r3, r5
 8007b40:	e7b5      	b.n	8007aae <BADC_CalcAvrgMecSpeedUnit+0xfe>
 8007b42:	bf00      	nop

08007b44 <BADC_SetDirection>:
  if (MC_NULL == pHandle)
 8007b44:	b108      	cbz	r0, 8007b4a <BADC_SetDirection+0x6>
    pHandle->Direction = direction;
 8007b46:	f880 105e 	strb.w	r1, [r0, #94]	@ 0x5e
}
 8007b4a:	4770      	bx	lr

08007b4c <BADC_IsObserverConverged>:
}
 8007b4c:	f890 0066 	ldrb.w	r0, [r0, #102]	@ 0x66
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop

08007b54 <BADC_CalcElAngle>:
    if (pHandle->_Super.hElSpeedDpp != MAX_PSEUDO_SPEED)
 8007b54:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 8007b58:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8007b5c:	428a      	cmp	r2, r1
{
 8007b5e:	4603      	mov	r3, r0
    if (pHandle->_Super.hElSpeedDpp != MAX_PSEUDO_SPEED)
 8007b60:	d013      	beq.n	8007b8a <BADC_CalcElAngle+0x36>
      if (false == pHandle->IsLoopClosed)
 8007b62:	f890 1067 	ldrb.w	r1, [r0, #103]	@ 0x67
        pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8007b66:	f9b0 00bc 	ldrsh.w	r0, [r0, #188]	@ 0xbc
      if (false == pHandle->IsLoopClosed)
 8007b6a:	b961      	cbnz	r1, 8007b86 <BADC_CalcElAngle+0x32>
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8007b6c:	8899      	ldrh	r1, [r3, #4]
        pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8007b6e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
        pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8007b72:	fa1f fc82 	uxth.w	ip, r2
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8007b76:	4461      	add	r1, ip
        pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8007b78:	4484      	add	ip, r0
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8007b7a:	f8b3 00be 	ldrh.w	r0, [r3, #190]	@ 0xbe
        pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8007b7e:	f8a3 c0bc 	strh.w	ip, [r3, #188]	@ 0xbc
        pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8007b82:	4401      	add	r1, r0
 8007b84:	b208      	sxth	r0, r1
        pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 8007b86:	8098      	strh	r0, [r3, #4]
}
 8007b88:	4770      	bx	lr
      pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 8007b8a:	8880      	ldrh	r0, [r0, #4]
 8007b8c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007b90:	4410      	add	r0, r2
 8007b92:	b200      	sxth	r0, r0
        pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 8007b94:	8098      	strh	r0, [r3, #4]
}
 8007b96:	4770      	bx	lr

08007b98 <BADC_StepChangeEvent>:
  *         initialize parameters at step change 
  * @param  pHandle: handler of the current instance of the Bemf_ADC component
  * @param  hElSpeedDpp: Mechanical speed imposed by virtual speed component
  */
void BADC_StepChangeEvent(Bemf_ADC_Handle_t * pHandle, int16_t hElSpeedDpp)
{
 8007b98:	b430      	push	{r4, r5}
  uint32_t tempReg;
  if (pHandle->IsLoopClosed == false) tempReg = LL_TIM_GetCounter(pHandle->pParams_str->LfTim) + pHandle->DemagCounterThreshold;
 8007b9a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8007b9c:	f890 4067 	ldrb.w	r4, [r0, #103]	@ 0x67
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f8d0 20e8 	ldr.w	r2, [r0, #232]	@ 0xe8
 8007ba6:	b9b4      	cbnz	r4, 8007bd6 <BADC_StepChangeEvent+0x3e>
  return (uint32_t)(READ_REG(TIMx->CNT));
 8007ba8:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8007baa:	442a      	add	r2, r5
  return (uint32_t)(READ_REG(TIMx->ARR));
 8007bac:	6add      	ldr	r5, [r3, #44]	@ 0x2c
  else tempReg = LL_TIM_OC_GetCompareCH1(pHandle->pParams_str->LfTim) + pHandle->DemagCounterThreshold;
  uint32_t CounterAutoreload = LL_TIM_GetAutoReload(pHandle->pParams_str->LfTim) + 1;
  pHandle->SpeedTimerState = DEMAGNETIZATION;
 8007bae:	f880 40fc 	strb.w	r4, [r0, #252]	@ 0xfc
  uint32_t CounterAutoreload = LL_TIM_GetAutoReload(pHandle->pParams_str->LfTim) + 1;
 8007bb2:	1c6c      	adds	r4, r5, #1
  if (tempReg >= CounterAutoreload) tempReg -= CounterAutoreload;
 8007bb4:	42a2      	cmp	r2, r4
 8007bb6:	d231      	bcs.n	8007c1c <BADC_StepChangeEvent+0x84>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8007bb8:	f06f 0402 	mvn.w	r4, #2
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007bbc:	635a      	str	r2, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8007bbe:	611c      	str	r4, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8007bc0:	68da      	ldr	r2, [r3, #12]
  LL_TIM_OC_SetCompareCH1(pHandle->pParams_str->LfTim, tempReg);
  LL_TIM_ClearFlag_CC1(pHandle->pParams_str->LfTim);
  LL_TIM_EnableIT_CC1(pHandle->pParams_str->LfTim);
  if (false == pHandle->IsLoopClosed)
  {
    if (hElSpeedDpp < 0)
 8007bc2:	2900      	cmp	r1, #0
 8007bc4:	f042 0202 	orr.w	r2, r2, #2
    {
      pHandle->VirtualElSpeedDpp = - hElSpeedDpp;
 8007bc8:	bfb8      	it	lt
 8007bca:	4249      	neglt	r1, r1
 8007bcc:	60da      	str	r2, [r3, #12]
    {
      ElAngleUpdate = S16_60_PHASE_SHIFT  ;
    }
    pHandle->MeasuredElAngle += ElAngleUpdate;
  }
}
 8007bce:	bc30      	pop	{r4, r5}
      pHandle->VirtualElSpeedDpp = hElSpeedDpp;
 8007bd0:	f8a0 1062 	strh.w	r1, [r0, #98]	@ 0x62
}
 8007bd4:	4770      	bx	lr
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8007bd6:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
  return (uint32_t)(READ_REG(TIMx->ARR));
 8007bd8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
  else tempReg = LL_TIM_OC_GetCompareCH1(pHandle->pParams_str->LfTim) + pHandle->DemagCounterThreshold;
 8007bda:	4422      	add	r2, r4
  uint32_t CounterAutoreload = LL_TIM_GetAutoReload(pHandle->pParams_str->LfTim) + 1;
 8007bdc:	3101      	adds	r1, #1
  pHandle->SpeedTimerState = DEMAGNETIZATION;
 8007bde:	2400      	movs	r4, #0
  if (tempReg >= CounterAutoreload) tempReg -= CounterAutoreload;
 8007be0:	428a      	cmp	r2, r1
  pHandle->SpeedTimerState = DEMAGNETIZATION;
 8007be2:	f880 40fc 	strb.w	r4, [r0, #252]	@ 0xfc
  if (tempReg >= CounterAutoreload) tempReg -= CounterAutoreload;
 8007be6:	d300      	bcc.n	8007bea <BADC_StepChangeEvent+0x52>
 8007be8:	1a52      	subs	r2, r2, r1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8007bea:	f06f 0102 	mvn.w	r1, #2
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007bee:	635a      	str	r2, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8007bf0:	6119      	str	r1, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8007bf2:	68da      	ldr	r2, [r3, #12]
 8007bf4:	f042 0202 	orr.w	r2, r2, #2
 8007bf8:	60da      	str	r2, [r3, #12]
    if(pHandle->Direction == -1)
 8007bfa:	f990 405e 	ldrsb.w	r4, [r0, #94]	@ 0x5e
    pHandle->MeasuredElAngle += ElAngleUpdate;
 8007bfe:	f8b0 20bc 	ldrh.w	r2, [r0, #188]	@ 0xbc
    if(pHandle->Direction == -1)
 8007c02:	f642 23aa 	movw	r3, #10922	@ 0x2aaa
 8007c06:	f24d 5156 	movw	r1, #54614	@ 0xd556
 8007c0a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007c0e:	bf08      	it	eq
 8007c10:	460b      	moveq	r3, r1
    pHandle->MeasuredElAngle += ElAngleUpdate;
 8007c12:	4413      	add	r3, r2
}
 8007c14:	bc30      	pop	{r4, r5}
    pHandle->MeasuredElAngle += ElAngleUpdate;
 8007c16:	f8a0 30bc 	strh.w	r3, [r0, #188]	@ 0xbc
}
 8007c1a:	4770      	bx	lr
  if (tempReg >= CounterAutoreload) tempReg -= CounterAutoreload;
 8007c1c:	1b12      	subs	r2, r2, r4
 8007c1e:	e7cb      	b.n	8007bb8 <BADC_StepChangeEvent+0x20>

08007c20 <BADC_CalcRevUpDemagTime>:
  * @param  pHandle: handler of the current instance of the Bemf_ADC component
  */
void BADC_CalcRevUpDemagTime(Bemf_ADC_Handle_t *pHandle)
{
  int16_t hSpeed;
  hSpeed = (int16_t)((pHandle->VirtualElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 8007c20:	f9b0 3062 	ldrsh.w	r3, [r0, #98]	@ 0x62
 8007c24:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
                       * (int32_t)SPEED_UNIT)
                       / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)));;
 8007c28:	7842      	ldrb	r2, [r0, #1]
 8007c2a:	69c1      	ldr	r1, [r0, #28]
  hSpeed = (int16_t)((pHandle->VirtualElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 8007c2c:	fb0c f303 	mul.w	r3, ip, r3
                       * (int32_t)SPEED_UNIT)
 8007c30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                       / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)));;
 8007c34:	fb01 f202 	mul.w	r2, r1, r2
                       * (int32_t)SPEED_UNIT)
 8007c38:	005b      	lsls	r3, r3, #1
                       / ((int32_t)(pHandle->_Super.DPPConvFactor) * (int32_t)(pHandle->_Super.bElToMecRatio)));;
 8007c3a:	fb93 f3f2 	sdiv	r3, r3, r2
  hSpeed = (int16_t)((pHandle->VirtualElSpeedDpp * (int32_t)pHandle->_Super.hMeasurementFrequency
 8007c3e:	b21b      	sxth	r3, r3
  if (hSpeed == 0)
  {
    pHandle->DemagCounterThreshold = pHandle->DemagParams.DemagMinimumThreshold;;
 8007c40:	f8d0 20f8 	ldr.w	r2, [r0, #248]	@ 0xf8
  if (hSpeed == 0)
 8007c44:	b133      	cbz	r3, 8007c54 <BADC_CalcRevUpDemagTime+0x34>
  }
  else
  {
    pHandle->DemagCounterThreshold = (uint32_t) (pHandle->DemagParams.RevUpDemagSpeedConv / hSpeed);
 8007c46:	f8d0 10f0 	ldr.w	r1, [r0, #240]	@ 0xf0
 8007c4a:	fbb1 f1f3 	udiv	r1, r1, r3
  }
  if (pHandle->DemagCounterThreshold < pHandle->DemagParams.DemagMinimumThreshold)
 8007c4e:	428a      	cmp	r2, r1
 8007c50:	bf38      	it	cc
 8007c52:	460a      	movcc	r2, r1
 8007c54:	f8c0 20e8 	str.w	r2, [r0, #232]	@ 0xe8
  {
    pHandle->DemagCounterThreshold = pHandle->DemagParams.DemagMinimumThreshold;
  }  
}
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop

08007c5c <BADC_CalcRunDemagTime>:
  * @param  pHandle: handler of the current instance of the Bemf_ADC component
  */
void BADC_CalcRunDemagTime(Bemf_ADC_Handle_t *pHandle)
{
  int16_t hSpeed;
  hSpeed = pHandle->_Super.hAvrMecSpeedUnit;
 8007c5c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  if (hSpeed < 0) hSpeed = - hSpeed; 
  if (hSpeed < pHandle->DemagParams.DemagMinimumSpeedUnit)
 8007c60:	f8b0 10ec 	ldrh.w	r1, [r0, #236]	@ 0xec
  {   
    pHandle->DemagCounterThreshold = (uint32_t) (pHandle->DemagParams.RunDemagSpeedConv / hSpeed);
    if (pHandle->DemagCounterThreshold < pHandle->DemagParams.DemagMinimumThreshold)
 8007c64:	f8d0 20f8 	ldr.w	r2, [r0, #248]	@ 0xf8
  if (hSpeed < 0) hSpeed = - hSpeed; 
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	bfbc      	itt	lt
 8007c6c:	425b      	neglt	r3, r3
 8007c6e:	b21b      	sxthlt	r3, r3
  if (hSpeed < pHandle->DemagParams.DemagMinimumSpeedUnit)
 8007c70:	428b      	cmp	r3, r1
 8007c72:	da06      	bge.n	8007c82 <BADC_CalcRunDemagTime+0x26>
    pHandle->DemagCounterThreshold = (uint32_t) (pHandle->DemagParams.RunDemagSpeedConv / hSpeed);
 8007c74:	f8d0 10f4 	ldr.w	r1, [r0, #244]	@ 0xf4
 8007c78:	fbb1 f1f3 	udiv	r1, r1, r3
    if (pHandle->DemagCounterThreshold < pHandle->DemagParams.DemagMinimumThreshold)
 8007c7c:	428a      	cmp	r2, r1
 8007c7e:	bf38      	it	cc
 8007c80:	460a      	movcc	r2, r1
    {
      pHandle->DemagCounterThreshold = pHandle->DemagParams.DemagMinimumThreshold;
 8007c82:	f8c0 20e8 	str.w	r2, [r0, #232]	@ 0xe8
  } 
  else
  {   
    pHandle->DemagCounterThreshold = pHandle->DemagParams.DemagMinimumThreshold;
  }
}
 8007c86:	4770      	bx	lr

08007c88 <BADC_SetLoopClosed>:
  * @param  pHandle: handler of the current instance of the STO component
  */
void BADC_SetLoopClosed(Bemf_ADC_Handle_t *pHandle)
{
  uint32_t CC_Counter;
  uint32_t CounterAutoreload = LL_TIM_GetAutoReload(pHandle->pParams_str->LfTim) + 1;
 8007c88:	6c82      	ldr	r2, [r0, #72]	@ 0x48
  pHandle->IsLoopClosed=true;
  CC_Counter = LL_TIM_OC_GetCompareCH1(pHandle->pParams_str->LfTim);
  CC_Counter = pHandle->Counter_Period + CC_Counter - pHandle->DemagCounterThreshold;
 8007c8a:	f8d0 30d4 	ldr.w	r3, [r0, #212]	@ 0xd4
  uint32_t CounterAutoreload = LL_TIM_GetAutoReload(pHandle->pParams_str->LfTim) + 1;
 8007c8e:	6811      	ldr	r1, [r2, #0]
{
 8007c90:	b410      	push	{r4}
  pHandle->IsLoopClosed=true;
 8007c92:	f04f 0c01 	mov.w	ip, #1
  CC_Counter = pHandle->Counter_Period + CC_Counter - pHandle->DemagCounterThreshold;
 8007c96:	f8d0 40e8 	ldr.w	r4, [r0, #232]	@ 0xe8
  return (uint32_t)(READ_REG(TIMx->ARR));
 8007c9a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
  pHandle->IsLoopClosed=true;
 8007c9c:	f880 c067 	strb.w	ip, [r0, #103]	@ 0x67
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8007ca0:	6b48      	ldr	r0, [r1, #52]	@ 0x34
  CC_Counter = pHandle->Counter_Period + CC_Counter - pHandle->DemagCounterThreshold;
 8007ca2:	1b1b      	subs	r3, r3, r4
 8007ca4:	4403      	add	r3, r0
  uint32_t CounterAutoreload = LL_TIM_GetAutoReload(pHandle->pParams_str->LfTim) + 1;
 8007ca6:	4462      	add	r2, ip
  if (CC_Counter >= CounterAutoreload) CC_Counter -= CounterAutoreload;
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	bf98      	it	ls
 8007cac:	1a9b      	subls	r3, r3, r2
  LL_TIM_OC_SetCompareCH1(pHandle->pParams_str->LfTim, CC_Counter);
}
 8007cae:	f85d 4b04 	ldr.w	r4, [sp], #4
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007cb2:	634b      	str	r3, [r1, #52]	@ 0x34
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop

08007cb8 <BADC_SetBemfSensorlessParam>:
  * @param  OnSensingDisThres: Minimum duty cycle for on-sensing Deactivationg
  * @param  ComputationDelay: Selection of the period for zero crossing to step change delay computation  
  */
void BADC_SetBemfSensorlessParam(Bemf_ADC_Handle_t *pHandle, Bemf_Sensing_Params *BemfAdcConfig, uint16_t *ZcRising2CommDelay, uint16_t *ZcFalling2CommDelay,
                                   Bemf_Demag_Params *bemfAdcDemagConfig, uint16_t *OnSensingEnThres, uint16_t *OnSensingDisThres, uint16_t *ComputationDelay)      
{  
 8007cb8:	b430      	push	{r4, r5}
  pHandle->Pwm_H_L.AdcThresholdPwmPerc = BemfAdcConfig->AdcThresholdPwmPerc;
 8007cba:	680d      	ldr	r5, [r1, #0]
 8007cbc:	f8c0 5022 	str.w	r5, [r0, #34]	@ 0x22
  pHandle->Pwm_H_L.AdcThresholdHighPerc = BemfAdcConfig->AdcThresholdHighPerc;
  pHandle->Pwm_H_L.AdcThresholdLowPerc = BemfAdcConfig->AdcThresholdLowPerc;
 8007cc0:	888d      	ldrh	r5, [r1, #4]
 8007cc2:	84c5      	strh	r5, [r0, #38]	@ 0x26
  pHandle->Pwm_H_L.SamplingPointOff = BemfAdcConfig->SamplingPointOff;
 8007cc4:	f8d1 500a 	ldr.w	r5, [r1, #10]
 8007cc8:	62c5      	str	r5, [r0, #44]	@ 0x2c
  pHandle->Pwm_H_L.SamplingPointOn = BemfAdcConfig->SamplingPointOn; 
  pHandle->Pwm_H_L.AWDfiltering = BemfAdcConfig->AWDfiltering; 
 8007cca:	7b89      	ldrb	r1, [r1, #14]
 8007ccc:	f880 1030 	strb.w	r1, [r0, #48]	@ 0x30
  pHandle->ZcRising2CommDelay = *ZcRising2CommDelay;
 8007cd0:	8812      	ldrh	r2, [r2, #0]
{  
 8007cd2:	9c02      	ldr	r4, [sp, #8]
  pHandle->ZcRising2CommDelay = *ZcRising2CommDelay;
 8007cd4:	f8a0 2042 	strh.w	r2, [r0, #66]	@ 0x42
  pHandle->ZcFalling2CommDelay = *ZcFalling2CommDelay;
 8007cd8:	881a      	ldrh	r2, [r3, #0]
  pHandle->DemagParams.DemagMinimumSpeedUnit = bemfAdcDemagConfig->DemagMinimumSpeedUnit;
 8007cda:	8823      	ldrh	r3, [r4, #0]
 8007cdc:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
  pHandle->DemagParams.DemagMinimumThreshold = bemfAdcDemagConfig->DemagMinimumThreshold;
 8007ce0:	68e3      	ldr	r3, [r4, #12]
  pHandle->ZcFalling2CommDelay = *ZcFalling2CommDelay;
 8007ce2:	f8a0 2044 	strh.w	r2, [r0, #68]	@ 0x44
  pHandle->DemagParams.DemagMinimumThreshold = bemfAdcDemagConfig->DemagMinimumThreshold;
 8007ce6:	f8c0 30f8 	str.w	r3, [r0, #248]	@ 0xf8
{  
 8007cea:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
  pHandle->OnSensingEnThres = *OnSensingEnThres;
 8007cee:	8812      	ldrh	r2, [r2, #0]
 8007cf0:	87c2      	strh	r2, [r0, #62]	@ 0x3e
  pHandle->OnSensingDisThres = *OnSensingDisThres;
 8007cf2:	881a      	ldrh	r2, [r3, #0]
{  
 8007cf4:	9b05      	ldr	r3, [sp, #20]
  pHandle->OnSensingDisThres = *OnSensingDisThres;
 8007cf6:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
  pHandle->ComputationDelay = (uint8_t) (*ComputationDelay);
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	f880 30d2 	strb.w	r3, [r0, #210]	@ 0xd2
}
 8007d00:	bc30      	pop	{r4, r5}
 8007d02:	4770      	bx	lr

08007d04 <BADC_GetBemfSensorlessParam>:
  * @param  ComputationDelay: Selection of the period for zero crossing to step change delay computation  
  */
void BADC_GetBemfSensorlessParam(Bemf_ADC_Handle_t *pHandle, Bemf_Sensing_Params *BemfAdcConfig, uint16_t *ZcRising2CommDelay, uint16_t *ZcFalling2CommDelay,
                                   Bemf_Demag_Params *BemfAdcDemagConfig, uint16_t *OnSensingEnThres, uint16_t *OnSensingDisThres, uint16_t *ComputationDelay)        
{  
  BemfAdcConfig->AdcThresholdPwmPerc =   pHandle->Pwm_H_L.AdcThresholdPwmPerc;
 8007d04:	f8d0 c022 	ldr.w	ip, [r0, #34]	@ 0x22
{  
 8007d08:	b430      	push	{r4, r5}
  BemfAdcConfig->AdcThresholdPwmPerc =   pHandle->Pwm_H_L.AdcThresholdPwmPerc;
 8007d0a:	f8c1 c000 	str.w	ip, [r1]
  BemfAdcConfig->AdcThresholdHighPerc = pHandle->Pwm_H_L.AdcThresholdHighPerc;
  BemfAdcConfig->AdcThresholdLowPerc = pHandle->Pwm_H_L.AdcThresholdLowPerc;
 8007d0e:	f8b0 c026 	ldrh.w	ip, [r0, #38]	@ 0x26
 8007d12:	f8a1 c004 	strh.w	ip, [r1, #4]
  BemfAdcConfig->SamplingPointOff = pHandle->Pwm_H_L.SamplingPointOff;
 8007d16:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
 8007d18:	f8c1 500a 	str.w	r5, [r1, #10]
  BemfAdcConfig->SamplingPointOn = pHandle->Pwm_H_L.SamplingPointOn;
  BemfAdcConfig->AWDfiltering = pHandle->Pwm_H_L.AWDfiltering;
 8007d1c:	f890 c030 	ldrb.w	ip, [r0, #48]	@ 0x30
 8007d20:	f881 c00e 	strb.w	ip, [r1, #14]
  *ZcRising2CommDelay = pHandle->ZcRising2CommDelay;
 8007d24:	f8b0 1042 	ldrh.w	r1, [r0, #66]	@ 0x42
 8007d28:	8011      	strh	r1, [r2, #0]
  *ZcFalling2CommDelay = pHandle->ZcFalling2CommDelay;
 8007d2a:	f8b0 2044 	ldrh.w	r2, [r0, #68]	@ 0x44
 8007d2e:	801a      	strh	r2, [r3, #0]
{  
 8007d30:	9c02      	ldr	r4, [sp, #8]
  BemfAdcDemagConfig->DemagMinimumSpeedUnit = pHandle->DemagParams.DemagMinimumSpeedUnit;
 8007d32:	f8b0 20ec 	ldrh.w	r2, [r0, #236]	@ 0xec
  BemfAdcDemagConfig->DemagMinimumThreshold = pHandle->DemagParams.DemagMinimumThreshold;
 8007d36:	f8d0 30f8 	ldr.w	r3, [r0, #248]	@ 0xf8
  *OnSensingEnThres = pHandle->OnSensingEnThres;
 8007d3a:	8fc1      	ldrh	r1, [r0, #62]	@ 0x3e
  BemfAdcDemagConfig->DemagMinimumSpeedUnit = pHandle->DemagParams.DemagMinimumSpeedUnit;
 8007d3c:	8022      	strh	r2, [r4, #0]
  BemfAdcDemagConfig->DemagMinimumThreshold = pHandle->DemagParams.DemagMinimumThreshold;
 8007d3e:	60e3      	str	r3, [r4, #12]
{  
 8007d40:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
  *OnSensingEnThres = pHandle->OnSensingEnThres;
 8007d44:	8011      	strh	r1, [r2, #0]
  *OnSensingDisThres = pHandle->OnSensingDisThres;
 8007d46:	f8b0 2040 	ldrh.w	r2, [r0, #64]	@ 0x40
 8007d4a:	801a      	strh	r2, [r3, #0]
{  
 8007d4c:	9b05      	ldr	r3, [sp, #20]
  *ComputationDelay = (uint16_t) pHandle->ComputationDelay;
 8007d4e:	f890 20d2 	ldrb.w	r2, [r0, #210]	@ 0xd2
 8007d52:	801a      	strh	r2, [r3, #0]
}
 8007d54:	bc30      	pop	{r4, r5}
 8007d56:	4770      	bx	lr

08007d58 <MCPA_dataLog>:
  * @brief  Allocates and fills buffer with asynchronous data to be sent to controller
  *
  * @param  *pHandle Pointer to the MCPA Handle
  */
void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 8007d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8007d5a:	7fc3      	ldrb	r3, [r0, #31]
 8007d5c:	f890 2022 	ldrb.w	r2, [r0, #34]	@ 0x22
 8007d60:	429a      	cmp	r2, r3
{
 8007d62:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8007d64:	d002      	beq.n	8007d6c <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* Nothing to log just waiting next call to MCPA_datalog */
      pHandle->HFIndex++;
 8007d66:	3301      	adds	r3, #1
 8007d68:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8007d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 8007d6c:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 8007d72:	2d00      	cmp	r5, #0
 8007d74:	d02f      	beq.n	8007dd6 <MCPA_dataLog+0x7e>
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8007d76:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8007d78:	8ba2      	ldrh	r2, [r4, #28]
 8007d7a:	42aa      	cmp	r2, r5
 8007d7c:	d31a      	bcc.n	8007db4 <MCPA_dataLog+0x5c>
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8007d7e:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8007d82:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8007d84:	2e00      	cmp	r6, #0
 8007d86:	d07a      	beq.n	8007e7e <MCPA_dataLog+0x126>
 8007d88:	68a2      	ldr	r2, [r4, #8]
 8007d8a:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8007d8e:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]) ; //cstat !MISRAC2012-Rule-11.5
 8007d90:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8007d94:	8800      	ldrh	r0, [r0, #0]
 8007d96:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8007d9a:	8b25      	ldrh	r5, [r4, #24]
 8007d9c:	3502      	adds	r5, #2
 8007d9e:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8007da0:	459c      	cmp	ip, r3
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8007da2:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8007da4:	d1f4      	bne.n	8007d90 <MCPA_dataLog+0x38>
        if (pHandle->MFRateBuff < 254U)
 8007da6:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8007daa:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 8007dac:	2bfd      	cmp	r3, #253	@ 0xfd
 8007dae:	d96b      	bls.n	8007e88 <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8007db0:	4295      	cmp	r5, r2
 8007db2:	d9da      	bls.n	8007d6a <MCPA_dataLog+0x12>
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8007db4:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8007db8:	2bfe      	cmp	r3, #254	@ 0xfe
 8007dba:	d04a      	beq.n	8007e52 <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8007dbc:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8007dc0:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer,
 8007dc2:	8b22      	ldrh	r2, [r4, #24]
 8007dc4:	6820      	ldr	r0, [r4, #0]
 8007dc6:	3202      	adds	r2, #2
 8007dc8:	2309      	movs	r3, #9
 8007dca:	6845      	ldr	r5, [r0, #4]
 8007dcc:	b292      	uxth	r2, r2
 8007dce:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	8323      	strh	r3, [r4, #24]
}
 8007dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 8007dd6:	4601      	mov	r1, r0
 8007dd8:	2209      	movs	r2, #9
 8007dda:	f851 0b14 	ldr.w	r0, [r1], #20
 8007dde:	6803      	ldr	r3, [r0, #0]
 8007de0:	4798      	blx	r3
 8007de2:	b390      	cbz	r0, 8007e4a <MCPA_dataLog+0xf2>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8007de4:	4b3a      	ldr	r3, [pc, #232]	@ (8007ed0 <MCPA_dataLog+0x178>)
          logValue = (uint32_t *)pHandle->currentBuffer; //cstat !MISRAC2012-Rule-11.3
 8007de6:	6961      	ldr	r1, [r4, #20]
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 8007dec:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 8007df0:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer */
 8007df4:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 8007df8:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 8007dfa:	4282      	cmp	r2, r0
          pHandle->bufferIndex = 4U;
 8007dfc:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 8007dfe:	d101      	bne.n	8007e04 <MCPA_dataLog+0xac>
 8007e00:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8007e02:	e7b9      	b.n	8007d78 <MCPA_dataLog+0x20>
            pHandle->MFNumBuff           = pHandle->MFNum;
 8007e04:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            pHandle->HFNumBuff           = pHandle->HFNum;
 8007e08:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
            pHandle->MFRateBuff          = pHandle->MFRate;
 8007e0c:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
            pHandle->HFRateBuff          = pHandle->HFRate;
 8007e10:	f894 5021 	ldrb.w	r5, [r4, #33]	@ 0x21
            pHandle->HFNumBuff           = pHandle->HFNum;
 8007e14:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
            pHandle->MFNumBuff           = pHandle->MFNum;
 8007e18:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                         ((uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum) * 4U); /* We store pointer here,
 8007e1c:	441a      	add	r2, r3
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8007e1e:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MarkBuff            = pHandle->Mark;
 8007e20:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
            pHandle->MFRateBuff          = pHandle->MFRate;
 8007e24:	f884 1026 	strb.w	r1, [r4, #38]	@ 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8007e28:	83a3      	strh	r3, [r4, #28]
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8007e2a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8007e2e:	0092      	lsls	r2, r2, #2
            pHandle->HFRateBuff          = pHandle->HFRate;
 8007e30:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8007e34:	f000 ff84 	bl	8008d40 <memcpy>
                         (uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum); /* 1 size byte per ID */
 8007e38:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 8007e3c:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            (void)memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable,
 8007e40:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8007e44:	441a      	add	r2, r3
 8007e46:	f000 ff7b 	bl	8008d40 <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8007e4a:	8b25      	ldrh	r5, [r4, #24]
 8007e4c:	2d00      	cmp	r5, #0
 8007e4e:	d192      	bne.n	8007d76 <MCPA_dataLog+0x1e>
}
 8007e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007e52:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8007e56:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 8007e5a:	4418      	add	r0, r3
 8007e5c:	4283      	cmp	r3, r0
 8007e5e:	daad      	bge.n	8007dbc <MCPA_dataLog+0x64>
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8007e60:	68a7      	ldr	r7, [r4, #8]
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8007e62:	6926      	ldr	r6, [r4, #16]
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8007e64:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8007e68:	6812      	ldr	r2, [r2, #0]
 8007e6a:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007e6c:	1c5a      	adds	r2, r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8007e6e:	5cf3      	ldrb	r3, [r6, r3]
 8007e70:	442b      	add	r3, r5
 8007e72:	b29d      	uxth	r5, r3
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007e74:	b2d3      	uxtb	r3, r2
 8007e76:	4283      	cmp	r3, r0
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8007e78:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007e7a:	dbf3      	blt.n	8007e64 <MCPA_dataLog+0x10c>
 8007e7c:	e79e      	b.n	8007dbc <MCPA_dataLog+0x64>
        if (pHandle->MFRateBuff < 254U)
 8007e7e:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8007e82:	2bfd      	cmp	r3, #253	@ 0xfd
 8007e84:	f63f af71 	bhi.w	8007d6a <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 8007e88:	f894 0020 	ldrb.w	r0, [r4, #32]
 8007e8c:	4298      	cmp	r0, r3
 8007e8e:	d005      	beq.n	8007e9c <MCPA_dataLog+0x144>
            pHandle->MFIndex ++;
 8007e90:	3001      	adds	r0, #1
 8007e92:	f884 0020 	strb.w	r0, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8007e96:	42aa      	cmp	r2, r5
 8007e98:	d390      	bcc.n	8007dbc <MCPA_dataLog+0x64>
}
 8007e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007e9c:	f894 7028 	ldrb.w	r7, [r4, #40]	@ 0x28
 8007ea0:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 8007ea2:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007ea4:	42be      	cmp	r6, r7
            pHandle->MFIndex = 0U;
 8007ea6:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007eaa:	daf4      	bge.n	8007e96 <MCPA_dataLog+0x13e>
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8007eac:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007eb0:	f8d4 c010 	ldr.w	ip, [r4, #16]
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8007eb4:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007ebc:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007ec0:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007ec2:	442b      	add	r3, r5
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007ec4:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007ec6:	b29d      	uxth	r5, r3
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007ec8:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007eca:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007ecc:	dbf2      	blt.n	8007eb4 <MCPA_dataLog+0x15c>
 8007ece:	e76f      	b.n	8007db0 <MCPA_dataLog+0x58>
 8007ed0:	20001a78 	.word	0x20001a78

08007ed4 <MCPA_flushDataLog>:
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->bufferIndex > 0U)
 8007ed4:	8b03      	ldrh	r3, [r0, #24]
 8007ed6:	b19b      	cbz	r3, 8007f00 <MCPA_flushDataLog+0x2c>
{
 8007ed8:	b570      	push	{r4, r5, r6, lr}
    {  /* If buffer is allocated, we must send it */
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 8007eda:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
                                          proper decoding */
      {
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
        {
         logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8007ede:	6941      	ldr	r1, [r0, #20]
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 8007ee0:	2afe      	cmp	r2, #254	@ 0xfe
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	d00d      	beq.n	8007f02 <MCPA_flushDataLog+0x2e>
      else
      {
        /* Nothing to do */
      }
      logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
      *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8007ee6:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 8007eea:	52ca      	strh	r2, [r1, r3]
                                          the MARK */
      pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 8007eec:	8b22      	ldrh	r2, [r4, #24]
 8007eee:	6820      	ldr	r0, [r4, #0]
 8007ef0:	3202      	adds	r2, #2
 8007ef2:	2309      	movs	r3, #9
 8007ef4:	6845      	ldr	r5, [r0, #4]
 8007ef6:	b292      	uxth	r2, r2
 8007ef8:	47a8      	blx	r5
                                             pHandle->bufferIndex + 2U, MCTL_ASYNC);
      pHandle->bufferIndex = 0U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	8323      	strh	r3, [r4, #24]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8007efe:	bd70      	pop	{r4, r5, r6, pc}
 8007f00:	4770      	bx	lr
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007f02:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8007f06:	f890 c028 	ldrb.w	ip, [r0, #40]	@ 0x28
 8007f0a:	4494      	add	ip, r2
 8007f0c:	4562      	cmp	r2, ip
 8007f0e:	daea      	bge.n	8007ee6 <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8007f10:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007f12:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8007f14:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 8007f18:	6800      	ldr	r0, [r0, #0]
 8007f1a:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007f1c:	5ca8      	ldrb	r0, [r5, r2]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007f1e:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007f20:	4403      	add	r3, r0
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007f22:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007f24:	b29b      	uxth	r3, r3
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007f26:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8007f28:	8323      	strh	r3, [r4, #24]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8007f2a:	dbf3      	blt.n	8007f14 <MCPA_flushDataLog+0x40>
 8007f2c:	e7db      	b.n	8007ee6 <MCPA_flushDataLog+0x12>
 8007f2e:	bf00      	nop

08007f30 <MCPA_cfgLog>:
  *
  * @param  *pHandle Pointer to the MCPA Handle
  * @param  *cfgdata Configuration of the Async communication
  */
uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8007f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
    uint16_t newID, buffSize;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8007f34:	880f      	ldrh	r7, [r1, #0]
{
 8007f36:	4604      	mov	r4, r0

    if (buffSize == 0U)
 8007f38:	2f00      	cmp	r7, #0
 8007f3a:	d046      	beq.n	8007fca <MCPA_cfgLog+0x9a>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload)
 8007f3c:	6803      	ldr	r3, [r0, #0]
 8007f3e:	89db      	ldrh	r3, [r3, #14]
 8007f40:	42bb      	cmp	r3, r7
 8007f42:	d33f      	bcc.n	8007fc4 <MCPA_cfgLog+0x94>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 8007f44:	788b      	ldrb	r3, [r1, #2]
 8007f46:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 8007f4a:	f891 8003 	ldrb.w	r8, [r1, #3]
 8007f4e:	f880 8023 	strb.w	r8, [r0, #35]	@ 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 8007f52:	790b      	ldrb	r3, [r1, #4]
 8007f54:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8007f58:	794b      	ldrb	r3, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */

      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8007f5a:	7f82      	ldrb	r2, [r0, #30]
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8007f5c:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8007f60:	4443      	add	r3, r8
 8007f62:	4293      	cmp	r3, r2
 8007f64:	dc57      	bgt.n	8008016 <MCPA_cfgLog+0xe6>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */
 8007f66:	1d8e      	adds	r6, r1, #6
      {
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d057      	beq.n	800801c <MCPA_cfgLog+0xec>
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 8007f6c:	f04f 0800 	mov.w	r8, #0
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8007f70:	4645      	mov	r5, r8
 8007f72:	e011      	b.n	8007f98 <MCPA_cfgLog+0x68>
        {
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
          /* HF Data are fixed to 2 bytes */
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 8007f74:	68e3      	ldr	r3, [r4, #12]
 8007f76:	5558      	strb	r0, [r3, r5]
          pCfgData++; /* Point to the next UID */
          pCfgData++;
          logSize = logSize+pHandle->dataSizeTable[i];
 8007f78:	68e2      	ldr	r2, [r4, #12]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8007f7a:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8007f7e:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
          logSize = logSize+pHandle->dataSizeTable[i];
 8007f82:	5d52      	ldrb	r2, [r2, r5]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8007f84:	f105 0c01 	add.w	ip, r5, #1
 8007f88:	fa5f f58c 	uxtb.w	r5, ip
 8007f8c:	440b      	add	r3, r1
          logSize = logSize+pHandle->dataSizeTable[i];
 8007f8e:	4442      	add	r2, r8
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8007f90:	429d      	cmp	r5, r3
          logSize = logSize+pHandle->dataSizeTable[i];
 8007f92:	fa1f f882 	uxth.w	r8, r2
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8007f96:	da11      	bge.n	8007fbc <MCPA_cfgLog+0x8c>
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8007f98:	f836 9b02 	ldrh.w	r9, [r6], #2
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
 8007f9c:	6861      	ldr	r1, [r4, #4]
 8007f9e:	4648      	mov	r0, r9
 8007fa0:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8007fa4:	f7fb f8ac 	bl	8003100 <RI_GetPtrReg>
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 8007fa8:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8007fac:	42ab      	cmp	r3, r5
 8007fae:	f04f 0002 	mov.w	r0, #2
 8007fb2:	d8df      	bhi.n	8007f74 <MCPA_cfgLog+0x44>
 8007fb4:	4648      	mov	r0, r9
 8007fb6:	f7fb f897 	bl	80030e8 <RI_GetIDSize>
 8007fba:	e7db      	b.n	8007f74 <MCPA_cfgLog+0x44>
        }

        /* Smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp */
        if (buffSize < (logSize + 2U + 4U))
 8007fbc:	f108 0206 	add.w	r2, r8, #6
 8007fc0:	4297      	cmp	r7, r2
 8007fc2:	d210      	bcs.n	8007fe6 <MCPA_cfgLog+0xb6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 8007fc4:	2009      	movs	r0, #9
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return (result);
}
 8007fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 8007fca:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0U;
 8007fcc:	f880 7029 	strb.w	r7, [r0, #41]	@ 0x29
  if (pHandle->bufferIndex > 0U)
 8007fd0:	b9ab      	cbnz	r3, 8007ffe <MCPA_cfgLog+0xce>
  pHandle->bufferIndex = 0U;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	8323      	strh	r3, [r4, #24]
  pHandle->MarkBuff    = 0U;
 8007fd6:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
  pHandle->HFIndex     = 0U;
 8007fda:	77e3      	strb	r3, [r4, #31]
  pHandle->HFRateBuff  = 0U; /* We do not want to miss any sample at the restart */
 8007fdc:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
  uint8_t result = MCP_CMD_OK;
 8007fe0:	2000      	movs	r0, #0
}
 8007fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          pHandle->bufferTxTrigger = buffSize-logSize - 2U; /* 2 is required to add the last Mark byte and NUL
 8007fe6:	3f02      	subs	r7, #2
 8007fe8:	eba7 0708 	sub.w	r7, r7, r8
 8007fec:	8367      	strh	r7, [r4, #26]
          pHandle->Mark = *((uint8_t *)pCfgData);
 8007fee:	7833      	ldrb	r3, [r6, #0]
 8007ff0:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
          if (0U == pHandle->Mark)
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1f3      	bne.n	8007fe0 <MCPA_cfgLog+0xb0>
  if (pHandle->bufferIndex > 0U)
 8007ff8:	8b23      	ldrh	r3, [r4, #24]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d0e9      	beq.n	8007fd2 <MCPA_cfgLog+0xa2>
    logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8007ffe:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8008000:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 8008004:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 8008006:	8b22      	ldrh	r2, [r4, #24]
 8008008:	6820      	ldr	r0, [r4, #0]
 800800a:	3202      	adds	r2, #2
 800800c:	6845      	ldr	r5, [r0, #4]
 800800e:	b292      	uxth	r2, r2
 8008010:	2309      	movs	r3, #9
 8008012:	47a8      	blx	r5
 8008014:	e7dd      	b.n	8007fd2 <MCPA_cfgLog+0xa2>
        result = MCP_ERROR_BAD_RAW_FORMAT;
 8008016:	200a      	movs	r0, #10
}
 8008018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800801c:	2206      	movs	r2, #6
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 800801e:	4698      	mov	r8, r3
 8008020:	e7ce      	b.n	8007fc0 <MCPA_cfgLog+0x90>
 8008022:	bf00      	nop

08008024 <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hSensitivity > 0 )
 8008024:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
    {
      if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8008028:	8843      	ldrh	r3, [r0, #2]
 800802a:	8982      	ldrh	r2, [r0, #12]
    if (pHandle->hSensitivity > 0 )
 800802c:	2900      	cmp	r1, #0
 800802e:	dd08      	ble.n	8008042 <NTC_SetFaultState+0x1e>
      if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8008030:	4293      	cmp	r3, r2
 8008032:	d804      	bhi.n	800803e <NTC_SetFaultState+0x1a>
      {
        hFault = MC_OVER_TEMP;
      }
      else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 8008034:	89c2      	ldrh	r2, [r0, #14]
 8008036:	429a      	cmp	r2, r3
 8008038:	d908      	bls.n	800804c <NTC_SetFaultState+0x28>
      {
        hFault = MC_NO_ERROR;
 800803a:	2000      	movs	r0, #0
 800803c:	4770      	bx	lr
    }
    else
    {
      if (pHandle->hAvTemp_d < pHandle->hOverTempThreshold)
      {
        hFault = MC_OVER_TEMP;
 800803e:	2008      	movs	r0, #8
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (hFault);
}
 8008040:	4770      	bx	lr
      if (pHandle->hAvTemp_d < pHandle->hOverTempThreshold)
 8008042:	4293      	cmp	r3, r2
 8008044:	d3fb      	bcc.n	800803e <NTC_SetFaultState+0x1a>
      else if (pHandle->hAvTemp_d > pHandle->hOverTempDeactThreshold)
 8008046:	89c2      	ldrh	r2, [r0, #14]
 8008048:	429a      	cmp	r2, r3
 800804a:	d3f6      	bcc.n	800803a <NTC_SetFaultState+0x16>
        hFault = pHandle->hFaultState;
 800804c:	8900      	ldrh	r0, [r0, #8]
 800804e:	4770      	bx	lr

08008050 <NTC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8008050:	7803      	ldrb	r3, [r0, #0]
 8008052:	b94b      	cbnz	r3, 8008068 <NTC_Init+0x18>
    /* nothing to do */
  }
  else
  {
#endif
    if (pHandle->hSensitivity > 0 ) 
 8008054:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 8008058:	2b00      	cmp	r3, #0
 800805a:	bfcc      	ite	gt
 800805c:	2300      	movgt	r3, #0
 800805e:	2301      	movle	r3, #1
 8008060:	425b      	negs	r3, r3
 8008062:	b29b      	uxth	r3, r3
    {
      pHandle->hAvTemp_d = 0U;
    }
    else
    {
      pHandle->hAvTemp_d = 0xFFFFU;
 8008064:	8043      	strh	r3, [r0, #2]
}
 8008066:	4770      	bx	lr
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8008068:	8883      	ldrh	r3, [r0, #4]
      pHandle->hAvTemp_d = 0xFFFFU;
 800806a:	8043      	strh	r3, [r0, #2]
      pHandle->hFaultState = MC_NO_ERROR;
 800806c:	2200      	movs	r2, #0
 800806e:	8102      	strh	r2, [r0, #8]
}
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop

08008074 <NTC_CalcAvTemp>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle, uint16_t rawValue)
{
 8008074:	b510      	push	{r4, lr}
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8008076:	7803      	ldrb	r3, [r0, #0]
{
 8008078:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 800807a:	b983      	cbnz	r3, 800809e <NTC_CalcAvTemp+0x2a>
    {
      uint16_t hAux;
      hAux = rawValue;

      if (0xFFFFU == hAux)
 800807c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008080:	4299      	cmp	r1, r3
 8008082:	d007      	beq.n	8008094 <NTC_CalcAvTemp+0x20>
        /* Nothing to do */
      }
      else
      {
        uint32_t wtemp;
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8008084:	8943      	ldrh	r3, [r0, #10]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 8008086:	8842      	ldrh	r2, [r0, #2]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8008088:	1e58      	subs	r0, r3, #1
        wtemp += hAux;
 800808a:	fb00 1102 	mla	r1, r0, r2, r1
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 800808e:	fbb1 f1f3 	udiv	r1, r1, r3

        pHandle->hAvTemp_d = (uint16_t)wtemp;
 8008092:	8061      	strh	r1, [r4, #2]
      }

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8008094:	4620      	mov	r0, r4
 8008096:	f7ff ffc5 	bl	8008024 <NTC_SetFaultState>
 800809a:	8120      	strh	r0, [r4, #8]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 800809c:	bd10      	pop	{r4, pc}
 800809e:	2000      	movs	r0, #0
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 80080a0:	8120      	strh	r0, [r4, #8]
}
 80080a2:	bd10      	pop	{r4, pc}

080080a4 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 80080a4:	7803      	ldrb	r3, [r0, #0]
 80080a6:	b95b      	cbnz	r3, 80080c0 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 80080a8:	8842      	ldrh	r2, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 80080aa:	6941      	ldr	r1, [r0, #20]
      wTemp *= pHandle->hSensitivity;
 80080ac:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80080b0:	8b00      	ldrh	r0, [r0, #24]
      wTemp -= ((int32_t)pHandle->wV0);
 80080b2:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 80080b4:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80080b8:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 80080bc:	b200      	sxth	r0, r0
 80080be:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 80080c0:	88c0      	ldrh	r0, [r0, #6]
}
 80080c2:	b200      	sxth	r0, r0
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop

080080c8 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 80080c8:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80080ca:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80080cc:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80080ce:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80080d0:	8442      	strh	r2, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 80080d2:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 80080d4:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80080d6:	4770      	bx	lr

080080d8 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 80080d8:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80080da:	4770      	bx	lr

080080dc <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 80080dc:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80080de:	4770      	bx	lr

080080e0 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 80080e0:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop

080080e8 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 80080e8:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 80080f0:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 80080f2:	4770      	bx	lr

080080f4 <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 80080f4:	8b80      	ldrh	r0, [r0, #28]
 80080f6:	4770      	bx	lr

080080f8 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 80080f8:	2301      	movs	r3, #1
 80080fa:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 80080fc:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 80080fe:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop

08008104 <PID_GetKIDivisor>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
#endif
}
 8008104:	8b40      	ldrh	r0, [r0, #26]
 8008106:	4770      	bx	lr

08008108 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 8008108:	8bc0      	ldrh	r0, [r0, #30]
 800810a:	4770      	bx	lr

0800810c <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 800810c:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800810e:	4770      	bx	lr

08008110 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8008110:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008112:	4770      	bx	lr

08008114 <PID_SetKIDivisorPOW2>:
{
 8008114:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8008116:	2301      	movs	r3, #1
{
 8008118:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 800811a:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 800811c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8008120:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 8008122:	8343      	strh	r3, [r0, #26]
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8008124:	40a1      	lsls	r1, r4
{
 8008126:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8008128:	f7ff fff2 	bl	8008110 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 800812c:	4902      	ldr	r1, [pc, #8]	@ (8008138 <PID_SetKIDivisorPOW2+0x24>)
 800812e:	4628      	mov	r0, r5
 8008130:	40a1      	lsls	r1, r4
 8008132:	f7ff ffeb 	bl	800810c <PID_SetLowerIntegralTermLimit>
}
 8008136:	bd38      	pop	{r3, r4, r5, pc}
 8008138:	ffff8001 	.word	0xffff8001

0800813c <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 800813c:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800813e:	4770      	bx	lr

08008140 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8008140:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop

08008148 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8008148:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
 800814a:	4770      	bx	lr

0800814c <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 800814c:	2301      	movs	r3, #1
 800814e:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8008150:	84c1      	strh	r1, [r0, #38]	@ 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8008152:	8483      	strh	r3, [r0, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop

08008158 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8008158:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 800815c:	4603      	mov	r3, r0
 800815e:	b530      	push	{r4, r5, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8008160:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8008164:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8008168:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800816c:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 8008170:	b17c      	cbz	r4, 8008192 <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8008172:	fb04 f101 	mul.w	r1, r4, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8008176:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
      if (wIntegral_sum_temp < 0)
 800817a:	eb15 0e01 	adds.w	lr, r5, r1
 800817e:	d41d      	bmi.n	80081bc <PI_Controller+0x64>
            wIntegral_sum_temp = -INT32_MAX;
 8008180:	420d      	tst	r5, r1
 8008182:	4914      	ldr	r1, [pc, #80]	@ (80081d4 <PI_Controller+0x7c>)
 8008184:	bf48      	it	mi
 8008186:	468e      	movmi	lr, r1
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8008188:	45a6      	cmp	lr, r4
 800818a:	dc02      	bgt.n	8008192 <PI_Controller+0x3a>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 800818c:	691c      	ldr	r4, [r3, #16]
 800818e:	4574      	cmp	r4, lr
 8008190:	dd1d      	ble.n	80081ce <PI_Controller+0x76>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8008192:	8b99      	ldrh	r1, [r3, #28]
 8008194:	410a      	asrs	r2, r1
 8008196:	8bd9      	ldrh	r1, [r3, #30]
 8008198:	fa44 f101 	asr.w	r1, r4, r1
 800819c:	440a      	add	r2, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 800819e:	4290      	cmp	r0, r2
 80081a0:	da03      	bge.n	80081aa <PI_Controller+0x52>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 80081a2:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 80081a4:	4414      	add	r4, r2
 80081a6:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 80081a8:	bd30      	pop	{r4, r5, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 80081aa:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 80081ac:	bfc5      	ittet	gt
 80081ae:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 80081b2:	18a4      	addgt	r4, r4, r2
    returnValue = (int16_t)wOutput_32;
 80081b4:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 80081b6:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 80081b8:	609c      	str	r4, [r3, #8]
}
 80081ba:	bd30      	pop	{r4, r5, pc}
        if (pHandle->wIntegralTerm > 0)
 80081bc:	2d00      	cmp	r5, #0
 80081be:	dde3      	ble.n	8008188 <PI_Controller+0x30>
          if (wIntegral_Term > 0)
 80081c0:	2900      	cmp	r1, #0
 80081c2:	dde1      	ble.n	8008188 <PI_Controller+0x30>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80081c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80081c8:	428c      	cmp	r4, r1
 80081ca:	d1e2      	bne.n	8008192 <PI_Controller+0x3a>
            wIntegral_sum_temp = INT32_MAX;
 80081cc:	46a6      	mov	lr, r4
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 80081ce:	4674      	mov	r4, lr
 80081d0:	e7df      	b.n	8008192 <PI_Controller+0x3a>
 80081d2:	bf00      	nop
 80081d4:	80000001 	.word	0x80000001

080081d8 <PWMC_Init>:
  * @retval none
  */
__weak void PWMC_Init( PWMC_Handle_t * pHandle )
{
  /* Clear TIMx break flag. */
  LL_TIM_ClearFlag_BRK( pHandle->pParams_str->TIMx );
 80081d8:	69c3      	ldr	r3, [r0, #28]
 80081da:	681b      	ldr	r3, [r3, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80081dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80081e0:	611a      	str	r2, [r3, #16]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_BRK(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80081e2:	68da      	ldr	r2, [r3, #12]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80081e4:	f06f 0101 	mvn.w	r1, #1
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80081e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80081ec:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80081ee:	6119      	str	r1, [r3, #16]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80081f0:	685a      	ldr	r2, [r3, #4]
  pHandle->OverCurrentFlag = false;
  pHandle->driverProtectionFlag = false;

  pHandle->hElAngle = 0;
  LL_TIM_EnableCounter( pHandle->pParams_str->TIMx );
  pHandle->pCCMR1_cfg = &(pHandle->TimerCfg->CCMR1_Standard_cfg[0]);
 80081f2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80081f4:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80081f8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80081fc:	605a      	str	r2, [r3, #4]
  SET_BIT(TIMx->CCER, Channels);
 80081fe:	6a1a      	ldr	r2, [r3, #32]
 8008200:	f442 62aa 	orr.w	r2, r2, #1360	@ 0x550
 8008204:	f042 0205 	orr.w	r2, r2, #5
 8008208:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800820a:	681a      	ldr	r2, [r3, #0]
  pHandle->OverCurrentFlag = false;
 800820c:	f04f 0c00 	mov.w	ip, #0
 8008210:	f042 0201 	orr.w	r2, r2, #1
 8008214:	f8a0 c014 	strh.w	ip, [r0, #20]
  pHandle->driverProtectionFlag = false;
 8008218:	f880 c017 	strb.w	ip, [r0, #23]
  pHandle->hElAngle = 0;
 800821c:	f8a0 c012 	strh.w	ip, [r0, #18]
 8008220:	601a      	str	r2, [r3, #0]
  pHandle->pCCMR1_cfg = &(pHandle->TimerCfg->CCMR1_Standard_cfg[0]);
 8008222:	f101 037c 	add.w	r3, r1, #124	@ 0x7c
  pHandle->pCCMR2_cfg = &(pHandle->TimerCfg->CCMR2_Standard_cfg[0]);
 8008226:	3194      	adds	r1, #148	@ 0x94
 8008228:	e9c0 3109 	strd	r3, r1, [r0, #36]	@ 0x24
}
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop

08008230 <PWMC_SetPhaseVoltage>:
* @retval none
*/
__weak void PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, uint16_t DutyCycle )
{
  pHandle->CntPh = DutyCycle;
  LL_TIM_WriteReg(TIM1, CCR1, (uint32_t) DutyCycle);
 8008230:	4b02      	ldr	r3, [pc, #8]	@ (800823c <PWMC_SetPhaseVoltage+0xc>)
  pHandle->CntPh = DutyCycle;
 8008232:	8001      	strh	r1, [r0, #0]
  LL_TIM_WriteReg(TIM1, CCR1, (uint32_t) DutyCycle);
 8008234:	6359      	str	r1, [r3, #52]	@ 0x34
  LL_TIM_WriteReg(TIM1, CCR2, (uint32_t) DutyCycle);
 8008236:	6399      	str	r1, [r3, #56]	@ 0x38
  LL_TIM_WriteReg(TIM1, CCR3, (uint32_t) DutyCycle);  
 8008238:	63d9      	str	r1, [r3, #60]	@ 0x3c
}
 800823a:	4770      	bx	lr
 800823c:	40012c00 	.word	0x40012c00

08008240 <PWMC_LoadNextStep>:
* @brief  It writes the duty cycle into timer shadow registers.
* @param  pHandle Pointer on the target component instance.
* @retval none
*/
__weak void PWMC_LoadNextStep( PWMC_Handle_t * pHandle )
{
 8008240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
  if (pHandle->AlignFlag != 0)
 8008244:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
  else
  {
    if (pHandle->QuasiSynchDecay == true)
    {
      pHandle->pCCER_cfg = &(pHandle->TimerCfg->CCER_QuasiSynch_cfg[0]);
      LL_TIM_WriteReg(TIMx, CCER, *(pHandle->pCCER_cfg + pHandle->NextStep));
 8008248:	f890 e00a 	ldrb.w	lr, [r0, #10]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800824c:	69c4      	ldr	r4, [r0, #28]
    pHandle->pCCER_cfg = &(pHandle->TimerCfg->CCER_Align_cfg);
 800824e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008250:	6821      	ldr	r1, [r4, #0]
      LL_TIM_WriteReg(TIMx, CCER, *(pHandle->pCCER_cfg + pHandle->NextStep));
 8008252:	fa0f f58e 	sxth.w	r5, lr
  if (pHandle->AlignFlag != 0)
 8008256:	b332      	cbz	r2, 80082a6 <PWMC_LoadNextStep+0x66>
    if (pHandle->AlignFlag == -1)
 8008258:	3201      	adds	r2, #1
    pHandle->pCCER_cfg = &(pHandle->TimerCfg->CCER_Align_cfg);
 800825a:	f103 0618 	add.w	r6, r3, #24
 800825e:	6206      	str	r6, [r0, #32]
      pHandle->pCCMR2_cfg = &(pHandle->TimerCfg->CCMR2_CCW_Align_cfg[0]);
 8008260:	bf07      	ittee	eq
 8008262:	f103 0264 	addeq.w	r2, r3, #100	@ 0x64
      pHandle->pCCMR1_cfg = &(pHandle->TimerCfg->CCMR1_CCW_Align_cfg[0]);
 8008266:	f103 064c 	addeq.w	r6, r3, #76	@ 0x4c
      pHandle->pCCMR1_cfg = &(pHandle->TimerCfg->CCMR1_CW_Align_cfg[0]);
 800826a:	f103 061c 	addne.w	r6, r3, #28
      pHandle->pCCMR2_cfg = &(pHandle->TimerCfg->CCMR2_CW_Align_cfg[0]);
 800826e:	f103 0234 	addne.w	r2, r3, #52	@ 0x34
    LL_TIM_WriteReg(TIMx, CCER, *(pHandle->pCCER_cfg));
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	e9c0 6209 	strd	r6, r2, [r0, #36]	@ 0x24
 8008278:	620b      	str	r3, [r1, #32]
    if ((ES_GPIO == pHandle->LowSideOutputs))
 800827a:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800827e:	2b02      	cmp	r3, #2
 8008280:	d057      	beq.n	8008332 <PWMC_LoadNextStep+0xf2>
        break;
      }
    }
    LL_TIM_WriteReg(TIMx, CCER, *(pHandle->pCCER_cfg + pHandle->NextStep));
  }
  LL_TIM_WriteReg(TIMx, CCMR1, *(pHandle->pCCMR1_cfg + pHandle->NextStep));
 8008282:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008286:	618b      	str	r3, [r1, #24]
  LL_TIM_WriteReg(TIMx, CCMR2, *(pHandle->pCCMR2_cfg + pHandle->NextStep));  
 8008288:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 800828c:	61cb      	str	r3, [r1, #28]
  pHandle->Step = pHandle->NextStep;
 800828e:	f880 e00b 	strb.w	lr, [r0, #11]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_COM(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 8008292:	694b      	ldr	r3, [r1, #20]
 8008294:	f043 0320 	orr.w	r3, r3, #32
 8008298:	614b      	str	r3, [r1, #20]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800829a:	694b      	ldr	r3, [r1, #20]
 800829c:	f043 0301 	orr.w	r3, r3, #1
 80082a0:	614b      	str	r3, [r1, #20]
  LL_TIM_GenerateEvent_COM( TIMx );
  LL_TIM_GenerateEvent_UPDATE( TIMx );
}
 80082a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (pHandle->QuasiSynchDecay == true)
 80082a6:	7e42      	ldrb	r2, [r0, #25]
 80082a8:	ea4f 0c8e 	mov.w	ip, lr, lsl #2
 80082ac:	b9c2      	cbnz	r2, 80082e0 <PWMC_LoadNextStep+0xa0>
      if (pHandle->LSModArray[pHandle->NextStep]==1)
 80082ae:	eb00 020e 	add.w	r2, r0, lr
      pHandle->pCCER_cfg = &(pHandle->TimerCfg->CCER_cfg[0]);
 80082b2:	6203      	str	r3, [r0, #32]
      if (pHandle->LSModArray[pHandle->NextStep]==1)
 80082b4:	7b12      	ldrb	r2, [r2, #12]
 80082b6:	2a01      	cmp	r2, #1
        pHandle->pCCMR1_cfg = &(pHandle->TimerCfg->CCMR1_LSMod_cfg[0]);
 80082b8:	bf07      	ittee	eq
 80082ba:	f103 06ac 	addeq.w	r6, r3, #172	@ 0xac
        pHandle->pCCMR2_cfg = &(pHandle->TimerCfg->CCMR2_LSMod_cfg[0]);
 80082be:	f103 02c4 	addeq.w	r2, r3, #196	@ 0xc4
        pHandle->pCCMR1_cfg = &(pHandle->TimerCfg->CCMR1_Standard_cfg[0]);
 80082c2:	f103 067c 	addne.w	r6, r3, #124	@ 0x7c
        pHandle->pCCMR2_cfg = &(pHandle->TimerCfg->CCMR2_Standard_cfg[0]);
 80082c6:	f103 0294 	addne.w	r2, r3, #148	@ 0x94
    LL_TIM_WriteReg(TIMx, CCER, *(pHandle->pCCER_cfg + pHandle->NextStep));
 80082ca:	449c      	add	ip, r3
    if ((ES_GPIO == pHandle->LowSideOutputs))
 80082cc:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80082d0:	2b02      	cmp	r3, #2
        pHandle->pCCMR2_cfg = &(pHandle->TimerCfg->CCMR2_Standard_cfg[0]);
 80082d2:	e9c0 6209 	strd	r6, r2, [r0, #36]	@ 0x24
    if ((ES_GPIO == pHandle->LowSideOutputs))
 80082d6:	d00f      	beq.n	80082f8 <PWMC_LoadNextStep+0xb8>
    LL_TIM_WriteReg(TIMx, CCER, *(pHandle->pCCER_cfg + pHandle->NextStep));
 80082d8:	f8dc 3000 	ldr.w	r3, [ip]
 80082dc:	620b      	str	r3, [r1, #32]
 80082de:	e7d0      	b.n	8008282 <PWMC_LoadNextStep+0x42>
      pHandle->pCCER_cfg = &(pHandle->TimerCfg->CCER_QuasiSynch_cfg[0]);
 80082e0:	33dc      	adds	r3, #220	@ 0xdc
 80082e2:	6203      	str	r3, [r0, #32]
      LL_TIM_WriteReg(TIMx, CCER, *(pHandle->pCCER_cfg + pHandle->NextStep));
 80082e4:	449c      	add	ip, r3
 80082e6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80082ea:	620b      	str	r3, [r1, #32]
    if ((ES_GPIO == pHandle->LowSideOutputs))
 80082ec:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80082f0:	2b02      	cmp	r3, #2
  LL_TIM_WriteReg(TIMx, CCMR2, *(pHandle->pCCMR2_cfg + pHandle->NextStep));  
 80082f2:	e9d0 6209 	ldrd	r6, r2, [r0, #36]	@ 0x24
    if ((ES_GPIO == pHandle->LowSideOutputs))
 80082f6:	d1ef      	bne.n	80082d8 <PWMC_LoadNextStep+0x98>
      switch ( pHandle->NextStep )
 80082f8:	f1be 0f05 	cmp.w	lr, #5
 80082fc:	d8ec      	bhi.n	80082d8 <PWMC_LoadNextStep+0x98>
 80082fe:	2301      	movs	r3, #1
 8008300:	fa03 f30e 	lsl.w	r3, r3, lr
 8008304:	f013 0f24 	tst.w	r3, #36	@ 0x24
 8008308:	d12f      	bne.n	800836a <PWMC_LoadNextStep+0x12a>
 800830a:	f013 0f12 	tst.w	r3, #18
 800830e:	d11e      	bne.n	800834e <PWMC_LoadNextStep+0x10e>
 8008310:	f013 0f09 	tst.w	r3, #9
 8008314:	d0e0      	beq.n	80082d8 <PWMC_LoadNextStep+0x98>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8008316:	6967      	ldr	r7, [r4, #20]
          LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008318:	8b23      	ldrh	r3, [r4, #24]
          LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800831a:	f8d4 8004 	ldr.w	r8, [r4, #4]
          LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800831e:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8008322:	62bb      	str	r3, [r7, #40]	@ 0x28
          LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8008324:	8923      	ldrh	r3, [r4, #8]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008326:	f8c8 3018 	str.w	r3, [r8, #24]
          LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800832a:	8a23      	ldrh	r3, [r4, #16]
 800832c:	f8c9 3018 	str.w	r3, [r9, #24]
}
 8008330:	e7d2      	b.n	80082d8 <PWMC_LoadNextStep+0x98>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008332:	6967      	ldr	r7, [r4, #20]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008334:	8b23      	ldrh	r3, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8008336:	f8d4 c004 	ldr.w	ip, [r4, #4]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800833a:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800833e:	61bb      	str	r3, [r7, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8008340:	8923      	ldrh	r3, [r4, #8]
 8008342:	f8cc 3018 	str.w	r3, [ip, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008346:	8a23      	ldrh	r3, [r4, #16]
 8008348:	f8c8 3018 	str.w	r3, [r8, #24]
}
 800834c:	e799      	b.n	8008282 <PWMC_LoadNextStep+0x42>
  WRITE_REG(GPIOx->BRR, PinMask);
 800834e:	68e7      	ldr	r7, [r4, #12]
          LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008350:	8a23      	ldrh	r3, [r4, #16]
          LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8008352:	f8d4 8004 	ldr.w	r8, [r4, #4]
          LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008356:	f8d4 9014 	ldr.w	r9, [r4, #20]
 800835a:	62bb      	str	r3, [r7, #40]	@ 0x28
          LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800835c:	8923      	ldrh	r3, [r4, #8]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800835e:	f8c8 3018 	str.w	r3, [r8, #24]
          LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008362:	8b23      	ldrh	r3, [r4, #24]
 8008364:	f8c9 3018 	str.w	r3, [r9, #24]
}
 8008368:	e7b6      	b.n	80082d8 <PWMC_LoadNextStep+0x98>
  WRITE_REG(GPIOx->BRR, PinMask);
 800836a:	6867      	ldr	r7, [r4, #4]
          LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800836c:	8923      	ldrh	r3, [r4, #8]
          LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800836e:	f8d4 800c 	ldr.w	r8, [r4, #12]
          LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8008372:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8008376:	62bb      	str	r3, [r7, #40]	@ 0x28
          LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008378:	8a23      	ldrh	r3, [r4, #16]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800837a:	f8c8 3018 	str.w	r3, [r8, #24]
          LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800837e:	8b23      	ldrh	r3, [r4, #24]
 8008380:	f8c9 3018 	str.w	r3, [r9, #24]
}
 8008384:	e7a8      	b.n	80082d8 <PWMC_LoadNextStep+0x98>
 8008386:	bf00      	nop

08008388 <PWMC_TurnOnLowSides>:
  * @param  pHdl: handler of the current instance of the PWM component
  * @retval none
  */
__weak void PWMC_TurnOnLowSides( PWMC_Handle_t * pHandle, uint32_t ticks)
{
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008388:	69c2      	ldr	r2, [r0, #28]
{
 800838a:	b430      	push	{r4, r5}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800838c:	6813      	ldr	r3, [r2, #0]
  LL_TIM_OC_SetCompareCH1(TIMx, 0u);
  LL_TIM_OC_SetCompareCH2(TIMx, 0u);
  LL_TIM_OC_SetCompareCH3(TIMx, 0u);
  LL_TIM_WriteReg(TIMx, CCMR1, 0x4848);
  LL_TIM_WriteReg(TIMx, CCMR2, 0x6848);
  LL_TIM_WriteReg(TIMx, CCER, pHandle->TimerCfg->CCER_Align_cfg);
 800838e:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
  pHandle->TurnOnLowSidesAction = true;
 8008390:	2501      	movs	r5, #1
 8008392:	7605      	strb	r5, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008394:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008396:	f06f 0501 	mvn.w	r5, #1
  LL_TIM_WriteReg(TIMx, CCER, pHandle->TimerCfg->CCER_Align_cfg);
 800839a:	69a4      	ldr	r4, [r4, #24]
 800839c:	611d      	str	r5, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800839e:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80083a0:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80083a2:	63d9      	str	r1, [r3, #60]	@ 0x3c
  LL_TIM_WriteReg(TIMx, CCMR1, 0x4848);
 80083a4:	f644 0148 	movw	r1, #18504	@ 0x4848
 80083a8:	6199      	str	r1, [r3, #24]
  LL_TIM_WriteReg(TIMx, CCMR2, 0x6848);
 80083aa:	f646 0148 	movw	r1, #26696	@ 0x6848
 80083ae:	61d9      	str	r1, [r3, #28]
  LL_TIM_WriteReg(TIMx, CCER, pHandle->TimerCfg->CCER_Align_cfg);
 80083b0:	621c      	str	r4, [r3, #32]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80083b2:	6959      	ldr	r1, [r3, #20]
 80083b4:	f041 0101 	orr.w	r1, r1, #1
 80083b8:	6159      	str	r1, [r3, #20]
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 80083ba:	6959      	ldr	r1, [r3, #20]
 80083bc:	f041 0120 	orr.w	r1, r1, #32
 80083c0:	6159      	str	r1, [r3, #20]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80083c2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80083c4:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 80083c8:	6459      	str	r1, [r3, #68]	@ 0x44
  LL_TIM_GenerateEvent_UPDATE( TIMx );  
  LL_TIM_GenerateEvent_COM( TIMx );
  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->LowSideOutputs))
 80083ca:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d108      	bne.n	80083e4 <PWMC_TurnOnLowSides+0x5c>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80083d2:	6850      	ldr	r0, [r2, #4]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80083d4:	68d1      	ldr	r1, [r2, #12]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );  
 80083d6:	6953      	ldr	r3, [r2, #20]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80083d8:	8914      	ldrh	r4, [r2, #8]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80083da:	6184      	str	r4, [r0, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80083dc:	8a10      	ldrh	r0, [r2, #16]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );  
 80083de:	8b12      	ldrh	r2, [r2, #24]
 80083e0:	6188      	str	r0, [r1, #24]
 80083e2:	619a      	str	r2, [r3, #24]
  }
}
 80083e4:	bc30      	pop	{r4, r5}
 80083e6:	4770      	bx	lr

080083e8 <PWMC_SwitchOnPWM>:
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void PWMC_SwitchOnPWM( PWMC_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80083e8:	69c3      	ldr	r3, [r0, #28]

  pHandle->TurnOnLowSidesAction = false;
  pHandle->Step = STEP_INIT;
 80083ea:	2106      	movs	r1, #6
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80083ec:	681b      	ldr	r3, [r3, #0]
  pHandle->Step = STEP_INIT;
 80083ee:	72c1      	strb	r1, [r0, #11]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80083f0:	68d9      	ldr	r1, [r3, #12]
  pHandle->TurnOnLowSidesAction = false;
 80083f2:	2200      	movs	r2, #0
 80083f4:	f041 0101 	orr.w	r1, r1, #1
 80083f8:	7602      	strb	r2, [r0, #24]
 80083fa:	60d9      	str	r1, [r3, #12]
  SET_BIT(TIMx->CR2, TIM_CR2_CCPC);
 80083fc:	6859      	ldr	r1, [r3, #4]
 80083fe:	f041 0101 	orr.w	r1, r1, #1
 8008402:	6059      	str	r1, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_CCUS, CCUpdateSource);
 8008404:	6859      	ldr	r1, [r3, #4]
 8008406:	f021 0104 	bic.w	r1, r1, #4
 800840a:	6059      	str	r1, [r3, #4]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800840c:	635a      	str	r2, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800840e:	639a      	str	r2, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008410:	63da      	str	r2, [r3, #60]	@ 0x3c
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 8008412:	695a      	ldr	r2, [r3, #20]
 8008414:	f042 0220 	orr.w	r2, r2, #32
 8008418:	615a      	str	r2, [r3, #20]
  LL_TIM_OC_SetCompareCH2(TIMx, 0u);
  LL_TIM_OC_SetCompareCH3(TIMx, 0u);

  LL_TIM_GenerateEvent_COM( TIMx );
	/* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800841a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800841c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008420:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008422:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008424:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008428:	645a      	str	r2, [r3, #68]	@ 0x44
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800842a:	685a      	ldr	r2, [r3, #4]
 800842c:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8008430:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8008434:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 8008438:	605a      	str	r2, [r3, #4]
  LL_TIM_EnableAllOutputs(TIMx);

  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_OC4REF);	 
}
 800843a:	4770      	bx	lr

0800843c <PWMC_SetADCTriggerChannel>:
  * @param  SamplingPoint: trigger point
  * @retval none
  */
__weak void PWMC_SetADCTriggerChannel( PWMC_Handle_t * pHandle, uint16_t SamplingPoint )
{
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800843c:	69c3      	ldr	r3, [r0, #28]
 800843e:	681b      	ldr	r3, [r3, #0]

  pHandle->ADCTriggerCnt = SamplingPoint;
 8008440:	8081      	strh	r1, [r0, #4]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008442:	6419      	str	r1, [r3, #64]	@ 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, pHandle->ADCTriggerCnt);
}
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop

08008448 <PWMC_SwitchOffPWM>:
{
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;

  pHandle->TurnOnLowSidesAction = false;

  if ((ES_GPIO == pHandle->LowSideOutputs))
 8008448:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800844c:	69c2      	ldr	r2, [r0, #28]
  pHandle->TurnOnLowSidesAction = false;
 800844e:	f04f 0c00 	mov.w	ip, #0
  if ((ES_GPIO == pHandle->LowSideOutputs))
 8008452:	2902      	cmp	r1, #2
{
 8008454:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8008456:	6813      	ldr	r3, [r2, #0]
  pHandle->TurnOnLowSidesAction = false;
 8008458:	f880 c018 	strb.w	ip, [r0, #24]
  if ((ES_GPIO == pHandle->LowSideOutputs))
 800845c:	d108      	bne.n	8008470 <PWMC_SwitchOffPWM+0x28>
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800845e:	6851      	ldr	r1, [r2, #4]
 8008460:	8914      	ldrh	r4, [r2, #8]
  WRITE_REG(GPIOx->BRR, PinMask);
 8008462:	628c      	str	r4, [r1, #40]	@ 0x28
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8008464:	68d1      	ldr	r1, [r2, #12]
 8008466:	8a14      	ldrh	r4, [r2, #16]
 8008468:	628c      	str	r4, [r1, #40]	@ 0x28
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800846a:	6951      	ldr	r1, [r2, #20]
 800846c:	8b12      	ldrh	r2, [r2, #24]
 800846e:	628a      	str	r2, [r1, #40]	@ 0x28
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008470:	6c59      	ldr	r1, [r3, #68]	@ 0x44
  LL_TIM_OC_SetCompareCH3(TIMx, 0u);
  pHandle->CntPh = 0;
  LL_TIM_DisableIT_UPDATE( pHandle->pParams_str->TIMx );
  LL_TIM_SetTriggerOutput(pHandle->pParams_str->TIMx, LL_TIM_TRGO_RESET);
  return;
}
 8008472:	f85d 4b04 	ldr.w	r4, [sp], #4
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008476:	2200      	movs	r2, #0
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8008478:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 800847c:	6459      	str	r1, [r3, #68]	@ 0x44
  WRITE_REG(TIMx->CCR1, CompareValue);
 800847e:	635a      	str	r2, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008480:	639a      	str	r2, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008482:	63da      	str	r2, [r3, #60]	@ 0x3c
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008484:	68d9      	ldr	r1, [r3, #12]
  pHandle->CntPh = 0;
 8008486:	8002      	strh	r2, [r0, #0]
 8008488:	f021 0101 	bic.w	r1, r1, #1
 800848c:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8008494:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8008498:	605a      	str	r2, [r3, #4]
}
 800849a:	4770      	bx	lr

0800849c <PWMC_BRK_IRQHandler>:
 * @retval none
 */
__weak void * PWMC_BRK_IRQHandler( PWMC_Handle_t * pHandle )
{
  pHandle->OverCurrentFlag = true;
  LL_TIM_DisableIT_UPDATE( pHandle->pParams_str->TIMx );
 800849c:	69c3      	ldr	r3, [r0, #28]
 800849e:	681b      	ldr	r3, [r3, #0]
  pHandle->OverCurrentFlag = true;
 80084a0:	2201      	movs	r2, #1
 80084a2:	7502      	strb	r2, [r0, #20]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80084a4:	68da      	ldr	r2, [r3, #12]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80084a6:	f06f 0101 	mvn.w	r1, #1
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80084aa:	400a      	ands	r2, r1
 80084ac:	60da      	str	r2, [r3, #12]
  LL_TIM_ClearFlag_UPDATE( pHandle->pParams_str->TIMx );
  return MC_NULL;
}
 80084ae:	2000      	movs	r0, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80084b0:	6119      	str	r1, [r3, #16]
 80084b2:	4770      	bx	lr

080084b4 <PWMC_DisableHighFreqTask>:
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80084b4:	4a02      	ldr	r2, [pc, #8]	@ (80084c0 <PWMC_DisableHighFreqTask+0xc>)
 80084b6:	68d3      	ldr	r3, [r2, #12]
 80084b8:	f023 0301 	bic.w	r3, r3, #1
 80084bc:	60d3      	str	r3, [r2, #12]
  * @retval none
  */
__weak void PWMC_DisableHighFreqTask( PWMC_Handle_t * pHandle )
{
  LL_TIM_DisableIT_UPDATE(TIM1);
}
 80084be:	4770      	bx	lr
 80084c0:	40012c00 	.word	0x40012c00

080084c4 <PWMC_SetAlignFlag>:
* @param  flag to be applied in uint8_t, 1: motor is in align stage, 2: motor is not in align stage
* @retval none
*/
void PWMC_SetAlignFlag(PWMC_Handle_t *pHandle, int16_t flag)
{
  pHandle->AlignFlag = flag;
 80084c4:	8101      	strh	r1, [r0, #8]
}
 80084c6:	4770      	bx	lr

080084c8 <PWMC_ElAngleToStep>:
 * @retval calculated step
 */
bool  PWMC_ElAngleToStep( PWMC_Handle_t * pHandle )
{
  uint8_t Step;
  if ((pHandle->hElAngle >= (int16_t)( S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( S16_60_PHASE_SHIFT + S16_60_PHASE_SHIFT / 2))) Step = STEP_1;
 80084c8:	8a43      	ldrh	r3, [r0, #18]
 80084ca:	f5a3 52aa 	sub.w	r2, r3, #5440	@ 0x1540
 80084ce:	3a15      	subs	r2, #21
 80084d0:	f642 21a9 	movw	r1, #10921	@ 0x2aa9
 80084d4:	b292      	uxth	r2, r2
 80084d6:	428a      	cmp	r2, r1
 80084d8:	d909      	bls.n	80084ee <PWMC_ElAngleToStep+0x26>
  else if ((pHandle->hElAngle >= (int16_t)( S16_60_PHASE_SHIFT + S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT / 2))) Step = STEP_2;
 80084da:	f5a3 527f 	sub.w	r2, r3, #16320	@ 0x3fc0
 80084de:	3a3f      	subs	r2, #63	@ 0x3f
 80084e0:	b292      	uxth	r2, r2
 80084e2:	f642 2caa 	movw	ip, #10922	@ 0x2aaa
 80084e6:	4562      	cmp	r2, ip
 80084e8:	d808      	bhi.n	80084fc <PWMC_ElAngleToStep+0x34>
 80084ea:	2301      	movs	r3, #1
 80084ec:	e000      	b.n	80084f0 <PWMC_ElAngleToStep+0x28>
  if ((pHandle->hElAngle >= (int16_t)( S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( S16_60_PHASE_SHIFT + S16_60_PHASE_SHIFT / 2))) Step = STEP_1;
 80084ee:	2300      	movs	r3, #0
  else if ((pHandle->hElAngle >= (int16_t)( - S16_120_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( - S16_60_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2))) Step = STEP_4;
  else if ((pHandle->hElAngle >= (int16_t)( - S16_60_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( - S16_60_PHASE_SHIFT / 2))) Step = STEP_5;
  else if ((pHandle->hElAngle >= (int16_t)( - S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( S16_60_PHASE_SHIFT / 2))) Step = STEP_6;
  else {}
  pHandle->NextStep = Step;
  if (pHandle->NextStep != pHandle->Step ) return true;
 80084f0:	7ac2      	ldrb	r2, [r0, #11]
  pHandle->NextStep = Step;
 80084f2:	7283      	strb	r3, [r0, #10]
    else return false;
}
 80084f4:	1ad0      	subs	r0, r2, r3
 80084f6:	bf18      	it	ne
 80084f8:	2001      	movne	r0, #1
 80084fa:	4770      	bx	lr
  else if ((pHandle->hElAngle >= (int16_t)( S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT / 2)) || (pHandle->hElAngle < (int16_t)( - S16_120_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2))) Step = STEP_3;
 80084fc:	f503 42d5 	add.w	r2, r3, #27264	@ 0x6a80
 8008500:	322a      	adds	r2, #42	@ 0x2a
{
 8008502:	b500      	push	{lr}
  else if ((pHandle->hElAngle >= (int16_t)( S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT / 2)) || (pHandle->hElAngle < (int16_t)( - S16_120_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2))) Step = STEP_3;
 8008504:	b292      	uxth	r2, r2
 8008506:	f24d 5e53 	movw	lr, #54611	@ 0xd553
 800850a:	4572      	cmp	r2, lr
 800850c:	d810      	bhi.n	8008530 <PWMC_ElAngleToStep+0x68>
  else if ((pHandle->hElAngle >= (int16_t)( - S16_120_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( - S16_60_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2))) Step = STEP_4;
 800850e:	4562      	cmp	r2, ip
 8008510:	d910      	bls.n	8008534 <PWMC_ElAngleToStep+0x6c>
  else if ((pHandle->hElAngle >= (int16_t)( - S16_60_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( - S16_60_PHASE_SHIFT / 2))) Step = STEP_5;
 8008512:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8008516:	333f      	adds	r3, #63	@ 0x3f
 8008518:	b29b      	uxth	r3, r3
 800851a:	428b      	cmp	r3, r1
 800851c:	bf8c      	ite	hi
 800851e:	2305      	movhi	r3, #5
 8008520:	2304      	movls	r3, #4
  if (pHandle->NextStep != pHandle->Step ) return true;
 8008522:	7ac2      	ldrb	r2, [r0, #11]
  pHandle->NextStep = Step;
 8008524:	7283      	strb	r3, [r0, #10]
}
 8008526:	1ad0      	subs	r0, r2, r3
 8008528:	bf18      	it	ne
 800852a:	2001      	movne	r0, #1
 800852c:	f85d fb04 	ldr.w	pc, [sp], #4
  else if ((pHandle->hElAngle >= (int16_t)( S16_120_PHASE_SHIFT + S16_60_PHASE_SHIFT / 2)) || (pHandle->hElAngle < (int16_t)( - S16_120_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2))) Step = STEP_3;
 8008530:	2302      	movs	r3, #2
 8008532:	e7f6      	b.n	8008522 <PWMC_ElAngleToStep+0x5a>
  else if ((pHandle->hElAngle >= (int16_t)( - S16_120_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2)) && (pHandle->hElAngle < (int16_t)( - S16_60_PHASE_SHIFT - S16_60_PHASE_SHIFT / 2))) Step = STEP_4;
 8008534:	2303      	movs	r3, #3
 8008536:	e7f4      	b.n	8008522 <PWMC_ElAngleToStep+0x5a>

08008538 <PWMC_ForceNextStep>:
* @param  Direction motor spinning direction.
* @retval none
 */
void  PWMC_ForceNextStep( PWMC_Handle_t * pHandle, int16_t Direction )
{
  if (Direction > 0)
 8008538:	2900      	cmp	r1, #0
  {
    pHandle->NextStep ++;
 800853a:	7a83      	ldrb	r3, [r0, #10]
  if (Direction > 0)
 800853c:	dd06      	ble.n	800854c <PWMC_ForceNextStep+0x14>
    pHandle->NextStep ++;
 800853e:	3301      	adds	r3, #1
 8008540:	b2db      	uxtb	r3, r3
    if (pHandle->NextStep == 6) pHandle->NextStep = 0;
 8008542:	2b06      	cmp	r3, #6
 8008544:	bf08      	it	eq
 8008546:	2300      	moveq	r3, #0
 8008548:	7283      	strb	r3, [r0, #10]
  else
  {
    if (pHandle->NextStep == 0) pHandle->NextStep = 6;
    pHandle->NextStep--;
  }
}
 800854a:	4770      	bx	lr
    if (pHandle->NextStep == 0) pHandle->NextStep = 6;
 800854c:	b11b      	cbz	r3, 8008556 <PWMC_ForceNextStep+0x1e>
    pHandle->NextStep--;
 800854e:	3b01      	subs	r3, #1
 8008550:	b2db      	uxtb	r3, r3
    if (pHandle->NextStep == 6) pHandle->NextStep = 0;
 8008552:	7283      	strb	r3, [r0, #10]
}
 8008554:	4770      	bx	lr
 8008556:	2305      	movs	r3, #5
    if (pHandle->NextStep == 6) pHandle->NextStep = 0;
 8008558:	7283      	strb	r3, [r0, #10]
}
 800855a:	4770      	bx	lr

0800855c <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 800855c:	4603      	mov	r3, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 800855e:	7d40      	ldrb	r0, [r0, #21]
 8008560:	b180      	cbz	r0, 8008584 <PWMC_IsFaultOccurred+0x28>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 8008562:	2200      	movs	r2, #0
 8008564:	755a      	strb	r2, [r3, #21]
 8008566:	2142      	movs	r1, #66	@ 0x42
    retVal = MC_OVER_VOLT;
 8008568:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 800856a:	7d1a      	ldrb	r2, [r3, #20]
 800856c:	b112      	cbz	r2, 8008574 <PWMC_IsFaultOccurred+0x18>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 800856e:	2200      	movs	r2, #0
 8008570:	751a      	strb	r2, [r3, #20]
    retVal |= MC_OVER_CURR;
 8008572:	4608      	mov	r0, r1
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 8008574:	7dda      	ldrb	r2, [r3, #23]
 8008576:	b122      	cbz	r2, 8008582 <PWMC_IsFaultOccurred+0x26>
  {
    retVal |= MC_DP_FAULT;
 8008578:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
    pHandle->driverProtectionFlag = false;
 800857c:	2200      	movs	r2, #0
    retVal |= MC_DP_FAULT;
 800857e:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 8008580:	75da      	strb	r2, [r3, #23]
  {
    /* Nothing to do */
  }

  return (retVal);
}
 8008582:	4770      	bx	lr
 8008584:	2140      	movs	r1, #64	@ 0x40
 8008586:	e7f0      	b.n	800856a <PWMC_IsFaultOccurred+0xe>

08008588 <PWMC_GetLSModConfig>:
uint8_t PWMC_GetLSModConfig(PWMC_Handle_t *pHandle)
{
  uint8_t retVal=0;
  for (uint8_t i=0; i<6; i++)
  {
    retVal |= pHandle->LSModArray[i] <<i;
 8008588:	7b83      	ldrb	r3, [r0, #14]
 800858a:	7b41      	ldrb	r1, [r0, #13]
 800858c:	7b02      	ldrb	r2, [r0, #12]
 800858e:	f890 c00f 	ldrb.w	ip, [r0, #15]
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8008598:	4313      	orrs	r3, r2
 800859a:	7c01      	ldrb	r1, [r0, #16]
 800859c:	7c42      	ldrb	r2, [r0, #17]
 800859e:	ea43 00cc 	orr.w	r0, r3, ip, lsl #3
 80085a2:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 80085a6:	ea40 1042 	orr.w	r0, r0, r2, lsl #5
  }
  return (retVal);
}
 80085aa:	b2c0      	uxtb	r0, r0
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop

080085b0 <PWMC_SetLSModConfig>:
void PWMC_SetLSModConfig(PWMC_Handle_t *pHandle, uint8_t newConfig)
{
  uint8_t temp=0;  
  for (int8_t i=5; i>=0; i--)
  {
    temp = (uint8_t) ((newConfig >> i) & 0x01);
 80085b0:	2300      	movs	r3, #0
 80085b2:	104a      	asrs	r2, r1, #1
 80085b4:	f361 0307 	bfi	r3, r1, #0, #8
 80085b8:	f362 230f 	bfi	r3, r2, #8, #8
 80085bc:	108a      	asrs	r2, r1, #2
 80085be:	f362 4317 	bfi	r3, r2, #16, #8
 80085c2:	10ca      	asrs	r2, r1, #3
 80085c4:	f362 631f 	bfi	r3, r2, #24, #8
 80085c8:	f003 3301 	and.w	r3, r3, #16843009	@ 0x1010101
 80085cc:	f3c1 1240 	ubfx	r2, r1, #5, #1
 80085d0:	f3c1 1100 	ubfx	r1, r1, #4, #1
 80085d4:	7442      	strb	r2, [r0, #17]
    if (temp == 1) pHandle->LSModArray[i] = 1;
 80085d6:	7401      	strb	r1, [r0, #16]
 80085d8:	60c3      	str	r3, [r0, #12]
    else pHandle->LSModArray[i] = 0;
  }
}
 80085da:	4770      	bx	lr

080085dc <PWMC_GetQuasiSynchState>:
  * @retval uint8_t: 0=disabled, 1=enabled
  */
uint8_t PWMC_GetQuasiSynchState(PWMC_Handle_t * pHandle )
{
  return ((pHandle->QuasiSynchDecay) ? ((uint8_t) pHandle->QuasiSynchDecay ) : 0);
}
 80085dc:	7e40      	ldrb	r0, [r0, #25]
 80085de:	4770      	bx	lr

080085e0 <PWMC_SetQuasiSynchState>:
  * @param  uint8_t: 0=disable, 1=enable
  * @retval none
  */
void PWMC_SetQuasiSynchState(PWMC_Handle_t * pHandle, uint8_t State )
{
  if (State == 1)
 80085e0:	f1a1 0101 	sub.w	r1, r1, #1
 80085e4:	fab1 f181 	clz	r1, r1
 80085e8:	0949      	lsrs	r1, r1, #5
 80085ea:	7641      	strb	r1, [r0, #25]
  }
  else
  {
    pHandle->QuasiSynchDecay = false;
  }    
}
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop

080085f0 <RVBS_Clear>:
  * @brief  It clears bus voltage FW variable containing average bus voltage
  *         value.
  * @param  pHandle related RDivider_Handle_t
  */
__weak void RVBS_Clear(RDivider_Handle_t *pHandle)
{
 80085f0:	b510      	push	{r4, lr}
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 80085f2:	8a42      	ldrh	r2, [r0, #18]
 80085f4:	f8b0 e00c 	ldrh.w	lr, [r0, #12]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 80085f8:	8943      	ldrh	r3, [r0, #10]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 80085fa:	4496      	add	lr, r2
 80085fc:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
 8008600:	2400      	movs	r4, #0
 8008602:	f36e 040f 	bfi	r4, lr, #0, #16
 8008606:	f36e 441f 	bfi	r4, lr, #16, #16
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800860a:	b153      	cbz	r3, 8008622 <RVBS_Clear+0x32>
 800860c:	6942      	ldr	r2, [r0, #20]
    {
      pHandle->aBuffer[index] = aux;
 800860e:	2300      	movs	r3, #0
 8008610:	3a02      	subs	r2, #2
 8008612:	f822 ef02 	strh.w	lr, [r2, #2]!
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8008616:	3301      	adds	r3, #1
 8008618:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
 800861c:	b299      	uxth	r1, r3
 800861e:	458c      	cmp	ip, r1
 8008620:	d8f7      	bhi.n	8008612 <RVBS_Clear+0x22>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8008622:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 8008624:	6044      	str	r4, [r0, #4]
    pHandle->index = 0U;
 8008626:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 8008628:	bd10      	pop	{r4, pc}
 800862a:	bf00      	nop

0800862c <RVBS_Init>:
{
 800862c:	b508      	push	{r3, lr}
    RVBS_Clear(pHandle);
 800862e:	f7ff ffdf 	bl	80085f0 <RVBS_Clear>
}
 8008632:	bd08      	pop	{r3, pc}

08008634 <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8008634:	8982      	ldrh	r2, [r0, #12]
 8008636:	89c1      	ldrh	r1, [r0, #14]
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8008638:	88c3      	ldrh	r3, [r0, #6]
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800863a:	428a      	cmp	r2, r1
 800863c:	d010      	beq.n	8008660 <RVBS_CheckFaultState+0x2c>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800863e:	f8b0 c012 	ldrh.w	ip, [r0, #18]
 8008642:	459c      	cmp	ip, r3
 8008644:	d80a      	bhi.n	800865c <RVBS_CheckFaultState+0x28>
{
 8008646:	b410      	push	{r4}
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8008648:	7c04      	ldrb	r4, [r0, #16]
 800864a:	b994      	cbnz	r4, 8008672 <RVBS_CheckFaultState+0x3e>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 800864c:	4299      	cmp	r1, r3
 800864e:	d914      	bls.n	800867a <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 8008650:	2301      	movs	r3, #1
 8008652:	7403      	strb	r3, [r0, #16]
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 8008654:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8008656:	f85d 4b04 	ldr.w	r4, [sp], #4
 800865a:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 800865c:	2004      	movs	r0, #4
 800865e:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8008660:	429a      	cmp	r2, r3
 8008662:	d30c      	bcc.n	800867e <RVBS_CheckFaultState+0x4a>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8008664:	8a40      	ldrh	r0, [r0, #18]
 8008666:	4298      	cmp	r0, r3
 8008668:	bf94      	ite	ls
 800866a:	2000      	movls	r0, #0
 800866c:	2001      	movhi	r0, #1
 800866e:	0080      	lsls	r0, r0, #2
 8008670:	4770      	bx	lr
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8008672:	429a      	cmp	r2, r3
 8008674:	d2ee      	bcs.n	8008654 <RVBS_CheckFaultState+0x20>
          pHandle->OverVoltageHysteresisUpDir = false;
 8008676:	2300      	movs	r3, #0
 8008678:	7403      	strb	r3, [r0, #16]
          fault = MC_OVER_VOLT;
 800867a:	2002      	movs	r0, #2
 800867c:	e7eb      	b.n	8008656 <RVBS_CheckFaultState+0x22>
 800867e:	2002      	movs	r0, #2
}
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop

08008684 <RVBS_CalcAvVbus>:
{
 8008684:	b538      	push	{r3, r4, r5, lr}
    if (0xFFFFU == hAux)
 8008686:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800868a:	4299      	cmp	r1, r3
{
 800868c:	4604      	mov	r4, r0
    if (0xFFFFU == hAux)
 800868e:	d021      	beq.n	80086d4 <RVBS_CalcAvVbus+0x50>
      pHandle->aBuffer[pHandle->index] = hAux;
 8008690:	6943      	ldr	r3, [r0, #20]
 8008692:	7e45      	ldrb	r5, [r0, #25]
 8008694:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8008698:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
 800869c:	f01e 02ff 	ands.w	r2, lr, #255	@ 0xff
 80086a0:	d00d      	beq.n	80086be <RVBS_CalcAvVbus+0x3a>
 80086a2:	3a01      	subs	r2, #1
 80086a4:	b2d2      	uxtb	r2, r2
 80086a6:	eb03 0042 	add.w	r0, r3, r2, lsl #1
 80086aa:	3b02      	subs	r3, #2
      wtemp = 0u;
 80086ac:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 80086ae:	f833 cf02 	ldrh.w	ip, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80086b2:	4298      	cmp	r0, r3
        wtemp += pHandle->aBuffer[i];
 80086b4:	4462      	add	r2, ip
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80086b6:	d1fa      	bne.n	80086ae <RVBS_CalcAvVbus+0x2a>
      wtemp /= pHandle->LowPassFilterBW;
 80086b8:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 80086bc:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 80086be:	f10e 3eff 	add.w	lr, lr, #4294967295
 80086c2:	4575      	cmp	r5, lr
        pHandle->index++;
 80086c4:	bf34      	ite	cc
 80086c6:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 80086c8:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 80086ca:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 80086cc:	80a1      	strh	r1, [r4, #4]
        pHandle->index++;
 80086ce:	bf34      	ite	cc
 80086d0:	7665      	strbcc	r5, [r4, #25]
        pHandle->index = 0U;
 80086d2:	7663      	strbcs	r3, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 80086d4:	4620      	mov	r0, r4
 80086d6:	f7ff ffad 	bl	8008634 <RVBS_CheckFaultState>
 80086da:	8120      	strh	r0, [r4, #8]
}
 80086dc:	bd38      	pop	{r3, r4, r5, pc}
 80086de:	bf00      	nop

080086e0 <RUC_Init>:
  */
__weak void RUC_Init(	RevUpCtrl_Handle_t *pHandle,
						SpeednTorqCtrl_Handle_t *pSTC,
						VirtualSpeedSensor_Handle_t *pVSS)
{
  if (MC_NULL == pHandle)
 80086e0:	b1a8      	cbz	r0, 800870e <RUC_Init+0x2e>
    pHandle->pVSS = pVSS;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits*/
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t * )pRUCPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 80086e2:	6943      	ldr	r3, [r0, #20]
    pHandle->pVSS = pVSS;
 80086e4:	e9c0 1214 	strd	r1, r2, [r0, #80]	@ 0x50
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 80086e8:	b193      	cbz	r3, 8008710 <RUC_Init+0x30>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t * )pRUCPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 80086ea:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 80086ec:	b19b      	cbz	r3, 8008716 <RUC_Init+0x36>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t * )pRUCPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 80086ee:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 80086f0:	b19b      	cbz	r3, 800871a <RUC_Init+0x3a>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t * )pRUCPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 80086f2:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 80086f4:	b19b      	cbz	r3, 800871e <RUC_Init+0x3e>
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	2205      	movs	r2, #5
 80086fa:	b153      	cbz	r3, 8008712 <RUC_Init+0x32>
 80086fc:	2304      	movs	r3, #4
    {
      /* nothing to do error */
    }
    else
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 80086fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008702:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008706:	2100      	movs	r1, #0
 8008708:	6159      	str	r1, [r3, #20]

      pHandle->bPhaseNbr = bPhase;
 800870a:	f880 204a 	strb.w	r2, [r0, #74]	@ 0x4a

    }
  }
}
 800870e:	4770      	bx	lr
      bPhase++;
 8008710:	2201      	movs	r2, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8008712:	1e53      	subs	r3, r2, #1
 8008714:	e7f3      	b.n	80086fe <RUC_Init+0x1e>
      bPhase++;
 8008716:	2202      	movs	r2, #2
 8008718:	e7fb      	b.n	8008712 <RUC_Init+0x32>
 800871a:	2203      	movs	r2, #3
 800871c:	e7f9      	b.n	8008712 <RUC_Init+0x32>
 800871e:	2204      	movs	r2, #4
 8008720:	e7f7      	b.n	8008712 <RUC_Init+0x32>
 8008722:	bf00      	nop

08008724 <RUC_Clear>:
  *         This parameter must be -1 or +1.
  */

__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
  if (MC_NULL == pHandle)
 8008724:	2800      	cmp	r0, #0
 8008726:	d046      	beq.n	80087b6 <RUC_Clear+0x92>
{
 8008728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800872c:	4604      	mov	r4, r0
    RevUpCtrl_PhaseParams_t *pPhaseParams = pHandle->ParamsData;

    pHandle->hDirection = hMotorDirection;

    /*Initializes the rev up stages counter.*/
    pHandle->bStageCnt = 0U;
 800872e:	2600      	movs	r6, #0
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 8008730:	f8d0 8054 	ldr.w	r8, [r0, #84]	@ 0x54
    pHandle->bStageCnt = 0U;
 8008734:	f880 604f 	strb.w	r6, [r0, #79]	@ 0x4f
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 8008738:	6d27      	ldr	r7, [r4, #80]	@ 0x50
    pHandle->hDirection = hMotorDirection;
 800873a:	80c1      	strh	r1, [r0, #6]

    /* Calls the clear method of VSS.*/
    VSS_Clear(pVSS);
 800873c:	4640      	mov	r0, r8
 800873e:	460d      	mov	r5, r1
 8008740:	f000 f9ce 	bl	8008ae0 <VSS_Clear>

    /* Sets the STC in torque mode.*/
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 8008744:	2104      	movs	r1, #4
 8008746:	4638      	mov	r0, r7
 8008748:	f000 f8de 	bl	8008908 <STC_SetControlMode>

    /* Sets the mechanical starting angle of VSS.*/
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 800874c:	8863      	ldrh	r3, [r4, #2]
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800874e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008752:	b2ad      	uxth	r5, r5
 8008754:	fb13 f305 	smulbb	r3, r3, r5
 8008758:	b21b      	sxth	r3, r3
    pHandle->hElAngleAccu = hMecAngle;
 800875a:	f8a8 3030 	strh.w	r3, [r8, #48]	@ 0x30
    pHandle->_Super.hElAngle = hMecAngle;
 800875e:	f8a8 3004 	strh.w	r3, [r8, #4]

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, STC_GetDutyCycleRef(pSTC), 0U);
 8008762:	4638      	mov	r0, r7
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8008764:	fb93 f3f2 	sdiv	r3, r3, r2
 8008768:	f8a8 3006 	strh.w	r3, [r8, #6]
 800876c:	f000 f8c8 	bl	8008900 <STC_GetDutyCycleRef>
 8008770:	4632      	mov	r2, r6
 8008772:	b201      	sxth	r1, r0
 8008774:	4638      	mov	r0, r7
 8008776:	f000 f8cd 	bl	8008914 <STC_ExecRamp>

    /* Gives the first command to STC and VSS.*/
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalPulse, (uint32_t)(pPhaseParams->hDurationms));
 800877a:	89a2      	ldrh	r2, [r4, #12]
 800877c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8008780:	4638      	mov	r0, r7
 8008782:	f000 f8c7 	bl	8008914 <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms );
 8008786:	89e1      	ldrh	r1, [r4, #14]
 8008788:	89a2      	ldrh	r2, [r4, #12]
 800878a:	fb11 f105 	smulbb	r1, r1, r5
 800878e:	b209      	sxth	r1, r1
 8008790:	4640      	mov	r0, r8
 8008792:	f000 fa5b 	bl	8008c4c <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks.*/
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 8008796:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8008798:	8821      	ldrh	r1, [r4, #0]
                                              / 1000U );
 800879a:	4a07      	ldr	r2, [pc, #28]	@ (80087b8 <RUC_Clear+0x94>)

    pHandle->hPhaseRemainingTicks++;

    /*Set the next phases parameter pointer.*/
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t * )pPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
    pHandle->EnteredZone1 = false;
 800879c:	f884 604e 	strb.w	r6, [r4, #78]	@ 0x4e
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 80087a0:	fb01 f303 	mul.w	r3, r1, r3
                                              / 1000U );
 80087a4:	fba2 2303 	umull	r2, r3, r2, r3
 80087a8:	099b      	lsrs	r3, r3, #6
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t * )pPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 80087aa:	6962      	ldr	r2, [r4, #20]
 80087ac:	60a2      	str	r2, [r4, #8]
    pHandle->hPhaseRemainingTicks++;
 80087ae:	3301      	adds	r3, #1
 80087b0:	80a3      	strh	r3, [r4, #4]
  }
}
 80087b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087b6:	4770      	bx	lr
 80087b8:	10624dd3 	.word	0x10624dd3

080087bc <RUC_UpdatePulse>:
  * @brief  Update rev-up duty cycle relative to actual Vbus value to be applied
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  BusVHandle: pointer to the bus voltage sensor
  */
__weak void RUC_UpdatePulse(RevUpCtrl_Handle_t *pHandle, BusVoltageSensor_Handle_t *BusVHandle)
{
 80087bc:	b510      	push	{r4, lr}
 80087be:	4604      	mov	r4, r0
  if (MC_NULL == pHandle)
 80087c0:	b138      	cbz	r0, 80087d2 <RUC_UpdatePulse+0x16>
  {
    /* Nothing to do */
  }
  else
  {
    uint16_t tPulseUpdateFactor = 10 * NOMINAL_BUS_VOLTAGE_V 
 80087c2:	4608      	mov	r0, r1
                                  / VBS_GetAvBusVoltage_V(BusVHandle);
 80087c4:	f7fe fe16 	bl	80073f4 <VBS_GetAvBusVoltage_V>
 80087c8:	2378      	movs	r3, #120	@ 0x78
 80087ca:	fbb3 f3f0 	udiv	r3, r3, r0
    uint16_t tPulseUpdateFactor = 10 * NOMINAL_BUS_VOLTAGE_V 
 80087ce:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
    pHandle->PulseUpdateFactor = tPulseUpdateFactor;						
  }
}
 80087d2:	bd10      	pop	{r4, pc}

080087d4 <RUC_Exec>:
  */
__weak bool RUC_Exec(RevUpCtrl_Handle_t *pHandle)
{
  bool retVal = true;

  if (MC_NULL == pHandle)
 80087d4:	2800      	cmp	r0, #0
 80087d6:	d039      	beq.n	800884c <RUC_Exec+0x78>
  {
    retVal = false;
  }
  else
  {
    if (pHandle->hPhaseRemainingTicks > 0U)
 80087d8:	8883      	ldrh	r3, [r0, #4]
{
 80087da:	b510      	push	{r4, lr}
 80087dc:	4604      	mov	r4, r0
    if (pHandle->hPhaseRemainingTicks > 0U)
 80087de:	b12b      	cbz	r3, 80087ec <RUC_Exec+0x18>
    {
      /* Decrease the hPhaseRemainingTicks.*/
      pHandle->hPhaseRemainingTicks--;
 80087e0:	3b01      	subs	r3, #1
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	8083      	strh	r3, [r0, #4]

    } /* hPhaseRemainingTicks > 0 */

    if (0U == pHandle->hPhaseRemainingTicks)
 80087e6:	b10b      	cbz	r3, 80087ec <RUC_Exec+0x18>
  bool retVal = true;
 80087e8:	2001      	movs	r0, #1
        retVal = false;
      }
    }
  }
  return (retVal);
}
 80087ea:	bd10      	pop	{r4, pc}
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 80087ec:	68a3      	ldr	r3, [r4, #8]
 80087ee:	b35b      	cbz	r3, 8008848 <RUC_Exec+0x74>
        uint16_t hPulse = pHandle->pCurrentPhaseParams->hFinalPulse * pHandle->PulseUpdateFactor / 10;
 80087f0:	8899      	ldrh	r1, [r3, #4]
 80087f2:	f8b4 0048 	ldrh.w	r0, [r4, #72]	@ 0x48
 80087f6:	4a16      	ldr	r2, [pc, #88]	@ (8008850 <RUC_Exec+0x7c>)
 80087f8:	fb00 f101 	mul.w	r1, r0, r1
 80087fc:	fba2 2101 	umull	r2, r1, r2, r1
        (void)STC_ExecRamp(pHandle->pSTC, hPulse,
 8008800:	f341 01cf 	sbfx	r1, r1, #3, #16
 8008804:	881a      	ldrh	r2, [r3, #0]
 8008806:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8008808:	f000 f884 	bl	8008914 <STC_ExecRamp>
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 800880c:	68a3      	ldr	r3, [r4, #8]
 800880e:	88e0      	ldrh	r0, [r4, #6]
 8008810:	8859      	ldrh	r1, [r3, #2]
        VSS_SetMecAcceleration(pHandle->pVSS,
 8008812:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8008814:	fb11 f100 	smulbb	r1, r1, r0
        VSS_SetMecAcceleration(pHandle->pVSS,
 8008818:	b209      	sxth	r1, r1
 800881a:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800881c:	f000 fa16 	bl	8008c4c <VSS_SetMecAcceleration>
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8008820:	68a2      	ldr	r2, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8008822:	f8b4 c000 	ldrh.w	ip, [r4]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8008826:	8813      	ldrh	r3, [r2, #0]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8008828:	490a      	ldr	r1, [pc, #40]	@ (8008854 <RUC_Exec+0x80>)
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 800882a:	6890      	ldr	r0, [r2, #8]
        pHandle->bStageCnt++;
 800882c:	f894 204f 	ldrb.w	r2, [r4, #79]	@ 0x4f
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8008830:	60a0      	str	r0, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8008832:	fb0c f303 	mul.w	r3, ip, r3
 8008836:	fba1 1303 	umull	r1, r3, r1, r3
 800883a:	099b      	lsrs	r3, r3, #6
        pHandle->hPhaseRemainingTicks++;
 800883c:	3301      	adds	r3, #1
        pHandle->bStageCnt++;
 800883e:	3201      	adds	r2, #1
        pHandle->hPhaseRemainingTicks++;
 8008840:	80a3      	strh	r3, [r4, #4]
        pHandle->bStageCnt++;
 8008842:	f884 204f 	strb.w	r2, [r4, #79]	@ 0x4f
 8008846:	e7cf      	b.n	80087e8 <RUC_Exec+0x14>
    retVal = false;
 8008848:	2000      	movs	r0, #0
}
 800884a:	bd10      	pop	{r4, pc}
    retVal = false;
 800884c:	2000      	movs	r0, #0
}
 800884e:	4770      	bx	lr
 8008850:	cccccccd 	.word	0xcccccccd
 8008854:	10624dd3 	.word	0x10624dd3

08008858 <RUC_IsAlignStageNow>:
  */
uint8_t RUC_IsAlignStageNow(RevUpCtrl_Handle_t *pHandle)
{
  uint8_t align_flag = 0;

  if (MC_NULL == pHandle)
 8008858:	b150      	cbz	r0, 8008870 <RUC_IsAlignStageNow+0x18>
    hRetVal = pHandle->ParamsData[bPhase].hFinalMecSpeedUnit;
 800885a:	f890 304f 	ldrb.w	r3, [r0, #79]	@ 0x4f
 800885e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008862:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  }
  else
  {
    int16_t speed;
    speed = RUC_GetPhaseFinalMecSpeed01Hz(pHandle, pHandle->bStageCnt);
    if (0 == speed)
 8008866:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 800886a:	fab0 f080 	clz	r0, r0
 800886e:	0940      	lsrs	r0, r0, #5
    {
      align_flag = 1;
    }
  }
  return (align_flag);
}
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop

08008874 <RUC_FirstAccelerationStageReached>:
  */
__weak bool RUC_FirstAccelerationStageReached( RevUpCtrl_Handle_t * pHandle)
{
  bool retVal = false;

  if (MC_NULL == pHandle)
 8008874:	b138      	cbz	r0, 8008886 <RUC_FirstAccelerationStageReached+0x12>
  {
    /* Nothing to do */
  }
  else
  {
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 8008876:	f890 304f 	ldrb.w	r3, [r0, #79]	@ 0x4f
 800887a:	f890 004b 	ldrb.w	r0, [r0, #75]	@ 0x4b
 800887e:	4283      	cmp	r3, r0
 8008880:	bf34      	ite	cc
 8008882:	2000      	movcc	r0, #0
 8008884:	2001      	movcs	r0, #1
    {
      retVal = true;
    }
  }
  return (retVal);
}
 8008886:	4770      	bx	lr

08008888 <RUC_GetDirection>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  *  @retval Returns direction of the motor.
  */
__weak int16_t RUC_GetDirection(RevUpCtrl_Handle_t *pHandle)
{
  return ((MC_NULL == pHandle) ? 0U : (int16_t)pHandle->hDirection);
 8008888:	b108      	cbz	r0, 800888e <RUC_GetDirection+0x6>
 800888a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
}
 800888e:	4770      	bx	lr

08008890 <STC_Init>:
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{

  if (MC_NULL == pHandle)
 8008890:	b190      	cbz	r0, 80088b8 <STC_Init+0x28>
{
 8008892:	b430      	push	{r4, r5}
  else
  {
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8008894:	f9b0 502a 	ldrsh.w	r5, [r0, #42]	@ 0x2a
    pHandle->DutyCycleRef = ((uint32_t)pHandle->DutyCycleRefDefault) * 65536;
 8008898:	8d84      	ldrh	r4, [r0, #44]	@ 0x2c
    pHandle->Mode = pHandle->ModeDefault;
 800889a:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 800889e:	7003      	strb	r3, [r0, #0]
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 80088a0:	042d      	lsls	r5, r5, #16
    pHandle->TargetFinal = 0;
 80088a2:	2300      	movs	r3, #0
    pHandle->DutyCycleRef = ((uint32_t)pHandle->DutyCycleRefDefault) * 65536;
 80088a4:	0424      	lsls	r4, r4, #16
 80088a6:	e9c0 5401 	strd	r5, r4, [r0, #4]
    pHandle->PISpeed = pPI;
 80088aa:	6101      	str	r1, [r0, #16]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
  }
}
 80088ac:	bc30      	pop	{r4, r5}
    pHandle->SPD = SPD_Handle;
 80088ae:	6142      	str	r2, [r0, #20]
    pHandle->TargetFinal = 0;
 80088b0:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 80088b2:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 80088b4:	6183      	str	r3, [r0, #24]
}
 80088b6:	4770      	bx	lr
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop

080088bc <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  if (MC_NULL == pHandle)
 80088bc:	b100      	cbz	r0, 80088c0 <STC_SetSpeedSensor+0x4>
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->SPD = SPD_Handle;
 80088be:	6141      	str	r1, [r0, #20]
  }
}
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop

080088c4 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if (MC_NULL == pHandle)
 80088c4:	b140      	cbz	r0, 80088d8 <STC_Clear+0x14>
{
 80088c6:	b510      	push	{r4, lr}
  {
    /* Nothing to do */
  }
  else
  {
    if (MCM_SPEED_MODE == pHandle->Mode)
 80088c8:	7803      	ldrb	r3, [r0, #0]
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	4604      	mov	r4, r0
 80088ce:	d004      	beq.n	80088da <STC_Clear+0x16>
    {
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
    }
    pHandle->DutyCycleRef = ((uint32_t)pHandle->DutyCycleRefDefault) * 65536;	
 80088d0:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 80088d2:	041b      	lsls	r3, r3, #16
 80088d4:	60a3      	str	r3, [r4, #8]
  }
}
 80088d6:	bd10      	pop	{r4, pc}
 80088d8:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 80088da:	6900      	ldr	r0, [r0, #16]
 80088dc:	2100      	movs	r1, #0
 80088de:	f7ff fc07 	bl	80080f0 <PID_SetIntegralTerm>
    pHandle->DutyCycleRef = ((uint32_t)pHandle->DutyCycleRefDefault) * 65536;	
 80088e2:	8da3      	ldrh	r3, [r4, #44]	@ 0x2c
 80088e4:	041b      	lsls	r3, r3, #16
 80088e6:	60a3      	str	r3, [r4, #8]
}
 80088e8:	bd10      	pop	{r4, pc}
 80088ea:	bf00      	nop

080088ec <STC_GetMecSpeedRefUnit>:
{
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt >> 16));
#else
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
 80088ec:	b130      	cbz	r0, 80088fc <STC_GetMecSpeedRefUnit+0x10>
 80088ee:	6840      	ldr	r0, [r0, #4]
 80088f0:	2800      	cmp	r0, #0
 80088f2:	bfbc      	itt	lt
 80088f4:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 80088f8:	30ff      	addlt	r0, #255	@ 0xff
 80088fa:	1400      	asrs	r0, r0, #16
#endif
}
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop

08008900 <STC_GetDutyCycleRef>:
{
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  return ((MC_NULL == pHandle) ? 0 : (uint16_t)(pHandle->DutyCycleRef >> 16));
#else
  return ((MC_NULL == pHandle) ? 0 : (uint16_t)(pHandle->DutyCycleRef / 65536));
 8008900:	b100      	cbz	r0, 8008904 <STC_GetDutyCycleRef+0x4>
 8008902:	8940      	ldrh	r0, [r0, #10]
#endif
}
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop

08008908 <STC_SetControlMode>:
  *         enable the Speed mode.
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, MC_ControlMode_t bMode )
{
  if (MC_NULL == pHandle)
 8008908:	b110      	cbz	r0, 8008910 <STC_SetControlMode+0x8>
    /* Nothing to do */
  }
  else
  {
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800890a:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 800890c:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800890e:	60c3      	str	r3, [r0, #12]
  }
}
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop

08008914 <STC_ExecRamp>:
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
  bool allowedRange = true;

  if (MC_NULL == pHandle)
 8008914:	b358      	cbz	r0, 800896e <STC_ExecRamp+0x5a>
{
 8008916:	b570      	push	{r4, r5, r6, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application. */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8008918:	7803      	ldrb	r3, [r0, #0]
 800891a:	2b04      	cmp	r3, #4
 800891c:	460d      	mov	r5, r1
 800891e:	4616      	mov	r6, r2
 8008920:	4604      	mov	r4, r0
 8008922:	d026      	beq.n	8008972 <STC_ExecRamp+0x5e>
    {
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
 8008924:	6840      	ldr	r0, [r0, #4]
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8008926:	8be3      	ldrh	r3, [r4, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
 8008928:	2800      	cmp	r0, #0
 800892a:	bfbc      	itt	lt
 800892c:	f500 407f 	addlt.w	r0, r0, #65280	@ 0xff00
 8008930:	30ff      	addlt	r0, #255	@ 0xff
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8008932:	428b      	cmp	r3, r1
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
 8008934:	ea4f 4020 	mov.w	r0, r0, asr #16
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8008938:	da01      	bge.n	800893e <STC_ExecRamp+0x2a>
    allowedRange = false;
 800893a:	2000      	movs	r0, #0
        pHandle->IncDecAmount = wAux1;
      }
    }
  }
  return (allowedRange);
}
 800893c:	bd70      	pop	{r4, r5, r6, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 800893e:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	@ 0x24
 8008942:	428b      	cmp	r3, r1
 8008944:	dcf9      	bgt.n	800893a <STC_ExecRamp+0x26>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8008946:	8c23      	ldrh	r3, [r4, #32]
 8008948:	428b      	cmp	r3, r1
 800894a:	dd03      	ble.n	8008954 <STC_ExecRamp+0x40>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 800894c:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	@ 0x22
 8008950:	428b      	cmp	r3, r1
 8008952:	dbf2      	blt.n	800893a <STC_ExecRamp+0x26>
      if (0U == hDurationms)
 8008954:	b9a6      	cbnz	r6, 8008980 <STC_ExecRamp+0x6c>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8008956:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8008958:	042d      	lsls	r5, r5, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 800895a:	2b03      	cmp	r3, #3
        pHandle->RampRemainingStep = 0U;
 800895c:	f04f 0300 	mov.w	r3, #0
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8008960:	bf0c      	ite	eq
 8008962:	6065      	streq	r5, [r4, #4]
          pHandle->DutyCycleRef = ((int32_t)hTargetFinal) * 65536;
 8008964:	60a5      	strne	r5, [r4, #8]
        pHandle->RampRemainingStep = 0U;
 8008966:	60e3      	str	r3, [r4, #12]
        pHandle->IncDecAmount = 0;
 8008968:	61a3      	str	r3, [r4, #24]
    allowedRange = false;
 800896a:	2001      	movs	r0, #1
}
 800896c:	bd70      	pop	{r4, r5, r6, pc}
    allowedRange = false;
 800896e:	2000      	movs	r0, #0
}
 8008970:	4770      	bx	lr
      hCurrentReference = STC_GetDutyCycleRef(pHandle);
 8008972:	f7ff ffc5 	bl	8008900 <STC_GetDutyCycleRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveDutyCycle)
 8008976:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8008978:	42ab      	cmp	r3, r5
 800897a:	dbde      	blt.n	800893a <STC_ExecRamp+0x26>
      hCurrentReference = STC_GetDutyCycleRef(pHandle);
 800897c:	b200      	sxth	r0, r0
 800897e:	e7e9      	b.n	8008954 <STC_ExecRamp+0x40>
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8008980:	8ba3      	ldrh	r3, [r4, #28]
        wAux /= 1000U;
 8008982:	4a07      	ldr	r2, [pc, #28]	@ (80089a0 <STC_ExecRamp+0x8c>)
        pHandle->TargetFinal = hTargetFinal;
 8008984:	8065      	strh	r5, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8008986:	fb06 f303 	mul.w	r3, r6, r3
        wAux /= 1000U;
 800898a:	fba2 2303 	umull	r2, r3, r2, r3
 800898e:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 8008990:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8008992:	1a28      	subs	r0, r5, r0
 8008994:	0400      	lsls	r0, r0, #16
        pHandle->RampRemainingStep++;
 8008996:	60e3      	str	r3, [r4, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8008998:	fb90 f0f3 	sdiv	r0, r0, r3
        pHandle->IncDecAmount = wAux1;
 800899c:	61a0      	str	r0, [r4, #24]
 800899e:	e7e4      	b.n	800896a <STC_ExecRamp+0x56>
 80089a0:	10624dd3 	.word	0x10624dd3

080089a4 <STC_CalcSpeedReference>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t motor dutycycle reference. This value represents actually the
  *         dutycycle expressed in digit.
  */
__weak uint16_t STC_CalcSpeedReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 80089a4:	b570      	push	{r4, r5, r6, lr}
  uint16_t hDutyCycleReference;

  if (MC_NULL == pHandle)
 80089a6:	4604      	mov	r4, r0
 80089a8:	b190      	cbz	r0, 80089d0 <STC_CalcSpeedReference+0x2c>
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 80089aa:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 80089ac:	68c3      	ldr	r3, [r0, #12]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80089ae:	2a04      	cmp	r2, #4
 80089b0:	d00f      	beq.n	80089d2 <STC_CalcSpeedReference+0x2e>
    if (pHandle->RampRemainingStep > 1U)
 80089b2:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->SpeedRefUnitExt;
 80089b4:	6846      	ldr	r6, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 80089b6:	d918      	bls.n	80089ea <STC_CalcSpeedReference+0x46>
    {
      /* Increment/decrement the reference value. */
      wCurrentReference += pHandle->IncDecAmount;
 80089b8:	6981      	ldr	r1, [r0, #24]
 80089ba:	440e      	add	r6, r1

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 80089bc:	3b01      	subs	r3, #1
      /* Compute speed error */
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTargetSpeed = (int16_t)(wCurrentReference >> 16);
#else
      hTargetSpeed = (int16_t)(wCurrentReference / 65536);
 80089be:	2e00      	cmp	r6, #0
      pHandle->RampRemainingStep--;
 80089c0:	60c3      	str	r3, [r0, #12]
      hTargetSpeed = (int16_t)(wCurrentReference / 65536);
 80089c2:	4630      	mov	r0, r6
 80089c4:	db15      	blt.n	80089f2 <STC_CalcSpeedReference+0x4e>
 80089c6:	1403      	asrs	r3, r0, #16
    if (MCM_SPEED_MODE == pHandle->Mode)
 80089c8:	2a03      	cmp	r2, #3
 80089ca:	d01e      	beq.n	8008a0a <STC_CalcSpeedReference+0x66>
      pHandle->SpeedRefUnitExt = wCurrentReference;
      pHandle->DutyCycleRef = ((int32_t)hDutyCycleReference) * 65536;
    }
    else
    {
      pHandle->DutyCycleRef = wCurrentReference;
 80089cc:	60a6      	str	r6, [r4, #8]
#ifdef NO_FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hDutyCycleReference = (int16_t)(wCurrentReference >> 16);
#else
      hDutyCycleReference = (int16_t)(wCurrentReference / 65536);
 80089ce:	b298      	uxth	r0, r3
#endif
    }
  }
  return (hDutyCycleReference);
}
 80089d0:	bd70      	pop	{r4, r5, r6, pc}
    if (pHandle->RampRemainingStep > 1U)
 80089d2:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->DutyCycleRef;
 80089d4:	6886      	ldr	r6, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 80089d6:	d910      	bls.n	80089fa <STC_CalcSpeedReference+0x56>
      wCurrentReference += pHandle->IncDecAmount;
 80089d8:	6982      	ldr	r2, [r0, #24]
      pHandle->DutyCycleRef = wCurrentReference;
 80089da:	4416      	add	r6, r2
      pHandle->RampRemainingStep--;
 80089dc:	3b01      	subs	r3, #1
      hDutyCycleReference = (int16_t)(wCurrentReference / 65536);
 80089de:	2e00      	cmp	r6, #0
      pHandle->RampRemainingStep--;
 80089e0:	60c3      	str	r3, [r0, #12]
      hDutyCycleReference = (int16_t)(wCurrentReference / 65536);
 80089e2:	4630      	mov	r0, r6
 80089e4:	db0d      	blt.n	8008a02 <STC_CalcSpeedReference+0x5e>
 80089e6:	1403      	asrs	r3, r0, #16
 80089e8:	e7f0      	b.n	80089cc <STC_CalcSpeedReference+0x28>
    else if (1U == pHandle->RampRemainingStep)
 80089ea:	d021      	beq.n	8008a30 <STC_CalcSpeedReference+0x8c>
      hTargetSpeed = (int16_t)(wCurrentReference / 65536);
 80089ec:	2e00      	cmp	r6, #0
 80089ee:	4630      	mov	r0, r6
 80089f0:	dae9      	bge.n	80089c6 <STC_CalcSpeedReference+0x22>
 80089f2:	f506 407f 	add.w	r0, r6, #65280	@ 0xff00
 80089f6:	30ff      	adds	r0, #255	@ 0xff
 80089f8:	e7e5      	b.n	80089c6 <STC_CalcSpeedReference+0x22>
    else if (1U == pHandle->RampRemainingStep)
 80089fa:	d01f      	beq.n	8008a3c <STC_CalcSpeedReference+0x98>
      hDutyCycleReference = (int16_t)(wCurrentReference / 65536);
 80089fc:	2e00      	cmp	r6, #0
 80089fe:	4630      	mov	r0, r6
 8008a00:	daf1      	bge.n	80089e6 <STC_CalcSpeedReference+0x42>
 8008a02:	f506 407f 	add.w	r0, r6, #65280	@ 0xff00
 8008a06:	30ff      	adds	r0, #255	@ 0xff
 8008a08:	e7ed      	b.n	80089e6 <STC_CalcSpeedReference+0x42>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 8008a0a:	6960      	ldr	r0, [r4, #20]
      if (hTargetSpeed < 0) hError = hMeasuredSpeed - hTargetSpeed;
 8008a0c:	b29d      	uxth	r5, r3
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 8008a0e:	f000 f829 	bl	8008a64 <SPD_GetAvrgMecSpeedUnit>
      if (hTargetSpeed < 0) hError = hMeasuredSpeed - hTargetSpeed;
 8008a12:	f516 3f80 	cmn.w	r6, #65536	@ 0x10000
      else hError = hTargetSpeed - hMeasuredSpeed;
 8008a16:	bfcd      	iteet	gt
 8008a18:	1a2b      	subgt	r3, r5, r0
      if (hTargetSpeed < 0) hError = hMeasuredSpeed - hTargetSpeed;
 8008a1a:	1b40      	suble	r0, r0, r5
 8008a1c:	b201      	sxthle	r1, r0
      else hError = hTargetSpeed - hMeasuredSpeed;
 8008a1e:	b219      	sxthgt	r1, r3
      hDutyCycleReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8008a20:	6920      	ldr	r0, [r4, #16]
 8008a22:	f7ff fb99 	bl	8008158 <PI_Controller>
      pHandle->DutyCycleRef = ((int32_t)hDutyCycleReference) * 65536;
 8008a26:	0403      	lsls	r3, r0, #16
 8008a28:	e9c4 6301 	strd	r6, r3, [r4, #4]
      hDutyCycleReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8008a2c:	b280      	uxth	r0, r0
}
 8008a2e:	bd70      	pop	{r4, r5, r6, pc}
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8008a30:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 8008a34:	2100      	movs	r1, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8008a36:	041e      	lsls	r6, r3, #16
      pHandle->RampRemainingStep = 0U;
 8008a38:	60c1      	str	r1, [r0, #12]
 8008a3a:	e7c5      	b.n	80089c8 <STC_CalcSpeedReference+0x24>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8008a3c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 8008a40:	2200      	movs	r2, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8008a42:	041e      	lsls	r6, r3, #16
      pHandle->RampRemainingStep = 0U;
 8008a44:	60c2      	str	r2, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8008a46:	e7c1      	b.n	80089cc <STC_CalcSpeedReference+0x28>

08008a48 <STC_GetMecSpeedRefUnitDefault>:
  * @retval int16_t It returns the Default mechanical rotor speed. 
  *         Expressed in the unit defined by #SPEED_UNIT
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault(SpeednTorqCtrl_Handle_t *pHandle)
{
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
 8008a48:	b108      	cbz	r0, 8008a4e <STC_GetMecSpeedRefUnitDefault+0x6>
 8008a4a:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	@ 0x2a
}
 8008a4e:	4770      	bx	lr

08008a50 <STC_ForceSpeedReferenceToCurrentSpeed>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
  if (MC_NULL == pHandle)
 8008a50:	b138      	cbz	r0, 8008a62 <STC_ForceSpeedReferenceToCurrentSpeed+0x12>
{
 8008a52:	b510      	push	{r4, lr}
 8008a54:	4604      	mov	r4, r0
  {
    /* Nothing to do */
  }
  else
  {
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8008a56:	6940      	ldr	r0, [r0, #20]
 8008a58:	f000 f804 	bl	8008a64 <SPD_GetAvrgMecSpeedUnit>
 8008a5c:	0400      	lsls	r0, r0, #16
 8008a5e:	6060      	str	r0, [r4, #4]
  }
}
 8008a60:	bd10      	pop	{r4, pc}
 8008a62:	4770      	bx	lr

08008a64 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 8008a64:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop

08008a6c <SPD_GetElSpeedDpp>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElSpeedDpp);
#else
  return (pHandle->hElSpeedDpp);
#endif
}
 8008a6c:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop

08008a74 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8008a74:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 8008a78:	4603      	mov	r3, r0
 8008a7a:	b510      	push	{r4, lr}
    {
      hAux = -(*pMecSpeedUnit);
 8008a7c:	fa1f f18c 	uxth.w	r1, ip
    if (*pMecSpeedUnit < 0)
 8008a80:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(*pMecSpeedUnit);
 8008a84:	bfb8      	it	lt
 8008a86:	4249      	neglt	r1, r1
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8008a88:	f8b3 c016 	ldrh.w	ip, [r3, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8008a8c:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8008a8e:	781a      	ldrb	r2, [r3, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8008a90:	8a9c      	ldrh	r4, [r3, #20]
      hAux = -(*pMecSpeedUnit);
 8008a92:	bfb8      	it	lt
 8008a94:	b289      	uxthlt	r1, r1
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8008a96:	458c      	cmp	ip, r1
 8008a98:	d818      	bhi.n	8008acc <SPD_IsMecSpeedReliable+0x58>
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8008a9a:	f9b3 e012 	ldrsh.w	lr, [r3, #18]
    {
      hAux = -(pHandle->hMecAccelUnitP);
 8008a9e:	fa1f fc8e 	uxth.w	ip, lr
    if (pHandle->hMecAccelUnitP < 0)
 8008aa2:	f1be 0f00 	cmp.w	lr, #0
      hAux = -(pHandle->hMecAccelUnitP);
 8008aa6:	bfb8      	it	lt
 8008aa8:	f1cc 0c00 	rsblt	ip, ip, #0
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8008aac:	f8b3 e018 	ldrh.w	lr, [r3, #24]
      hAux = -(pHandle->hMecAccelUnitP);
 8008ab0:	bfb8      	it	lt
 8008ab2:	fa1f fc8c 	uxthlt.w	ip, ip
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8008ab6:	45e6      	cmp	lr, ip
 8008ab8:	d308      	bcc.n	8008acc <SPD_IsMecSpeedReliable+0x58>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 8008aba:	428c      	cmp	r4, r1
 8008abc:	d306      	bcc.n	8008acc <SPD_IsMecSpeedReliable+0x58>
        /* Nothing to do */
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8008abe:	4290      	cmp	r0, r2
 8008ac0:	d809      	bhi.n	8008ad6 <SPD_IsMecSpeedReliable+0x62>
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 8008ac2:	1a10      	subs	r0, r2, r0
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8008ac4:	701a      	strb	r2, [r3, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 8008ac6:	bf18      	it	ne
 8008ac8:	2001      	movne	r0, #1
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8008aca:	bd10      	pop	{r4, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8008acc:	4290      	cmp	r0, r2
 8008ace:	d9f8      	bls.n	8008ac2 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber++;
 8008ad0:	3201      	adds	r2, #1
 8008ad2:	b2d2      	uxtb	r2, r2
 8008ad4:	e7f5      	b.n	8008ac2 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber = 0u;
 8008ad6:	2200      	movs	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8008ad8:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 8008ada:	2001      	movs	r0, #1
}
 8008adc:	bd10      	pop	{r4, pc}
 8008ade:	bf00      	nop

08008ae0 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8008ae0:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8008ae2:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8008ae4:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 8008ae6:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 8008aea:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 8008aec:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 8008aee:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 8008af0:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->bTransitionStarted = false;
 8008af2:	8583      	strh	r3, [r0, #44]	@ 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8008af4:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    pHandle->hElAngleAccu = 0;
 8008af6:	6303      	str	r3, [r0, #48]	@ 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop

08008afc <VSS_Init>:
{
 8008afc:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 8008afe:	f7ff ffef 	bl	8008ae0 <VSS_Clear>
}
 8008b02:	bd08      	pop	{r3, pc}

08008b04 <VSS_CalcElAngle>:
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 8008b04:	f890 2033 	ldrb.w	r2, [r0, #51]	@ 0x33
{
 8008b08:	4603      	mov	r3, r0
    if (true == pHandle->bCopyObserver)
 8008b0a:	b11a      	cbz	r2, 8008b14 <VSS_CalcElAngle+0x10>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 8008b0c:	f9b1 0000 	ldrsh.w	r0, [r1]
      {
        hRetAngle = pHandle->hElAngleAccu;
      }
    }

    pHandle->_Super.hElAngle = hRetAngle;
 8008b10:	8098      	strh	r0, [r3, #4]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 8008b12:	4770      	bx	lr
{
 8008b14:	b530      	push	{r4, r5, lr}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8008b16:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8008b1a:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8008b1c:	88dd      	ldrh	r5, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 8008b1e:	f893 402c 	ldrb.w	r4, [r3, #44]	@ 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8008b22:	785a      	ldrb	r2, [r3, #1]
 8008b24:	fb9c f2f2 	sdiv	r2, ip, r2
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8008b28:	4460      	add	r0, ip
 8008b2a:	fa1f fe80 	uxth.w	lr, r0
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8008b2e:	442a      	add	r2, r5
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8008b30:	b200      	sxth	r0, r0
 8008b32:	8618      	strh	r0, [r3, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8008b34:	80da      	strh	r2, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 8008b36:	b1fc      	cbz	r4, 8008b78 <VSS_CalcElAngle+0x74>
        if (0 == pHandle->hTransitionRemainingSteps)
 8008b38:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 8008b3c:	b1f2      	cbz	r2, 8008b7c <VSS_CalcElAngle+0x78>
          pHandle->hTransitionRemainingSteps--;
 8008b3e:	3a01      	subs	r2, #1
 8008b40:	b212      	sxth	r2, r2
 8008b42:	85da      	strh	r2, [r3, #46]	@ 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 8008b44:	f1bc 0f00 	cmp.w	ip, #0
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 8008b48:	8809      	ldrh	r1, [r1, #0]
          if (pHandle->_Super.hElSpeedDpp >= 0)
 8008b4a:	db26      	blt.n	8008b9a <VSS_CalcElAngle+0x96>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 8008b4c:	eba1 0e0e 	sub.w	lr, r1, lr
 8008b50:	fa0f fe8e 	sxth.w	lr, lr
 8008b54:	2501      	movs	r5, #1
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 8008b56:	f9b3 4036 	ldrsh.w	r4, [r3, #54]	@ 0x36
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 8008b5a:	fb0e f202 	mul.w	r2, lr, r2
          if (hAngleDiff >= 0)
 8008b5e:	f1be 0f00 	cmp.w	lr, #0
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 8008b62:	fb92 f2f4 	sdiv	r2, r2, r4
          hAngleCorr *= hSignCorr;
 8008b66:	fb12 f205 	smulbb	r2, r2, r5
 8008b6a:	b292      	uxth	r2, r2
          if (hAngleDiff >= 0)
 8008b6c:	db0e      	blt.n	8008b8c <VSS_CalcElAngle+0x88>
            pHandle->bTransitionLocked = true;
 8008b6e:	2001      	movs	r0, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8008b70:	1a8a      	subs	r2, r1, r2
            pHandle->bTransitionLocked = true;
 8008b72:	f883 0032 	strb.w	r0, [r3, #50]	@ 0x32
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8008b76:	b210      	sxth	r0, r2
    pHandle->_Super.hElAngle = hRetAngle;
 8008b78:	8098      	strh	r0, [r3, #4]
}
 8008b7a:	bd30      	pop	{r4, r5, pc}
          hRetAngle = *(int16_t *)pInputVars_str;
 8008b7c:	f9b1 0000 	ldrsh.w	r0, [r1]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 8008b80:	701a      	strb	r2, [r3, #0]
          pHandle->bTransitionEnded = true;
 8008b82:	2401      	movs	r4, #1
 8008b84:	f883 402d 	strb.w	r4, [r3, #45]	@ 0x2d
    pHandle->_Super.hElAngle = hRetAngle;
 8008b88:	8098      	strh	r0, [r3, #4]
}
 8008b8a:	bd30      	pop	{r4, r5, pc}
            if (false == pHandle->bTransitionLocked)
 8008b8c:	f893 4032 	ldrb.w	r4, [r3, #50]	@ 0x32
 8008b90:	2c00      	cmp	r4, #0
 8008b92:	d0f1      	beq.n	8008b78 <VSS_CalcElAngle+0x74>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 8008b94:	440a      	add	r2, r1
 8008b96:	b210      	sxth	r0, r2
 8008b98:	e7ee      	b.n	8008b78 <VSS_CalcElAngle+0x74>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 8008b9a:	ebae 0e01 	sub.w	lr, lr, r1
 8008b9e:	fa0f fe8e 	sxth.w	lr, lr
 8008ba2:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 8008ba6:	e7d6      	b.n	8008b56 <VSS_CalcElAngle+0x52>

08008ba8 <VSS_CalcAvrgMecSpeedUnit>:
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 8008ba8:	8d02      	ldrh	r2, [r0, #40]	@ 0x28
 8008baa:	2a01      	cmp	r2, #1
{
 8008bac:	4603      	mov	r3, r0
    if (pHandle->hRemainingStep > 1u)
 8008bae:	d922      	bls.n	8008bf6 <VSS_CalcAvrgMecSpeedUnit+0x4e>
{
 8008bb0:	b410      	push	{r4}
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8008bb2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8008bb4:	6a1c      	ldr	r4, [r3, #32]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8008bb6:	8b5a      	ldrh	r2, [r3, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8008bb8:	4420      	add	r0, r4
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 8008bba:	ea4f 4c20 	mov.w	ip, r0, asr #16
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8008bbe:	69dc      	ldr	r4, [r3, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8008bc0:	6258      	str	r0, [r3, #36]	@ 0x24
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8008bc2:	fb0c f202 	mul.w	r2, ip, r2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8008bc6:	7858      	ldrb	r0, [r3, #1]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 8008bc8:	f8a3 c00e 	strh.w	ip, [r3, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8008bcc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8008bd0:	fb04 f000 	mul.w	r0, r4, r0
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8008bd4:	0052      	lsls	r2, r2, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8008bd6:	fb92 f2f0 	sdiv	r2, r2, r0
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 8008bda:	b212      	sxth	r2, r2
 8008bdc:	800a      	strh	r2, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 8008bde:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8008be0:	819a      	strh	r2, [r3, #12]
      pHandle->hRemainingStep--;
 8008be2:	1e42      	subs	r2, r0, #1
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 8008be4:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->hRemainingStep--;
 8008be8:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 8008bea:	b970      	cbnz	r0, 8008c0a <VSS_CalcAvrgMecSpeedUnit+0x62>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8008bec:	78da      	ldrb	r2, [r3, #3]
 8008bee:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 8008bf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bf4:	4770      	bx	lr
    else if (1U == pHandle->hRemainingStep)
 8008bf6:	d00d      	beq.n	8008c14 <VSS_CalcAvrgMecSpeedUnit+0x6c>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8008bf8:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    if (false == pHandle->bTransitionEnded)
 8008bfc:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8008c00:	800a      	strh	r2, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 8008c02:	bb00      	cbnz	r0, 8008c46 <VSS_CalcAvrgMecSpeedUnit+0x9e>
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8008c04:	78da      	ldrb	r2, [r3, #3]
 8008c06:	701a      	strb	r2, [r3, #0]
}
 8008c08:	4770      	bx	lr
 8008c0a:	f85d 4b04 	ldr.w	r4, [sp], #4
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7ff bf30 	b.w	8008a74 <SPD_IsMecSpeedReliable>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 8008c14:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	@ 0x2a
 8008c18:	f8a1 c000 	strh.w	ip, [r1]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8008c1c:	8b42      	ldrh	r2, [r0, #26]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8008c1e:	69c0      	ldr	r0, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8008c20:	f8a3 c00c 	strh.w	ip, [r3, #12]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8008c24:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008c28:	0052      	lsls	r2, r2, #1
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8008c2a:	fb00 f00c 	mul.w	r0, r0, ip
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8008c2e:	fb90 f0f2 	sdiv	r0, r0, r2
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8008c32:	785a      	ldrb	r2, [r3, #1]
 8008c34:	fb12 f200 	smulbb	r2, r2, r0
      pHandle->hRemainingStep = 0U;
 8008c38:	2000      	movs	r0, #0
 8008c3a:	8518      	strh	r0, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 8008c3c:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8008c40:	81da      	strh	r2, [r3, #14]
    if (false == pHandle->bTransitionEnded)
 8008c42:	2800      	cmp	r0, #0
 8008c44:	d0de      	beq.n	8008c04 <VSS_CalcAvrgMecSpeedUnit+0x5c>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7ff bf14 	b.w	8008a74 <SPD_IsMecSpeedReliable>

08008c4c <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 8008c4c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8008c50:	b9a3      	cbnz	r3, 8008c7c <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8008c52:	8b43      	ldrh	r3, [r0, #26]
{
 8008c54:	b510      	push	{r4, lr}
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8008c56:	69c4      	ldr	r4, [r0, #28]

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8008c58:	f890 e001 	ldrb.w	lr, [r0, #1]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8008c5c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8008c60:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8008c64:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 8008c66:	fb9c fcf3 	sdiv	ip, ip, r3
      if (0U == hDurationms)
 8008c6a:	b942      	cbnz	r2, 8008c7e <VSS_SetMecAcceleration+0x32>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8008c6c:	fb1c fc0e 	smulbb	ip, ip, lr
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8008c70:	8181      	strh	r1, [r0, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8008c72:	f8a0 c00e 	strh.w	ip, [r0, #14]

        pHandle->hRemainingStep = 0U;
 8008c76:	8502      	strh	r2, [r0, #40]	@ 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008c78:	8541      	strh	r1, [r0, #42]	@ 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8008c7a:	bd10      	pop	{r4, pc}
 8008c7c:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8008c7e:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 8008c80:	fb02 f303 	mul.w	r3, r2, r3
 8008c84:	4a0e      	ldr	r2, [pc, #56]	@ (8008cc0 <VSS_SetMecAcceleration+0x74>)
 8008c86:	fba2 2303 	umull	r2, r3, r2, r3
 8008c8a:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 8008c8e:	3301      	adds	r3, #1
 8008c90:	b29b      	uxth	r3, r3
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8008c92:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
        pHandle->hRemainingStep = hNbrStep;
 8008c96:	8503      	strh	r3, [r0, #40]	@ 0x28
        if (0U == hNbrStep)
 8008c98:	b91b      	cbnz	r3, 8008ca2 <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8008c9a:	0412      	lsls	r2, r2, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008c9c:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8008c9e:	6242      	str	r2, [r0, #36]	@ 0x24
}
 8008ca0:	bd10      	pop	{r4, pc}
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8008ca2:	fb92 f4fe 	sdiv	r4, r2, lr
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8008ca6:	ebac 0c04 	sub.w	ip, ip, r4
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 8008caa:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8008cae:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8008cb0:	fb9c f3f3 	sdiv	r3, ip, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 8008cb4:	fb0e f303 	mul.w	r3, lr, r3
 8008cb8:	6203      	str	r3, [r0, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008cba:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8008cbc:	6242      	str	r2, [r0, #36]	@ 0x24
    }
 8008cbe:	e7ef      	b.n	8008ca0 <VSS_SetMecAcceleration+0x54>
 8008cc0:	10624dd3 	.word	0x10624dd3

08008cc4 <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 8008cc4:	b151      	cbz	r1, 8008cdc <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionStarted = true;

      if (0 == pHandle->hTransitionSteps)
 8008cc6:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	@ 0x36
      pHandle->bTransitionStarted = true;
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
      if (0 == pHandle->hTransitionSteps)
 8008cd0:	b923      	cbnz	r3, 8008cdc <VSS_SetStartTransition+0x18>
      {
        pHandle->bTransitionEnded = true;
 8008cd2:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0U;
 8008cd6:	7003      	strb	r3, [r0, #0]
        bAux = false;
 8008cd8:	4618      	mov	r0, r3
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 8008cda:	4770      	bx	lr
  bool bAux = true;
 8008cdc:	2001      	movs	r0, #1
 8008cde:	4770      	bx	lr

08008ce0 <VSS_TransitionEnded>:
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
#endif
}
 8008ce0:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop

08008ce8 <memset>:
 8008ce8:	4402      	add	r2, r0
 8008cea:	4603      	mov	r3, r0
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d100      	bne.n	8008cf2 <memset+0xa>
 8008cf0:	4770      	bx	lr
 8008cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8008cf6:	e7f9      	b.n	8008cec <memset+0x4>

08008cf8 <__libc_init_array>:
 8008cf8:	b570      	push	{r4, r5, r6, lr}
 8008cfa:	4d0d      	ldr	r5, [pc, #52]	@ (8008d30 <__libc_init_array+0x38>)
 8008cfc:	4c0d      	ldr	r4, [pc, #52]	@ (8008d34 <__libc_init_array+0x3c>)
 8008cfe:	1b64      	subs	r4, r4, r5
 8008d00:	10a4      	asrs	r4, r4, #2
 8008d02:	2600      	movs	r6, #0
 8008d04:	42a6      	cmp	r6, r4
 8008d06:	d109      	bne.n	8008d1c <__libc_init_array+0x24>
 8008d08:	4d0b      	ldr	r5, [pc, #44]	@ (8008d38 <__libc_init_array+0x40>)
 8008d0a:	4c0c      	ldr	r4, [pc, #48]	@ (8008d3c <__libc_init_array+0x44>)
 8008d0c:	f000 f826 	bl	8008d5c <_init>
 8008d10:	1b64      	subs	r4, r4, r5
 8008d12:	10a4      	asrs	r4, r4, #2
 8008d14:	2600      	movs	r6, #0
 8008d16:	42a6      	cmp	r6, r4
 8008d18:	d105      	bne.n	8008d26 <__libc_init_array+0x2e>
 8008d1a:	bd70      	pop	{r4, r5, r6, pc}
 8008d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d20:	4798      	blx	r3
 8008d22:	3601      	adds	r6, #1
 8008d24:	e7ee      	b.n	8008d04 <__libc_init_array+0xc>
 8008d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d2a:	4798      	blx	r3
 8008d2c:	3601      	adds	r6, #1
 8008d2e:	e7f2      	b.n	8008d16 <__libc_init_array+0x1e>
 8008d30:	08008fe4 	.word	0x08008fe4
 8008d34:	08008fe4 	.word	0x08008fe4
 8008d38:	08008fe4 	.word	0x08008fe4
 8008d3c:	08008fe8 	.word	0x08008fe8

08008d40 <memcpy>:
 8008d40:	440a      	add	r2, r1
 8008d42:	4291      	cmp	r1, r2
 8008d44:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d48:	d100      	bne.n	8008d4c <memcpy+0xc>
 8008d4a:	4770      	bx	lr
 8008d4c:	b510      	push	{r4, lr}
 8008d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d56:	4291      	cmp	r1, r2
 8008d58:	d1f9      	bne.n	8008d4e <memcpy+0xe>
 8008d5a:	bd10      	pop	{r4, pc}

08008d5c <_init>:
 8008d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5e:	bf00      	nop
 8008d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d62:	bc08      	pop	{r3}
 8008d64:	469e      	mov	lr, r3
 8008d66:	4770      	bx	lr

08008d68 <_fini>:
 8008d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6a:	bf00      	nop
 8008d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d6e:	bc08      	pop	{r3}
 8008d70:	469e      	mov	lr, r3
 8008d72:	4770      	bx	lr
